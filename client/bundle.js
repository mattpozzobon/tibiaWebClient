/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/src/animation.ts":
/*!*********************************!*\
  !*** ./client/src/animation.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./thing */ \"./client/src/thing.ts\");\n\n\n\nclass Animation extends _thing__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.__created = performance.now();\n        this.__durations = this.__generateDurations();\n    }\n    getPattern() {\n        return _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NULL;\n    }\n    getFrame() {\n        let delta = this.__getAnimationAge();\n        for (let i = 0; i < this.__durations.length; i++) {\n            if (this.__durations[i] >= delta) {\n                return i;\n            }\n        }\n        return this.__durations.length - 1;\n    }\n    totalDuration() {\n        return this.__durations[this.__durations.length - 1];\n    }\n    expired() {\n        return this.__getAnimationAge() >= this.totalDuration();\n    }\n    __getAnimationAge() {\n        return performance.now() - this.__created;\n    }\n    __generateDefaultDurations() {\n        let duration = 0;\n        let durations = [];\n        let numberFrames = this.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE).animationLength;\n        for (let i = 0; i < numberFrames; i++) {\n            durations.push(duration += this.DEFAULT_FRAME_LENGTH_MS);\n        }\n        return durations;\n    }\n    generateExtendedDurations() {\n        let durations = this.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE).animationLengths;\n        let sum = 0;\n        return durations.map(duration => sum += Math.floor(Math.random() * (duration.max - duration.min + 1)) + duration.min);\n    }\n    __generateDurations() {\n        if (!window.gameClient.hasExtendedAnimations()) {\n            return this.__generateDefaultDurations();\n        }\n        return this.generateExtendedDurations();\n    }\n}\nAnimation.DEFAULT_FRAME_LENGTH_MS = 100;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Animation);\n\n\n//# sourceURL=webpack:///./client/src/animation.ts?");

/***/ }),

/***/ "./client/src/animationLooped.ts":
/*!***************************************!*\
  !*** ./client/src/animationLooped.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LoopedAnimation)\n/* harmony export */ });\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./thing */ \"./client/src/thing.ts\");\n\n\nclass LoopedAnimation extends _thing__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id) {\n        super(id);\n    }\n    getPattern() {\n        return _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NULL;\n    }\n    expired() {\n        return false;\n    }\n    getFrame() {\n        return this.__getGlobalFrame();\n    }\n    static initialize() {\n        LoopedAnimation.DRAWBLOOD = new LoopedAnimation(this.getAnimationId(1));\n        LoopedAnimation.LOSEENERGY = new LoopedAnimation(this.getAnimationId(2));\n        LoopedAnimation.POFF = new LoopedAnimation(this.getAnimationId(3));\n        LoopedAnimation.BLOCKHIT = new LoopedAnimation(this.getAnimationId(4));\n        LoopedAnimation.EXPLOSIONAREA = new LoopedAnimation(this.getAnimationId(5));\n        LoopedAnimation.EXPLOSIONHIT = new LoopedAnimation(this.getAnimationId(6));\n        LoopedAnimation.FIREAREA = new LoopedAnimation(this.getAnimationId(7));\n        LoopedAnimation.YELLOW_RINGS = new LoopedAnimation(this.getAnimationId(8));\n        LoopedAnimation.GREEN_RINGS = new LoopedAnimation(this.getAnimationId(9));\n        LoopedAnimation.HITAREA = new LoopedAnimation(this.getAnimationId(10));\n        LoopedAnimation.TELEPORT = new LoopedAnimation(this.getAnimationId(11));\n        LoopedAnimation.ENERGYHIT = new LoopedAnimation(this.getAnimationId(12));\n        LoopedAnimation.MAGIC_BLUE = new LoopedAnimation(this.getAnimationId(13));\n        LoopedAnimation.MAGIC_RED = new LoopedAnimation(this.getAnimationId(14));\n        LoopedAnimation.MAGIC_GREEN = new LoopedAnimation(this.getAnimationId(15));\n        LoopedAnimation.HITBYFIRE = new LoopedAnimation(this.getAnimationId(16));\n        LoopedAnimation.HITBYPOISON = new LoopedAnimation(this.getAnimationId(17));\n        LoopedAnimation.MORTAREA = new LoopedAnimation(this.getAnimationId(18));\n        LoopedAnimation.SOUND_GREEN = new LoopedAnimation(this.getAnimationId(19));\n        LoopedAnimation.SOUND_RED = new LoopedAnimation(this.getAnimationId(20));\n        LoopedAnimation.POISONAREA = new LoopedAnimation(this.getAnimationId(21));\n        LoopedAnimation.SOUND_YELLOW = new LoopedAnimation(this.getAnimationId(22));\n        LoopedAnimation.SOUND_PURPLE = new LoopedAnimation(this.getAnimationId(23));\n        LoopedAnimation.SOUND_BLUE = new LoopedAnimation(this.getAnimationId(24));\n        LoopedAnimation.SOUND_WHITE = new LoopedAnimation(this.getAnimationId(25));\n    }\n    static getAnimationId(id) {\n        return window.gameClient.dataObjects.getAnimationId(id);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/animationLooped.ts?");

/***/ }),

/***/ "./client/src/binary-heap.ts":
/*!***********************************!*\
  !*** ./client/src/binary-heap.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BinaryHeap)\n/* harmony export */ });\nclass BinaryHeap {\n    constructor() {\n        this.content = [];\n    }\n    push(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element);\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1);\n    }\n    pop() {\n        // Store the first element so we can return it later.\n        const result = this.content[0];\n        // Get the element at the end of the array.\n        const end = this.content.pop();\n        // If there are any elements left, put the end element at the start, and let it bubble up.\n        if (this.content.length > 0 && end !== undefined) {\n            this.content[0] = end;\n            this.bubbleUp(0);\n        }\n        return result;\n    }\n    remove(node) {\n        const length = this.content.length;\n        // Search for the node to remove.\n        for (let i = 0; i < length; i++) {\n            if (this.content[i] !== node) {\n                continue;\n            }\n            // Remove the element and fill the gap as in pop().\n            const end = this.content.pop();\n            if (i === length - 1 || end === undefined) {\n                break;\n            }\n            this.content[i] = end;\n            this.bubbleUp(i);\n            this.sinkDown(i);\n            break;\n        }\n    }\n    size() {\n        return this.content.length;\n    }\n    rescoreElement(node) {\n        const index = this.content.indexOf(node);\n        if (index !== -1) {\n            this.sinkDown(index);\n        }\n    }\n    sinkDown(n) {\n        const element = this.content[n];\n        while (n > 0) {\n            // Compute the parent's index.\n            const parentN = ((n + 1) >> 1) - 1;\n            const parent = this.content[parentN];\n            // If the parent's score is less than or equal, break.\n            if (element.__f >= parent.__f) {\n                break;\n            }\n            // Otherwise, swap the element with its parent.\n            this.content[parentN] = element;\n            this.content[n] = parent;\n            n = parentN;\n        }\n    }\n    bubbleUp(n) {\n        const length = this.content.length;\n        const element = this.content[n];\n        const elemScore = element.__f;\n        while (true) {\n            const child2N = (n + 1) << 1; // index of the right child\n            const child1N = child2N - 1; // index of the left child\n            let swap = null;\n            let child1Score = Infinity; // Initialize to Infinity\n            if (child1N < length) {\n                const child1 = this.content[child1N];\n                child1Score = child1.__f;\n                if (child1Score < elemScore) {\n                    swap = child1N;\n                }\n            }\n            if (child2N < length) {\n                const child2 = this.content[child2N];\n                const child2Score = child2.__f;\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N;\n                }\n            }\n            if (swap === null) {\n                break;\n            }\n            // Swap element with the smaller child.\n            this.content[n] = this.content[swap];\n            this.content[swap] = element;\n            n = swap;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/binary-heap.ts?");

/***/ }),

/***/ "./client/src/bitflag.ts":
/*!*******************************!*\
  !*** ./client/src/bitflag.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PropBitFlag: () => (/* binding */ PropBitFlag),\n/* harmony export */   \"default\": () => (/* binding */ BitFlagGenerator)\n/* harmony export */ });\nclass BitFlagGenerator {\n    constructor(flagNames) {\n        // You may also want to keep a lookup for the flag names.\n        this.flags = {};\n        this.flag = 0;\n        if (flagNames.length > 31) {\n            throw new Error(\"Cannot construct bit flag with more than 31 options.\");\n        }\n        flagNames.forEach((flag, i) => {\n            const value = 1 << i;\n            this.flags[flag] = value;\n            this[flag] = value;\n        });\n    }\n    // ✅ Add a clone method to create a new instance with the same flags\n    clone() {\n        return new BitFlagGenerator(Object.keys(this.flags));\n    }\n    getFlags() {\n        return this.flags;\n    }\n    get(flag) {\n        if (typeof flag === \"number\") {\n            return !!(this.flag & flag);\n        }\n        else {\n            return !!(this.flag & this.flags[flag]);\n        }\n    }\n    set(flag) {\n        if (typeof flag === \"number\") {\n            this.flag |= flag;\n        }\n        else {\n            if (!(flag in this.flags)) {\n                throw new Error(`Flag '${flag}' does not exist.`);\n            }\n            this.flag |= this.flags[flag];\n        }\n    }\n    unset(flag) {\n        if (typeof flag === \"number\") {\n            this.flag &= ~flag;\n        }\n        else {\n            if (!(flag in this.flags)) {\n                throw new Error(`Flag '${flag}' does not exist.`);\n            }\n            this.flag &= ~this.flags[flag];\n        }\n    }\n    print() {\n        Object.keys(this.flags).forEach(flag => {\n            if (this.get(flag)) {\n                console.log(flag);\n            }\n        });\n    }\n}\n// ✅ Create an instance of the flag bit manager.\nconst PropBitFlag = new BitFlagGenerator([\n    \"DatFlagGround\",\n    \"DatFlagGroundBorder\",\n    \"DatFlagOnBottom\",\n    \"DatFlagOnTop\",\n    \"DatFlagContainer\",\n    \"DatFlagStackable\",\n    \"DatFlagForceUse\",\n    \"DatFlagMultiUse\",\n    \"DatFlagWritable\",\n    \"DatFlagWritableOnce\",\n    \"DatFlagFluidContainer\",\n    \"DatFlagSplash\",\n    \"DatFlagNotWalkable\",\n    \"DatFlagNotMoveable\",\n    \"DatFlagBlockProjectile\",\n    \"DatFlagNotPathable\",\n    \"DatFlagNoMoveAnimation\",\n    \"DatFlagPickupable\",\n    \"DatFlagHangable\",\n    \"DatFlagHookSouth\",\n    \"DatFlagHookEast\",\n    \"DatFlagRotateable\",\n    \"DatFlagLight\",\n    \"DatFlagDontHide\",\n    \"DatFlagTranslucent\",\n    \"DatFlagDisplacement\",\n    \"DatFlagElevation\",\n    \"DatFlagLyingCorpse\",\n    \"DatFlagAnimateAlways\",\n    \"DatFlagMinimapColor\",\n]);\n\n\n//# sourceURL=webpack:///./client/src/bitflag.ts?");

/***/ }),

/***/ "./client/src/book.ts":
/*!****************************!*\
  !*** ./client/src/book.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Book)\n/* harmony export */ });\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item */ \"./client/src/item.ts\");\n\nclass Book extends _item__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id, 1);\n        this.__content = null;\n    }\n    getContent() {\n        return this.__content;\n    }\n    setContent(content) {\n        this.__content = content;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/book.ts?");

/***/ }),

/***/ "./client/src/box-animation.ts":
/*!*************************************!*\
  !*** ./client/src/box-animation.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BoxAnimation)\n/* harmony export */ });\n/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animation */ \"./client/src/animation.ts\");\n\nclass BoxAnimation extends _animation__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(color) {\n        super(0);\n        this.DEFAULT_BLINK_LENGTH_MS = 500;\n        this.color = color;\n    }\n    __generateDurations() {\n        return [this.DEFAULT_BLINK_LENGTH_MS];\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/box-animation.ts?");

/***/ }),

/***/ "./client/src/canvas.ts":
/*!******************************!*\
  !*** ./client/src/canvas.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Canvas)\n/* harmony export */ });\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sprite-buffer */ \"./client/src/sprite-buffer.ts\");\n\n\n\n\nclass Canvas {\n    constructor(id, width, height) {\n        this.canvas = this.__reference(id);\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.context = this.canvas.getContext(\"2d\");\n        this.context.imageSmoothingEnabled = false;\n    }\n    setScale(scale) {\n        this.canvas.style.transform = `scale(${scale})`;\n    }\n    renderText(text, x, y, color, font) {\n        /*\n         * Renders text with a particular color on the canvas.\n         */\n        this.context.font = font;\n        const width = 0.5 * this.context.measureText(text).width;\n        // Outline text\n        this.context.fillStyle = \"black\";\n        for (let i = -1; i < 2; i++) {\n            for (let j = -1; j < 2; j++) {\n                this.context.fillText(text, x + i - width, y + j);\n            }\n        }\n        // Main text\n        this.context.fillStyle = color;\n        this.context.fillText(text, x - width, y);\n    }\n    getWorldCoordinates(event) {\n        const { x, y } = this.getCanvasCoordinates(event);\n        const scaling = window.gameClient.interface.getResolutionScale();\n        const tileSize = _interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TILE_SIZE * scaling;\n        const position = window.gameClient.player.getPosition();\n        const projectedViewPosition = new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](Math.floor(x / tileSize) + position.x - Math.floor(_interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TILE_WIDTH / 2), Math.floor(y / tileSize) + position.y - Math.floor(_interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TILE_HEIGHT / 2), position.z);\n        const chunk = window.gameClient.world.getChunkFromWorldPosition(projectedViewPosition);\n        return chunk ? chunk.getFirstTileFromTop(projectedViewPosition.projected()) : null;\n    }\n    getCanvasCoordinates(event) {\n        /*\n         * Returns the clicked canvas coordinates from 0,0 to canvas width & height in pixels.\n         */\n        const rect = this.canvas.getBoundingClientRect();\n        return {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top,\n        };\n    }\n    black() {\n        /*\n         * Fills the entire canvas with black.\n         */\n        this.context.fillStyle = \"black\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    clear() {\n        /*\n         * Clears the canvas fully and transparently.\n         */\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    applyFilter(filter) {\n        /*\n         * Applies a post-processing filter to the rendered canvas.\n         */\n        this.__setFilter(filter);\n        this.context.drawImage(this.canvas, 0, 0);\n        this.__setFilter(\"none\");\n    }\n    drawOuterCombatRect(position, color) {\n        this.drawRect(32 * position.x + 0.5, 32 * position.y + 0.5, 30, color);\n    }\n    drawInnerCombatRect(animation, position) {\n        this.drawRect(32 * position.x + 2.5, 32 * position.y + 2.5, 26, animation.color);\n    }\n    drawRect(x, y, size, color) {\n        this.context.beginPath();\n        this.context.strokeStyle = _interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype.getHexColor(color);\n        this.context.lineWidth = 2;\n        this.context.rect(x, y, size, size);\n        this.context.stroke();\n    }\n    drawDistanceAnimation(animation, position) {\n        /*\n         * Draws a projectile animation to the canvas.\n         */\n        const fraction = animation.getFraction();\n        const renderPosition = new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](position.x + fraction * (animation.toPosition.x - animation.fromPosition.x), position.y + fraction * (animation.toPosition.y - animation.fromPosition.y), 0);\n        if (window.gameClient.interface.settings.isLightingEnabled() && animation.isLight()) {\n            window.gameClient.renderer.__renderLightThing(renderPosition, animation, 1);\n        }\n        this.drawSprite(animation, renderPosition, 32);\n    }\n    drawSprite(thing, position, size) {\n        const frameGroup = thing.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE);\n        const frame = thing.getFrame();\n        const pattern = thing.getPattern();\n        for (let x = 0; x < frameGroup.width; x++) {\n            for (let y = 0; y < frameGroup.height; y++) {\n                for (let l = 0; l < frameGroup.layers; l++) {\n                    let index = frameGroup.getSpriteIndex(frame, pattern.x, pattern.y, pattern.z, l, x, y);\n                    this.__drawSprite(frameGroup.getSprite(index), position, x, y, size);\n                }\n            }\n        }\n    }\n    __setFilter(filter) {\n        /*\n         * Sets an SVG filter for the canvas.\n         */\n        switch (filter) {\n            case \"matrix\":\n                this.context.filter = \"url(#matrix)\";\n                break;\n            case \"greyscale\":\n                this.context.filter = \"grayscale()\";\n                break;\n            case \"hue\":\n                this.context.filter = `hue-rotate(${window.gameClient.getFrame() % 360}deg)`;\n                break;\n            case \"invert\":\n                this.context.filter = \"invert()\";\n                break;\n            case \"sepia\":\n                this.context.filter = \"sepia()\";\n                break;\n            case \"blur\":\n                this.context.filter = \"blur(4px)\";\n                break;\n            case \"saturate\":\n                this.context.filter = \"saturate(20%)\";\n                break;\n            case \"none\":\n            default:\n                this.context.filter = \"none\";\n                break;\n        }\n    }\n    __drawSprite(sprite, position, x, y, size) {\n        if (!sprite)\n            return;\n        window.gameClient.renderer.drawCalls++;\n        this.context.drawImage(sprite.src, 32 * sprite.position.x, 32 * sprite.position.y, 32, 32, Math.round(32 * (position.x - x)), Math.round(32 * (position.y - y)), 32, 32);\n    }\n    __reference(id) {\n        /*\n         * References a new or existing canvas.\n         */\n        if (id === null) {\n            return document.createElement(\"canvas\");\n        }\n        if (typeof id === \"string\") {\n            return document.getElementById(id);\n        }\n        return id;\n    }\n    drawSpriteOverlay(thing, position, size) {\n        /*\n         * Draws the blurred overlay over a draggable thing.\n         */\n        const frameGroup = thing.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GROUP_IDLE);\n        const frame = thing.getFrame();\n        const pattern = thing.getPattern();\n        for (let x = 0; x < frameGroup.width; x++) {\n            for (let y = 0; y < frameGroup.height; y++) {\n                for (let l = 0; l < frameGroup.layers; l++) {\n                    let index = frameGroup.getSpriteIndex(frame, pattern.x, pattern.y, pattern.z, l, x, y);\n                    window.gameClient.renderer.outlineCanvas.createOutline(frameGroup.sprites[index]);\n                    this.context.drawImage(window.gameClient.renderer.outlineCanvas.canvas, 0, 0, 33, 33, position.x * 32 - 1, position.y * 32 - 1, 33, 33);\n                }\n            }\n        }\n    }\n    drawCharacter(creature, position, size, offset) {\n        let frames = creature.getCharacterFrames();\n        if (frames === null)\n            return;\n        let xPattern = creature.__lookDirection % 4;\n        let zPattern = frames.characterGroup.pattern.z > 1 && creature.isMounted() ? 1 : 0;\n        this.__drawCharacter(creature.spriteBuffer, creature.spriteBufferMount, creature.outfit, position, frames.characterGroup, frames.mountGroup, frames.characterFrame, frames.mountFrame, frames.headGroup, frames.bodyGroup, frames.legsGroup, frames.feetGroup, frames.hairGroup, frames.leftHandGroup, frames.rightHandGroup, frames.headFrame, frames.bodyFrame, frames.legsFrame, frames.feetFrame, frames.hairFrame, frames.leftHandFrame, frames.rightHandFrame, xPattern, zPattern, size, offset, frames.isMoving);\n    }\n    __drawCharacter(spriteBuffer, spriteBufferMount, outfit, position, characterGroup, mountGroup, characterFrame, mountFrame, headGroup, bodyGroup, legsGroup, feetGroup, hairGroup, leftHandGroup, rightHandGroup, headFrame, bodyFrame, legsFrame, feetFrame, hairFrame, leftHandFrame, rightHandFrame, xPattern, zPattern, size, offset, isMoving) {\n        /*\n         * Draws a character with all layers (armor, outfit, weapons, mount).\n         */\n        let drawPosition = new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](position.x - offset, position.y - offset, 0);\n        //TODO: Revisit spriteBuffer\n        this.__drawCharacterLayer(spriteBuffer, outfit, characterGroup, characterFrame, xPattern, zPattern, drawPosition, size, 0, false);\n        if (bodyGroup)\n            this.__drawCharacterLayer(new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](64), outfit, bodyGroup, bodyFrame, xPattern, zPattern, drawPosition, size, 0, false);\n        if (legsGroup)\n            this.__drawCharacterLayer(new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](64), outfit, legsGroup, legsFrame, xPattern, zPattern, drawPosition, size, 0, false);\n        if (feetGroup)\n            this.__drawCharacterLayer(new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](64), outfit, feetGroup, feetFrame, xPattern, zPattern, drawPosition, size, 0, false);\n        if (leftHandGroup)\n            this.__drawCharacterLayer(new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](64), outfit, leftHandGroup, leftHandFrame, xPattern, zPattern, drawPosition, size, 0, false);\n        if (rightHandGroup)\n            this.__drawCharacterLayer(new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](64), outfit, rightHandGroup, rightHandFrame, xPattern, zPattern, drawPosition, size, 0, false);\n        if (headGroup) {\n            this.__drawCharacterLayer(new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](64), outfit, headGroup, headFrame, xPattern, zPattern, drawPosition, size, 0, false);\n        }\n        else {\n            if (hairGroup) {\n                this.__drawCharacterLayer(new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](64), outfit, hairGroup, hairFrame, xPattern, zPattern, drawPosition, size, 0, true);\n            }\n        }\n        if (zPattern === 1 && mountGroup) {\n            let mountSprite = mountGroup.getSpriteId(mountFrame, xPattern, 0, 0, 0, 0, 0);\n            if (mountSprite !== 0) {\n                this.__drawSprite(spriteBufferMount.get(mountSprite), drawPosition, 0, 0, size);\n            }\n        }\n    }\n    __drawCharacterLayer(spriteBuffer, outfit, group, frame, xPattern, zPattern, position, size, yPattern, hasMask = false) {\n        if (!group) {\n            return;\n        }\n        for (let x = 0; x < group.width; x++) {\n            for (let y = 0; y < group.height; y++) {\n                let spriteId = group.getSpriteId(frame, xPattern, yPattern, zPattern, 0, x, y);\n                if (spriteId === 0)\n                    continue;\n                let sprite = null;\n                if (hasMask) {\n                    if (!spriteBuffer.has(spriteId)) {\n                        //console.log(`🟢 Adding composed outfit for spriteId: ${spriteId} at (${x}, ${y})`);\n                        spriteBuffer.addComposedOutfit(spriteId, outfit, group, frame, xPattern, zPattern, x, y);\n                    }\n                }\n                try {\n                    sprite = spriteBuffer.get(spriteId);\n                }\n                catch (error) {\n                    console.error(\"Error in spriteBuffer.get:\", error);\n                }\n                this.__drawSprite(sprite, position, x, y, size);\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/canvas.ts?");

/***/ }),

/***/ "./client/src/casting-manager.ts":
/*!***************************************!*\
  !*** ./client/src/casting-manager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CastingManager)\n/* harmony export */ });\nclass CastingManager {\n    constructor() {\n        this.__castBegin = null;\n        this.__spell = null;\n    }\n    isCasting() {\n        return this.__castBegin !== null;\n    }\n    beginCast(spell) {\n        // Schedule an event for when casting should end.\n        this.__castBegin = window.gameClient.eventQueue.addEvent(this.endCast.bind(this), spell.cast || spell.channel);\n        this.__spell = spell;\n    }\n    endCast() {\n        this.__castBegin = null;\n        this.__spell = null;\n    }\n    getCastFraction() {\n        if (this.__castBegin === null) {\n            return 0;\n        }\n        // TODO: Check remainingFrames() method in HeapEvent.\n        // Assuming __castBegin.remainingFrames() returns a number.\n        return 1 - this.__castBegin.remainingMillis();\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/casting-manager.ts?");

/***/ }),

/***/ "./client/src/channel-manager.ts":
/*!***************************************!*\
  !*** ./client/src/channel-manager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _channel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel */ \"./client/src/channel.ts\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _local_channel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./local-channel */ \"./client/src/local-channel.ts\");\n/* harmony import */ var _message_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message-character */ \"./client/src/message-character.ts\");\n/* harmony import */ var _private_channel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./private-channel */ \"./client/src/private-channel.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n\n\n\n\n\n\n// Utility: If you need a clamp function on numbers, you can add one.\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nclass ChannelManager {\n    constructor() {\n        this.channels = [];\n        this.__activeIndex = 0;\n        this.__disabled = true;\n        this.__currentDragElement = null;\n        // Assume these elements exist in the DOM.\n        this.__inputElement = document.getElementById(\"chat-input\");\n        this.__headerElement = document.getElementById(\"cheader\");\n        // Always add these two channels.\n        this.addChannel(0x00, \"Default\");\n        this.addLocalChannel(\"Console\");\n        // Add listeners to left and right buttons for channel navigation.\n        const leftChannel = document.getElementById(\"left-channel\");\n        if (leftChannel) {\n            leftChannel.addEventListener(\"click\", this.handleChannelIncrement.bind(this, -1));\n        }\n        const rightChannel = document.getElementById(\"right-channel\");\n        if (rightChannel) {\n            rightChannel.addEventListener(\"click\", this.handleChannelIncrement.bind(this, 1));\n        }\n        // Add listener to the send button.\n        const sendChatMessage = document.getElementById(\"send-chat-message\");\n        if (sendChatMessage) {\n            sendChatMessage.addEventListener(\"click\", this.handleMessageSend.bind(this));\n        }\n        // Attach a listener to the header for handling channel drops.\n        const cheader = document.getElementById(\"cheader\");\n        if (cheader) {\n            cheader.addEventListener(\"dragover\", this.__handleChannelDrop.bind(this));\n        }\n        // Focus on the main default channel.\n        this.setActiveChannel(0);\n        // Add listener for changing the chat loudness.\n        const chatSayLoudness = document.getElementById(\"chat-say-loudness\");\n        if (chatSayLoudness) {\n            chatSayLoudness.addEventListener(\"click\", this.__changeLoudness);\n        }\n    }\n    // Returns the current loudness based on the innerHTML of the chat-say-loudness element.\n    getLoudness() {\n        const loudnessElement = document.getElementById(\"chat-say-loudness\");\n        if (!loudnessElement)\n            return ChannelManager.LOUDNESS.SAY; // Default to SAY.\n        switch (loudnessElement.innerHTML) {\n            case \")\":\n                return ChannelManager.LOUDNESS.WHISPER;\n            case \"))\":\n                return ChannelManager.LOUDNESS.SAY;\n            case \")))\":\n                return ChannelManager.LOUDNESS.YELL;\n            default:\n                return ChannelManager.LOUDNESS.SAY;\n        }\n    }\n    // Changes the loudness cycling through the available options.\n    __changeLoudness(event) {\n        const target = event.currentTarget;\n        switch (target.innerHTML) {\n            case \")\":\n                target.innerHTML = \"))\";\n                break;\n            case \"))\":\n                target.innerHTML = \")))\";\n                break;\n            case \")))\":\n                target.innerHTML = \")\";\n                break;\n        }\n    }\n    isDisabled() {\n        return this.__disabled;\n    }\n    // Toggles the chat input lock, updating the DOM accordingly.\n    toggleInputLock() {\n        var _a;\n        this.__disabled = !this.__disabled;\n        this.__inputElement.disabled = this.__disabled;\n        if (this.__disabled) {\n            this.__inputElement.placeholder = \"Press Enter to unlock.\";\n            (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.blur();\n        }\n        else {\n            this.__inputElement.placeholder = \"Press Enter to lock.\";\n            this.__inputElement.focus();\n        }\n    }\n    // Handles drop events in the channel header for reordering channels.\n    __handleChannelDrop(event) {\n        if (this.__currentDragElement === null) {\n            return;\n        }\n        const element = event.target;\n        const cheader = document.getElementById(\"cheader\");\n        if (!cheader)\n            return;\n        if (element === cheader) {\n            cheader.appendChild(this.__currentDragElement);\n            return;\n        }\n        if (element.parentElement && element.parentElement.className === \"channel-header\") {\n            cheader.insertBefore(this.__currentDragElement, element.parentElement);\n        }\n    }\n    // Attaches drag event listeners to the channel's element.\n    dragElement(elmnt) {\n        elmnt.element.addEventListener(\"dragstart\", this.__handleDragStart.bind(this));\n        elmnt.element.addEventListener(\"dragend\", this.__handleDragEnd.bind(this));\n    }\n    __handleDragEnd(event) {\n        this.__currentDragElement = null;\n        const target = event.target;\n        target.style.opacity = \"1\";\n    }\n    __handleDragStart(event) {\n        const target = event.target;\n        this.__currentDragElement = target.parentElement;\n        target.style.opacity = \"0.25\";\n    }\n    // Sends a join request to the server for a given channel.\n    joinChannel(id, name) {\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_5__.ChannelJoinPacket(id));\n    }\n    // Handles an open channel request.\n    handleOpenChannel(channel) {\n        if (channel.id !== null) {\n            this.addChannel(channel.id, channel.name);\n        }\n    }\n    // Closes the currently active channel.\n    closeCurrentChannel() {\n        this.closeChannel(this.getActiveChannel());\n    }\n    // Closes a given channel. Prevents closing the default channel.\n    closeChannel(channel) {\n        const index = this.channels.indexOf(channel);\n        if (index === -1) {\n            return;\n        }\n        if (channel.id === 0) {\n            window.gameClient.interface.setCancelMessage(\"The Default channel cannot be closed.\");\n            return;\n        }\n        // Set the previous channel as the new active channel.\n        this.setActiveChannel(Math.max(0, index - 1));\n        this.channels.splice(index, 1);\n        if (channel.element.parentNode) {\n            channel.element.parentNode.removeChild(channel.element);\n        }\n        // For channels that are not private or local, inform the server.\n        if (channel instanceof _private_channel__WEBPACK_IMPORTED_MODULE_4__[\"default\"] || channel instanceof _local_channel__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            return;\n        }\n        if (channel.id)\n            window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_5__.ChannelLeavePacket(channel.id));\n    }\n    // Increments or decrements the active channel by a given increment.\n    handleChannelIncrement(increment) {\n        const newIndex = (this.channels.length + this.__activeIndex + increment) % this.channels.length;\n        this.setActiveChannel(newIndex);\n    }\n    // Returns the currently active channel.\n    getActiveChannel() {\n        return this.channels[this.__activeIndex];\n    }\n    // Checks if the provided channel is currently active.\n    isActive(channel) {\n        return this.getActiveChannel() === channel;\n    }\n    // If the current active channel has previous messages, suggest the last one.\n    suggestPrevious() {\n        var _a;\n        const activeChannel = this.getActiveChannel();\n        if (activeChannel.isEmpty()) {\n            return;\n        }\n        this.__inputElement.value = (_a = activeChannel.lastMessageSelf()) !== null && _a !== void 0 ? _a : \"\";\n    }\n    // Returns true if the chat input element is currently focused.\n    isInputActive() {\n        return this.__inputElement === document.activeElement;\n    }\n    // Adds a console message to the \"Console\" channel.\n    addConsoleMessage(message, color) {\n        const consoleChannel = this.getChannel(\"Console\");\n        if (consoleChannel !== null) {\n            consoleChannel.addConsoleMessage(message, color);\n        }\n    }\n    // Searches for a channel by its ID.\n    getChannelById(id) {\n        for (const channel of this.channels) {\n            if (channel.id === id) {\n                return channel;\n            }\n        }\n        return null;\n    }\n    // Searches for a channel by its name.\n    getChannel(name) {\n        for (const channel of this.channels) {\n            if (channel.name === name) {\n                return channel;\n            }\n        }\n        return null;\n    }\n    // Adds a local channel.\n    addLocalChannel(name) {\n        const existingChannel = this.getChannel(name);\n        if (existingChannel !== null) {\n            this.setActiveChannelElement(existingChannel);\n            return;\n        }\n        this.__addChannel(new _local_channel__WEBPACK_IMPORTED_MODULE_2__[\"default\"](name));\n    }\n    // Adds a private channel.\n    addPrivateChannel(name) {\n        const existingChannel = this.getChannel(name);\n        if (existingChannel !== null) {\n            this.setActiveChannelElement(existingChannel);\n            return;\n        }\n        if (window.gameClient && window.gameClient.player.vitals.name === name) {\n            window.gameClient.interface.setCancelMessage(\"Cannot open a chat window yourself.\");\n            return;\n        }\n        this.__addChannel(new _private_channel__WEBPACK_IMPORTED_MODULE_4__[\"default\"](name));\n    }\n    // Adds a public channel.\n    addChannel(id, name) {\n        const existingChannel = this.getChannel(name);\n        if (existingChannel !== null) {\n            this.setActiveChannelElement(existingChannel);\n            return;\n        }\n        this.__addChannel(new _channel__WEBPACK_IMPORTED_MODULE_0__[\"default\"](name, id));\n    }\n    // Internal method to add a channel to the collection and DOM.\n    __addChannel(channel) {\n        this.channels.push(channel);\n        this.setActiveChannelElement(channel);\n        this.dragElement(channel);\n    }\n    // Sets the active channel using a channel reference.\n    setActiveChannelElement(channel) {\n        const index = this.channels.indexOf(channel);\n        if (index === -1)\n            return;\n        this.setActiveChannel(index);\n    }\n    // Sets the header offset so the active channel is properly visible.\n    setHeaderOffset(element) {\n        var _a;\n        const parent = (_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;\n        const selfParent = element.parentElement;\n        if (parent && selfParent) {\n            const parentOffset = parent.offsetLeft;\n            const selfOffset = selfParent.offsetLeft;\n            this.__headerElement.scrollLeft = selfOffset - parentOffset;\n        }\n    }\n    // Handles sending a private message in a private channel.\n    __handlePrivateMessageSend(channel, message) {\n        channel.__addMessage(new _message_character__WEBPACK_IMPORTED_MODULE_3__[\"default\"](message, 0, window.gameClient.player.vitals.name, _interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"].COLORS.MAYABLUE));\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_5__.ChannelPrivatePacket(channel.name, message));\n    }\n    // Reads the chat input and sends the message to the appropriate channel.\n    handleMessageSend() {\n        const message = this.__inputElement.value.trim();\n        this.__inputElement.value = \"\";\n        if (message.length === 0)\n            return;\n        const channel = this.getActiveChannel();\n        if (channel instanceof _local_channel__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            window.gameClient.interface.setCancelMessage(\"Cannot write to a local channel.\");\n            return;\n        }\n        if (channel instanceof _private_channel__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            this.__handlePrivateMessageSend(channel, message);\n            return;\n        }\n        const loudness = this.getLoudness();\n        if (channel.id !== null) {\n            window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_5__.ChannelMessagePacket(channel.id, loudness, message));\n        }\n    }\n    // Updates the active channel index.\n    __setActiveChannel(index) {\n        this.__activeIndex = index;\n    }\n    // Clears all messages from the currently active channel.\n    clearCurrentChannel() {\n        this.getActiveChannel().clear();\n    }\n    // Sets a new active channel by its index, updating DOM classes and header offset.\n    setActiveChannel(index) {\n        // Reset the currently selected channel's class.\n        this.getActiveChannel().element.className = \"chat-title\";\n        this.__setActiveChannel(index);\n        // Select the new active channel.\n        this.getActiveChannel().select();\n        // Adjust header scroll.\n        this.setHeaderOffset(this.getActiveChannel().element);\n    }\n}\n// Static constant for loudness settings.\nChannelManager.LOUDNESS = {\n    WHISPER: 0,\n    SAY: 1,\n    YELL: 2,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChannelManager);\n\n\n//# sourceURL=webpack:///./client/src/channel-manager.ts?");

/***/ }),

/***/ "./client/src/channel.ts":
/*!*******************************!*\
  !*** ./client/src/channel.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Channel)\n/* harmony export */ });\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _message_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./message-character */ \"./client/src/message-character.ts\");\n\n\nclass Channel {\n    constructor(name, id) {\n        this.MAX_MESSAGE_COUNT = 100;\n        this.name = name;\n        this.id = id;\n        this.__contents = [];\n        this.element = this.__createElement(name);\n    }\n    close() {\n        // Delegate channel closure to the channel manager.S\n        window.gameClient.interface.channelManager.closeChannel(this);\n    }\n    addPrivateMessage(message, name) {\n        // Private messages are colored skyblue.\n        this.addMessage(message, 0, name, _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.SKYBLUE);\n    }\n    addMessage(message, type, name, color) {\n        // Wrap the message in a CharacterMessage and add it.\n        this.__addMessage(new _message_character__WEBPACK_IMPORTED_MODULE_1__[\"default\"](message, type, name, color));\n    }\n    blink() {\n        // Change the channel tab color to indicate a new message.\n        this.element.style.color = \"orange\";\n    }\n    lastMessageSelf() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        // Filter messages where the sender is the current player.\n        const filtered = this.__contents.filter((msg) => window.gameClient.player.vitals.name === msg.name);\n        return filtered.length ? filtered[filtered.length - 1].message : null;\n    }\n    lastMessage() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        return this.__contents[this.__contents.length - 1].message;\n    }\n    isEmpty() {\n        return this.__contents.length === 0;\n    }\n    __isScrolledDown(chatbox) {\n        return chatbox.scrollTop === chatbox.scrollHeight - chatbox.offsetHeight;\n    }\n    render() {\n        const chatbox = document.getElementById(\"chat-text-area\");\n        if (!chatbox)\n            return;\n        const scrollDown = this.__isScrolledDown(chatbox);\n        chatbox.innerHTML = \"\";\n        if (this.isEmpty()) {\n            chatbox.innerHTML = this.__getEmptyMessage();\n            return;\n        }\n        this.__contents.forEach((message) => {\n            chatbox.appendChild(message.createNode());\n        });\n        if (scrollDown) {\n            chatbox.scrollTop = chatbox.scrollHeight;\n        }\n    }\n    click(event) {\n        // When the tab is clicked, set this channel as active.\n        window.gameClient.interface.channelManager.setActiveChannelElement(this);\n    }\n    select() {\n        // Mark the channel as selected, render its messages, and reset its color.\n        this.element.className = \"chat-title selected\";\n        this.render();\n        this.element.style.color = \"\";\n    }\n    clear() {\n        this.__contents = [];\n        this.render();\n        return true;\n    }\n    addConsoleMessage(message, color) {\n        this.__addMessage(new Message(message, color));\n    }\n    __addMessage(message) {\n        this.__contents.push(message);\n        // Keep only the last MAX_MESSAGE_COUNT messages.\n        this.__contents = this.__contents.slice(-this.MAX_MESSAGE_COUNT);\n        // If this channel is active, render immediately.\n        if (window.gameClient.interface.channelManager.isActive(this)) {\n            this.render();\n            return;\n        }\n        // Otherwise, indicate a new message.\n        this.blink();\n    }\n    __getEmptyMessage() {\n        return `<span class=\"channel-empty\">No messages in channel ${this.name}.</span>`;\n    }\n    __createElement(name) {\n        // Create the container for the channel tab.\n        const div = document.createElement(\"div\");\n        div.className = \"channel-header\";\n        // Create the tab element.\n        const tab = document.createElement(\"div\");\n        tab.draggable = true;\n        tab.className = \"chat-title\";\n        tab.innerHTML = `<span>${name}</span>`;\n        tab.addEventListener(\"click\", this.click.bind(this));\n        div.appendChild(tab);\n        // Append the tab to the header container.\n        const cheader = document.getElementById(\"cheader\");\n        if (cheader) {\n            cheader.appendChild(div);\n        }\n        return tab;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/channel.ts?");

/***/ }),

/***/ "./client/src/chunk.ts":
/*!*****************************!*\
  !*** ./client/src/chunk.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Chunk)\n/* harmony export */ });\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tile */ \"./client/src/tile.ts\");\n\n\nclass Chunk {\n    constructor(id, position, tiles) {\n        this.id = id;\n        this.position = position;\n        // Initialize tiles by converting incoming definitions to Tile instances.\n        this.tiles = this.__createTiles(tiles);\n    }\n    besides(chunk) {\n        // Returns true if this chunk is besides another chunk.\n        return this.position.besides(chunk.position);\n    }\n    getNumberTiles() {\n        // Returns the total number of tiles in a chunk.\n        return Chunk.WIDTH * Chunk.HEIGHT * Chunk.DEPTH;\n    }\n    static getNumberTilesLayer() {\n        return this.WIDTH * this.HEIGHT;\n    }\n    getFloorTiles(floor) {\n        // Returns the slice of tiles for a particular floor.\n        const index = floor % Chunk.DEPTH;\n        const min = Chunk.WIDTH * Chunk.HEIGHT * index;\n        const max = Chunk.WIDTH * Chunk.HEIGHT * (index + 1);\n        return this.tiles.slice(min, max);\n    }\n    getTileFromWorldPosition(position) {\n        // Returns a tile from a true world position (after projecting it).\n        return this.__getTileFromWorldPosition(position.projected());\n    }\n    getFirstTileFromTop(position) {\n        // Returns the first tile starting from the top for a given (x, y) screen position.\n        const maximum = Math.max(0, window.gameClient.player.getMaxFloor() - 1);\n        const minimum = 0;\n        // Check each floor from the top downward.\n        for (let z = maximum; z >= minimum; z--) {\n            const tile = this.__getTileFromWorldPosition(new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](position.x, position.y, z));\n            if (tile && (tile.id !== 0 || tile.items.length > 0)) {\n                return tile;\n            }\n        }\n        return null;\n    }\n    getFirstFloorFromBottomProjected(position) {\n        // Returns the first visible floor from the bottom, using a projected position.\n        const minimum = (position.z % Chunk.DEPTH) + 1;\n        const maximum = Math.max(minimum, Chunk.DEPTH);\n        for (let z = 1; z <= maximum - minimum; z++) {\n            const tilePosition = position;\n            const tile = window.gameClient.world.getTileFromWorldPosition(new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tilePosition.x + z, tilePosition.y + z, tilePosition.z + z));\n            if (tile === null) {\n                continue;\n            }\n            if (tile.id !== 0 && !tile.isTranslucent()) {\n                return (tilePosition.z + z) % 8;\n            }\n        }\n        return Chunk.DEPTH;\n    }\n    getFirstFloorFromBottom(position) {\n        // Returns the first visible floor from the bottom used for determining the maximum render layer.\n        const positions = [\n            position,\n            position.north(),\n            position.west()\n        ];\n        const minimum = (position.z % Chunk.DEPTH) + 1;\n        const maximum = Math.max(minimum, Chunk.DEPTH);\n        for (let z = 1; z <= maximum - minimum; z++) {\n            for (let i = 0; i < positions.length; i++) {\n                const tilePosition = positions[i];\n                const tile = window.gameClient.world.getTileFromWorldPosition(new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tilePosition.x + z, tilePosition.y + z, tilePosition.z + z));\n                if (tile === null) {\n                    continue;\n                }\n                if ((tile.id !== 0 && !tile.isTranslucent()) || tile.items.length > 0) {\n                    return (tilePosition.z + z) % 8;\n                }\n            }\n        }\n        return Chunk.DEPTH;\n    }\n    // Private helper methods\n    __createTiles(tiles) {\n        // Updates the chunk with the incoming definition of server tiles.\n        const worldPosition = this.__getWorldPosition();\n        return tiles.map((tile, i) => {\n            // Get the relative tile position within the chunk.\n            const relativeTilePosition = this.__getPositionFromIndex(i);\n            // Calculate the true world position by adding the chunk's world position.\n            const tileWorldPosition = worldPosition.add(relativeTilePosition.unprojected());\n            // Create and return a new Tile.\n            return new _tile__WEBPACK_IMPORTED_MODULE_1__[\"default\"](tile, tileWorldPosition);\n        });\n    }\n    __getTileFromIndex(index) {\n        // Returns the tile from a given index (if valid).\n        if (index < 0 || index >= this.tiles.length) {\n            return null;\n        }\n        return this.tiles[index];\n    }\n    __getTileFromWorldPosition(worldPosition) {\n        // Returns the tile at a given world position.\n        if (!this.tiles) {\n            return null;\n        }\n        return this.__getTileFromIndex(this.__getTileIndex(worldPosition));\n    }\n    __getWorldPosition() {\n        // Returns the world position for the corner of the chunk.\n        return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](Chunk.WIDTH * this.position.x, Chunk.HEIGHT * this.position.y, Chunk.DEPTH * this.position.z);\n    }\n    __getPositionFromIndex(index) {\n        // Returns the relative position of a tile within the chunk from its index.\n        if (index < 0 || index >= Chunk.WIDTH * Chunk.HEIGHT * Chunk.DEPTH) {\n            throw new Error(\"Could not map chunk index to world position.\");\n        }\n        const x = index % Chunk.WIDTH;\n        const y = Math.floor((index / Chunk.WIDTH) % Chunk.HEIGHT);\n        const z = Math.floor(index / (Chunk.WIDTH * Chunk.HEIGHT));\n        return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y, z);\n    }\n    __getTileIndex(worldPosition) {\n        // Returns the index of the tile in the chunk for a given world position.\n        const a = (worldPosition.x % Chunk.WIDTH);\n        const b = (worldPosition.y % Chunk.HEIGHT) * Chunk.WIDTH;\n        const c = (worldPosition.z % Chunk.DEPTH) * Chunk.WIDTH * Chunk.HEIGHT;\n        return a + b + c;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/chunk.ts?");

/***/ }),

/***/ "./client/src/clock.ts":
/*!*****************************!*\
  !*** ./client/src/clock.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Clock)\n/* harmony export */ });\nclass Clock {\n    constructor() {\n        this.__phase = 0;\n        this.__initialized = performance.now();\n        this.CLOCK_SPEED = 0;\n    }\n    setPhase(phase) {\n        // Sets the phase of the world clock.\n        this.__phase = phase;\n        this.__initialized = performance.now();\n    }\n    getUnix() {\n        // Returns the \"Unix\" time of the server in milliseconds,\n        // wrapped around using modular arithmetic.\n        return ((this.__phase +\n            this.CLOCK_SPEED * (performance.now() - this.__initialized)) %\n            (24 * 60 * 60 * 1000));\n    }\n    getTimeString() {\n        // Returns the string representation of the world time as HH:MM.\n        const unix = this.getUnix();\n        const seconds = Math.floor(unix / 1000) % 60;\n        const minutes = Math.floor(unix / (60 * 1000)) % 60;\n        const hours = Math.floor(unix / (60 * 60 * 1000)) % 24;\n        return `${String(hours).padStart(2, \"0\")}:${String(minutes).padStart(2, \"0\")}`;\n    }\n    updateClockDOM() {\n        // Renders clock information to the DOM.\n        const clockElement = document.getElementById(\"clock-time\");\n        if (clockElement) {\n            clockElement.innerHTML = this.getTimeString();\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/clock.ts?");

/***/ }),

/***/ "./client/src/condition.ts":
/*!*********************************!*\
  !*** ./client/src/condition.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass ConditionManager {\n    constructor(player, conditions) {\n        /*\n         * Class ConditionManager\n         * Handler for player conditions\n         */\n        this.__player = player;\n        this.__conditions = new Set(conditions);\n    }\n    has(cid) {\n        /*\n         * Function ConditionManager.has\n         * Returns true if the player is currently suffering from the condition\n         */\n        return this.__conditions.has(cid);\n    }\n    add(cid) {\n        /*\n         * Function ConditionManager.add\n         * Adds a condition to the list of conditions\n         */\n        this.__conditions.add(cid);\n        // Update the status bar\n        if (this.__player === window.gameClient.player) {\n            // window.gameClient.interface.statusBar.update();\n        }\n        if (this.__player.hasCondition(ConditionManager.DRUNK)) {\n            if (!this.__player.hasCondition(ConditionManager.SUPPRESS_DRUNK)) {\n                const screen = document.getElementById(\"screen\");\n                if (screen)\n                    screen.style.filter = \"blur(2px)\";\n            }\n        }\n    }\n    remove(cid) {\n        /*\n         * Function ConditionManager.remove\n         * Removes a condition from the list of conditions\n         */\n        this.__conditions.delete(cid);\n        // Update the status bar\n        if (this.__player === window.gameClient.player) {\n            //window.gameClient.interface.statusBar.update();\n        }\n        if (!this.__player.hasCondition(ConditionManager.DRUNK)) {\n            const screen = document.getElementById(\"screen\");\n            if (screen)\n                screen.style.filter = \"\";\n        }\n    }\n}\nConditionManager.DRUNK = 0;\nConditionManager.POISONED = 1;\nConditionManager.BURNING = 2;\nConditionManager.ELECTRIFIED = 3;\nConditionManager.INVISIBLE = 4;\nConditionManager.PROTECTION_ZONE = 5;\nConditionManager.COMBAT_LOCK = 6;\nConditionManager.SUPPRESS_DRUNK = 7;\nConditionManager.LIGHT = 8;\nConditionManager.HEALING = 9;\nConditionManager.REGENERATION = 10;\nConditionManager.MORPH = 11;\nConditionManager.MAGIC_SHIELD = 12;\nConditionManager.SATED = 14;\nConditionManager.HASTE = 15;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ConditionManager);\n\n\n//# sourceURL=webpack:///./client/src/condition.ts?");

/***/ }),

/***/ "./client/src/config/constants.json":
/*!******************************************!*\
  !*** ./client/src/config/constants.json ***!
  \******************************************/
/***/ ((module) => {

eval("module.exports = /*#__PURE__*/JSON.parse('{\"CONTAINER\":{\"EQUIPMENT\":0,\"DEPOT\":1,\"KEYRING\":2},\"CHANNEL\":{\"DEFAULT\":0,\"WORLD\":1,\"TRADE\":2,\"HELP\":3},\"MONSTER\":{\"RAT\":0},\"PROTOCOL\":{\"CLIENT\":{\"LATENCY\":0,\"LOGOUT\":1,\"MOVE\":2,\"CONTAINER_CLOSE\":3,\"TURN\":4,\"OUTFIT\":5,\"TARGET\":6,\"CAST_SPELL\":7,\"CHANNEL_MESSAGE\":8,\"CHANNEL_JOIN\":9,\"CHANNEL_LEAVE\":10,\"CHANNEL_PRIVATE_MESSAGE\":11,\"THING_MOVE\":12,\"THING_USE_WITH\":13,\"THING_USE\":14,\"THING_LOOK\":15,\"FRIEND_REMOVE\":16,\"FRIEND_ADD\":17,\"BUY_OFFER\":18,\"OPEN_KEYRING\":19,\"CLIENT_USE_TILE\":20,\"TARGET_CANCEL\":21,\"REMOVE_FRIEND\":34,\"ADD_FRIEND\":35},\"SERVER\":{\"LATENCY\":0,\"ITEM_ADD\":1,\"ITEM_REMOVE\":10,\"CHUNK\":2,\"MESSAGE_CANCEL\":22,\"MESSAGE_SERVER\":3,\"MESSAGE_PRIVATE\":16,\"CREATURE_MESSAGE\":4,\"CREATURE_MOVE\":5,\"CREATURE_REMOVE\":9,\"CREATURE_TELEPORT\":15,\"CREATURE_STATE\":12,\"CREATURE_SAY\":25,\"CREATURE_INFORMATION\":27,\"CONTAINER_OPEN\":6,\"CONTAINER_CLOSE\":11,\"CONTAINER_ADD\":7,\"CONTAINER_REMOVE\":13,\"STATE_SERVER\":19,\"STATE_PLAYER\":8,\"MAGIC_EFFECT\":14,\"DISTANCE_EFFECT\":24,\"PLAYER_LOGIN\":17,\"PLAYER_LOGOUT\":18,\"OUTFIT\":20,\"ITEM_INFORMATION\":21,\"ITEM_TEXT\":26,\"ITEM_TRANSFORM\":23,\"TRADE_OFFER\":28,\"WORLD_TIME\":29,\"COMBAT_LOCK\":30,\"SERVER_ERROR\":31,\"EMOTE\":33,\"TOGGLE_CONDITION\":34,\"TARGET\":35,\"SPELL_ADD\":36,\"SPELL_CAST\":32,\"SPELL_REMOVE\":38,\"CREATURE_PROPERTY\":37,\"REMOVE_FRIEND\":40,\"PLAYER_STATISTICS\":49,\"CHANNEL_JOIN\":50}},\"DIRECTION\":{\"NORTH\":0,\"EAST\":1,\"SOUTH\":2,\"WEST\":3,\"SOUTHEAST\":4,\"SOUTHWEST\":5,\"NORTHEAST\":6,\"NORTHWEST\":7},\"TYPES\":{\"PLAYER\":0,\"MONSTER\":1,\"NPC\":2},\"ROLES\":{\"NONE\":0,\"TUTOR\":1,\"SENIOR_TUTOR\":2,\"GAMEMASTER\":3,\"GOD\":4},\"FLUID\":{\"NONE\":0,\"WATER\":1,\"BLOOD\":2,\"BEER\":3,\"SLIME\":4,\"LEMONADE\":5,\"MILK\":6,\"MANA\":7,\"WATER2\":9,\"HEALTH\":10,\"OIL\":11,\"SLIME2\":12,\"URINE\":13,\"COCONUTMILK\":14,\"WINE\":15,\"MUD\":19,\"FRUITJUICE\":21,\"LAVA\":26,\"RUM\":27},\"EQUIPMENT\":{\"HELMET\":0,\"ARMOR\":1,\"LEGS\":2,\"BOOTS\":3,\"RIGHT\":4,\"LEFT\":5,\"BACKPACK\":6,\"NECKLACE\":7,\"RING\":8,\"QUIVER\":9},\"VOCATION\":{\"NONE\":0,\"KNIGHT\":1,\"PALADIN\":2,\"SORCERER\":3,\"DRUID\":4,\"ELITE_KNIGHT\":5,\"ROYAL_PALADIN\":6,\"MASTER_SORCERER\":7,\"ELDER_DRUID\":8},\"PROPERTIES\":{\"NAME\":0,\"HEALTH\":1,\"HEALTH_MAX\":2,\"MANA\":3,\"MANA_MAX\":4,\"CAPACITY\":5,\"CAPACITY_MAX\":6,\"ATTACK\":7,\"ATTACK_SPEED\":9,\"DEFENSE\":8,\"SPEED\":10,\"OUTFIT\":11,\"DIRECTION\":12,\"ROLE\":13,\"SEX\":14,\"VOCATION\":15,\"MOUNTS\":16,\"OUTFITS\":17,\"MAGIC\":18,\"FIST\":19,\"CLUB\":20,\"SWORD\":21,\"AXE\":22,\"DISTANCE\":23,\"SHIELDING\":24,\"FISHING\":25,\"EXPERIENCE\":26,\"ENERGY\":27,\"ENERGY_MAX\":28},\"SEX\":{\"MALE\":0,\"FEMALE\":1},\"COLOR\":{\"BLUE\":5,\"LIGHTGREEN\":30,\"LIGHTBLUE\":35,\"MAYABLUE\":95,\"DARKRED\":108,\"LIGHTGREY\":129,\"SKYBLUE\":143,\"PURPLE\":155,\"RED\":180,\"ORANGE\":198,\"YELLOW\":210,\"WHITE\":215},\"CONDITION\":{\"DRUNK\":0,\"POISONED\":1,\"BURNING\":2,\"ELECTRIFIED\":3,\"INVISIBLE\":4,\"PROTECTION_ZONE\":5,\"SUPPRESS_DRUNK\":6,\"LIGHT\":7,\"HEALING\":8,\"REGENERATION\":9,\"MORPH\":10,\"MAGIC_SHIELD\":11,\"MAGIC_FLAME\":12,\"SATED\":13,\"HASTE\":14,\"ARENA\":15},\"BLOODTYPE\":{\"BLOOD\":0,\"POISON\":1,\"NONE\":2},\"LOOKTYPES\":{\"CREATURE\":{\"ORC_WARLORD\":2,\"WAR_WOLF\":3,\"ORC_RIDER\":4,\"ORC\":5,\"ORC_SHAMAN\":6,\"ORC_WARRIOR\":7,\"ORC_BERSERKER\":8,\"NECROMANCER\":9,\"BUTTERFLY\":10,\"BLACK_SHEEP\":13,\"SHEEP\":14,\"TROLL\":15,\"BEAR\":16,\"BONELORD\":17,\"GHOUL\":18,\"SLIME\":19,\"QUARA_PREDATOR\":20,\"RAT\":21,\"CYCLOPS\":22,\"MINOTAUR_MAGE\":23,\"MINOTAUR_ARCHER\":24,\"MINOTAUR\":25,\"ROTWORM\":26,\"WOLF\":27,\"SNAKE\":28,\"MINOTAUR_GUARD\":29,\"SPIDER\":30,\"DEER\":31,\"DOG\":32,\"SKELETON\":33,\"DRAGON\":34,\"POISON_SPIDER\":36,\"DEMON_SKELETON\":37,\"GIANT_SPIDER\":38,\"DRAGON_LORD\":39,\"FIRE_DEVIL\":40,\"LION\":41,\"POLAR BEAR\":42,\"SCORPION\":43,\"WASP\":44,\"BUG\":45,\"GHOST\":48,\"FIRE_ELEMENTAL\":49,\"ORC_SPEARMAN\":50,\"GREEN_DJINN\":51,\"WINTER_WOLF\":52,\"FROST_TROLL\":53,\"WITCH\":54,\"BEHEMOTH\":55,\"CAVE RAT\":56,\"MONK\":57,\"PRIESTESS\":58,\"ORC_LEADER\":59,\"PIG\":60,\"GOBLIN\":61,\"ELF\":62,\"ELF_ARCANIST\":63,\"ELF_SCOUT\":64,\"MUMMY\":65,\"DWARF_GEOMANCER\":66,\"STONE_GOLEM\":67,\"VAMPIRE\":68,\"DWARF\":69,\"DWARF_GUARD\":70,\"DWARF_SOLDIER\":71,\"HERO\":73,\"RABBIT\":74,\"SWAMP_TROLL\":76,\"BANSHEE\":78,\"ANCIENT_SCARAB\":79,\"BLUE DJINN\":80,\"COBRA\":81,\"LARVA\":82,\"SCARAB\":83,\"PHARAOH\":90,\"PHARAOH_PELERYNA\":91,\"MIMIC\":92,\"PIRATE_MARAUDER\":93,\"HYAENA\":94,\"GARGOYLE\":95,\"PIRATE_CUTTHROAT\":96,\"PIRATE_BUCCANEER\":97,\"PIRATE_CORSAIR\":98,\"LICH\":99,\"CRYPT_SHAMBLER\":100,\"BONEBEAST\":101,\"DEATHSLICER\":102,\"EFREET\":103,\"MARID\":104,\"BADGER\":105,\"SKUNK\":106,\"DEMON\":107,\"ELDER_BONELORD\":108,\"GAZER\":109,\"YETI\":110},\"MALE\":{\"CITIZEN\":128,\"HUNTER\":129,\"MAGE\":130,\"KNIGHT\":131,\"NOBLEMAN\":132,\"SUMMONER\":133,\"WARRIOR\":134},\"FEMALE\":{\"CITIZEN\":136,\"HUNTER\":137,\"MAGE\":138,\"KNIGHT\":139,\"NOBLEMAN\":140,\"SUMMONER\":141,\"WARRIOR\":142},\"OTHER\":{\"GAMEMASTER\":75,\"ELF\":144,\"DWARF\":160}},\"EFFECT\":{\"MAGIC\":{\"DRAWBLOOD\":1,\"LOSEENERGY\":2,\"POFF\":3,\"BLOCKHIT\":4,\"EXPLOSIONAREA\":5,\"EXPLOSIONHIT\":6,\"FIREAREA\":7,\"YELLOW_RINGS\":8,\"GREEN_RINGS\":9,\"HITAREA\":10,\"TELEPORT\":11,\"ENERGYHIT\":12,\"MAGIC_BLUE\":13,\"MAGIC_RED\":14,\"MAGIC_GREEN\":15,\"HITBYFIRE\":16,\"HITBYPOISON\":17,\"MORTAREA\":18,\"SOUND_GREEN\":19,\"SOUND_RED\":20,\"POISONAREA\":21,\"SOUND_YELLOW\":22,\"SOUND_PURPLE\":23,\"SOUND_BLUE\":24,\"SOUND_WHITE\":25},\"PROJECTILE\":{\"SPEAR\":1,\"BOLT\":2,\"ARROW\":3,\"FIRE\":4,\"ENERGY\":5,\"POISONARROW\":6,\"BURSTARROW\":7,\"THROWINGSTAR\":8,\"THROWINGKNIFE\":9,\"SMALLSTONE\":10,\"DEATH\":11,\"LARGEROCK\":12,\"SNOWBALL\":13,\"POWERBOLT\":14,\"POISON\":15}}}');\n\n//# sourceURL=webpack:///./client/src/config/constants.json?");

/***/ }),

/***/ "./client/src/container.ts":
/*!*********************************!*\
  !*** ./client/src/container.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Container)\n/* harmony export */ });\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item */ \"./client/src/item.ts\");\n/* harmony import */ var _slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./slot */ \"./client/src/slot.ts\");\n/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./window */ \"./client/src/window.ts\");\n\n\n\nclass Container extends _item__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(properties) {\n        /*\n         * Class Container\n         * Wrapper for a container on the DOM\n         */\n        super(properties.id, 0);\n        // The number of slots in the container and its identifier\n        this.__containerId = properties.cid;\n        this.size = properties.items.length;\n        // Create the slots for items to be added\n        this.slots = [];\n    }\n    createDOM(title, items) {\n        /*\n         * Function Container.createDOM\n         * Creates the DOM for the container\n         */\n        let element = this.createElement(this.__containerId);\n        this.window = new _window__WEBPACK_IMPORTED_MODULE_2__[\"default\"](element);\n        this.window.addTo(document.getElementsByClassName(\"column\")[0]);\n        // Attach a listener to the window close event to inform the server of container close\n        this.window.on(\"close\", this.close.bind(this));\n        this.window.state.title = title.charAt(0).toUpperCase() + title.slice(1);\n        // Adds the slots to the existing window body\n        this.createBodyContent(this.size);\n        // Add the items to the slots\n        this.addItems(items);\n    }\n    createElement(index) {\n        /*\n         * Function Container.createElement\n         * Creates a copy of the container prototype\n         */\n        let element = document.getElementById(\"container-prototype\").cloneNode(true);\n        element.style.display = \"flex\";\n        element.setAttribute(\"containerIndex\", index.toString());\n        element.style.minHeight = \"90px\";\n        return element;\n    }\n    close() {\n        /*\n         * Function Container.close\n         * Callback fired when the container is closed\n         */\n        window.gameClient.player.closeContainer(this);\n    }\n    peekItem(index) {\n        return this.getSlotItem(index);\n    }\n    getSlot(index) {\n        return this.slots[index];\n    }\n    getSlotItem(index) {\n        /*\n         * Function Container.getSlotItem\n         * Returns the item in the slot at a given index\n         */\n        if (index < 0 || index >= this.slots.length) {\n            return null;\n        }\n        return this.getSlot(index).item;\n    }\n    createBodyContent(size) {\n        /*\n         * Function createBodyContent\n         * Creates the model for the body that contains slots\n         */\n        let body = this.window.getElement(\".body\");\n        // Set a limit to the container height based on the number of slots\n        body.style.maxHeight = Math.ceil(size / 4) * 34 + \"px\";\n        body.style.minHeight = \"40px\";\n        body.style.height = \"100%\";\n        for (let i = 0; i < size; i++) {\n            let slot = new _slot__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n            slot.createDOM(i);\n            if (this.__containerId === 2) {\n                slot.element.style.backgroundImage = \"url(png/icon-key.png)\";\n            }\n            this.slots.push(slot);\n        }\n        this.slots.forEach((slot) => {\n            body.appendChild(slot.element);\n        });\n    }\n    addItems(items) {\n        /*\n         * Function Container.addItems\n         * Adds an array of items to the container\n         */\n        items.forEach(this.addItem.bind(this));\n    }\n    addItem(item, slot) {\n        /*\n         * Function Container.addItem\n         * Adds a single item to the container at a particular slot\n         */\n        if (!item)\n            return;\n        item.__parent = this;\n        this.__setItem(slot, item);\n        this.__render();\n    }\n    __setItem(slot, item) {\n        /*\n         * Function Container.__setItem\n         * Sets an item in the appropriate slot\n         */\n        this.slots[slot].setItem(item);\n    }\n    clearSlot(slot) {\n        /*\n         * Function Container.clearSlot\n         * Clears a particular slot in the container\n         */\n        this.__setItem(slot, null);\n        this.slots[slot].element.className = \"slot\";\n        this.getSlot(slot).render();\n    }\n    removeItem(slot, count) {\n        /*\n         * Function Container.removeItem\n         * Removes an item (optional count) from the given slot in the container\n         */\n        if (!this.slots[slot].item.isStackable() || count === 0) {\n            return this.clearSlot(slot);\n        }\n        this.slots[slot].item.count -= count;\n        if (this.slots[slot].item.count === 0) {\n            return this.clearSlot(slot);\n        }\n        this.getSlot(slot).render();\n    }\n    __renderAnimated() {\n        this.slots.forEach((slot) => {\n            slot.__renderAnimated();\n        });\n    }\n    __render() {\n        /*\n         * Function Container.__render\n         * Draws the container\n         */\n        this.slots.forEach((slot) => {\n            slot.render();\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/container.ts?");

/***/ }),

/***/ "./client/src/creature.ts":
/*!********************************!*\
  !*** ./client/src/creature.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Creature)\n/* harmony export */ });\n/* harmony import */ var _outfit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./outfit */ \"./client/src/outfit.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _condition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./condition */ \"./client/src/condition.ts\");\n/* harmony import */ var _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sprite-buffer */ \"./client/src/sprite-buffer.ts\");\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n/* harmony import */ var _box_animation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./box-animation */ \"./client/src/box-animation.ts\");\n/* harmony import */ var _casting_manager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./casting-manager */ \"./client/src/casting-manager.ts\");\n/* harmony import */ var _screen_element_character__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./screen-element-character */ \"./client/src/screen-element-character.ts\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _player_vitals_vitals__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./player/vitals/vitals */ \"./client/src/player/vitals/vitals.ts\");\n\n\n\n\n\n\n\n\n\n\n\nclass Creature {\n    // gameClient is injected to replace global references.\n    constructor(data) {\n        this.textBuffer = [];\n        this.vitals = new _player_vitals_vitals__WEBPACK_IMPORTED_MODULE_10__.Vitals(data.vitals);\n        this.id = data.id;\n        this.type = data.type != null ? data.type : 0;\n        this.conditions = new _condition__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this, data.conditions);\n        this.__lookDirection = data.vitals.direction;\n        this.__previousPosition = data.vitals.position.copy();\n        this.outfit = new _outfit__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data.outfit);\n        this.castingManager = new _casting_manager__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n        // Initialize spriteBuffer using outfit's sprite buffer size.\n        this.spriteBuffer = new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.outfit.getSpriteBufferSize(this.outfit.getDataObject()));\n        if (this.outfit.getDataObjectMount()) {\n            this.spriteBufferMount = new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.outfit.getSpriteBufferSize(this.outfit.getDataObjectMount()));\n        }\n        this.__movementEvent = null;\n        this.__lookDirectionBuffer = null;\n        this.__chunk = window.gameClient.world.getChunkFromWorldPosition(this.vitals.position);\n        this.__teleported = false;\n        // Create the character element (method implementation assumed).\n        this.characterElement = new _screen_element_character__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this);\n        window.gameClient.interface.screenElementManager.add(this.characterElement.element);\n        this.characterElement.setHealthFraction(this.getHealthFraction());\n        this.__activeTextElement = null;\n        this.__target = null;\n        this.__animations = new Set();\n    }\n    removeCondition(cid) {\n        this.conditions.remove(cid);\n    }\n    addCondition(cid) {\n        this.conditions.add(cid);\n    }\n    hasCondition(cid) {\n        return this.conditions.has(cid);\n    }\n    blockHit() {\n        return window.gameClient.renderer.addPositionAnimation({ position: this.vitals.position, type: 3 });\n    }\n    getMaxFloor() {\n        return window.gameClient.world\n            .getChunkFromWorldPosition(this.getPosition())\n            .getFirstFloorFromBottom(this.getPosition());\n    }\n    getCharacterFrames() {\n        const characterObject = this.outfit.getDataObject();\n        const mountObject = this.outfit.getDataObjectMount();\n        const headObject = this.outfit.equipment.head !== 0 ? this.outfit.getHeadDataObject() : null;\n        const bodyObject = this.outfit.equipment.body !== 0 ? this.outfit.getBodyDataObject() : null;\n        const legsObject = this.outfit.equipment.legs !== 0 ? this.outfit.getLegsDataObject() : null;\n        const feetObject = this.outfit.equipment.feet !== 0 ? this.outfit.getFeetDataObject() : null;\n        let hairObject = null;\n        if (this.outfit.equipment.head === 0) {\n            hairObject = this.outfit.getHairDataObject();\n        }\n        const leftHandObject = this.outfit.equipment.lefthand !== 0 ? this.outfit.getLeftHandDataObject() : null;\n        const rightHandObject = this.outfit.equipment.righthand !== 0 ? this.outfit.getRightHandDataObject() : null;\n        if (characterObject === null) {\n            return null;\n        }\n        let characterGroup, mountGroup, characterFrame, mountFrame;\n        let headGroup, bodyGroup, legsGroup, feetGroup, hairGroup;\n        let leftHandGroup, rightHandGroup, leftHandFrame, rightHandFrame;\n        let headFrame, bodyFrame, legsFrame, feetFrame, hairFrame;\n        let isMoving;\n        if (!this.isMoving()) {\n            isMoving = false;\n            characterGroup = characterObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE);\n            characterFrame = (characterObject.frameGroups.length === 1 && !characterObject.isAlwaysAnimated())\n                ? 0\n                : characterGroup.getAlwaysAnimatedFrame();\n            headGroup = headObject ? headObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE) : null;\n            bodyGroup = bodyObject ? bodyObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE) : null;\n            legsGroup = legsObject ? legsObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE) : null;\n            feetGroup = feetObject ? feetObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE) : null;\n            hairGroup = hairObject ? hairObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE) : null;\n            headFrame = headGroup ? headGroup.getAlwaysAnimatedFrame() : 0;\n            bodyFrame = bodyGroup ? bodyGroup.getAlwaysAnimatedFrame() : 0;\n            legsFrame = legsGroup ? legsGroup.getAlwaysAnimatedFrame() : 0;\n            feetFrame = feetGroup ? feetGroup.getAlwaysAnimatedFrame() : 0;\n            hairFrame = hairGroup ? hairGroup.getAlwaysAnimatedFrame() : 0;\n            leftHandGroup = leftHandObject ? leftHandObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE) : null;\n            rightHandGroup = rightHandObject ? rightHandObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE) : null;\n            leftHandFrame = leftHandGroup ? leftHandGroup.getAlwaysAnimatedFrame() : 0;\n            rightHandFrame = rightHandGroup ? rightHandGroup.getAlwaysAnimatedFrame() : 0;\n            if (window.gameClient.clientVersion === 1098) {\n                mountGroup = mountObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_IDLE);\n                mountFrame = mountGroup.getAlwaysAnimatedFrame();\n            }\n            else {\n                mountGroup = 0;\n                mountFrame = 0;\n            }\n        }\n        else {\n            isMoving = true;\n            characterGroup = characterObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING);\n            characterFrame = this.__getWalkingFrame(characterGroup);\n            headGroup = headObject ? headObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING) : null;\n            bodyGroup = bodyObject ? bodyObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING) : null;\n            legsGroup = legsObject ? legsObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING) : null;\n            feetGroup = feetObject ? feetObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING) : null;\n            hairGroup = hairObject ? hairObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING) : null;\n            headFrame = headGroup ? this.__getWalkingFrame(headGroup) : 0;\n            bodyFrame = bodyGroup ? this.__getWalkingFrame(bodyGroup) : 0;\n            legsFrame = legsGroup ? this.__getWalkingFrame(legsGroup) : 0;\n            feetFrame = feetGroup ? this.__getWalkingFrame(feetGroup) : 0;\n            hairFrame = hairGroup ? this.__getWalkingFrame(hairGroup) : 0;\n            leftHandGroup = leftHandObject ? leftHandObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING) : null;\n            rightHandGroup = rightHandObject ? rightHandObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING) : null;\n            leftHandFrame = leftHandGroup ? this.__getWalkingFrame(leftHandGroup) : 0;\n            rightHandFrame = rightHandGroup ? this.__getWalkingFrame(rightHandGroup) : 0;\n            if (window.gameClient.clientVersion === 1098) {\n                mountGroup = mountObject.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_4__[\"default\"].GROUP_MOVING);\n                mountFrame = this.__getWalkingFrame(mountGroup);\n            }\n            else {\n                mountGroup = 0;\n                mountFrame = 0;\n            }\n        }\n        return {\n            characterGroup,\n            mountGroup,\n            characterFrame,\n            mountFrame,\n            headGroup,\n            bodyGroup,\n            legsGroup,\n            feetGroup,\n            hairGroup,\n            leftHandGroup,\n            rightHandGroup,\n            headFrame,\n            bodyFrame,\n            legsFrame,\n            feetFrame,\n            hairFrame,\n            leftHandFrame,\n            rightHandFrame,\n            isMoving,\n        };\n    }\n    getPosition() {\n        return this.vitals.position;\n    }\n    getName() {\n        return this.vitals.name;\n    }\n    hasTarget() {\n        return this.__target !== null;\n    }\n    isMounted() {\n        return this.outfit.mounted;\n    }\n    serverSetOutfit(outfit) {\n        this.outfit = outfit;\n        // Clear the outfit sprite buffer to make room for the new sprite.\n        this.spriteBuffer = new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.outfit.getSpriteBufferSize(this.outfit.getDataObject()));\n        // If the creature has a mount, create a sprite buffer for it as well.\n        if (this.outfit.getDataObjectMount()) {\n            this.spriteBufferMount = new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.outfit.getSpriteBufferSize(this.outfit.getDataObjectMount()));\n        }\n    }\n    setPosition(position) {\n        var _a;\n        // Remove from the previous tile.\n        const fromTile = window.gameClient.world.getTileFromWorldPosition(this.getPosition());\n        if (fromTile !== null) {\n            fromTile.removeCreature(this);\n        }\n        // Update the position and set the new chunk.\n        this.vitals.position = position;\n        this.__chunk = window.gameClient.world.getChunkFromWorldPosition(position);\n        // Add the creature to the new tile.\n        (_a = window.gameClient.world.getTileFromWorldPosition(position)) === null || _a === void 0 ? void 0 : _a.addCreature(this);\n    }\n    getHealthPercentage() {\n        const fraction = this.getHealthFraction();\n        return (100 * this.clamp(fraction, 0, 1)).toString();\n    }\n    getHealthFraction() {\n        return this.clamp(this.vitals.state.health / this.vitals.state.maxHealth, 0, 1);\n    }\n    clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n    say(packet) {\n        // Reset the text buffer.\n        this.textBuffer = [];\n        // If there is an active text element, complete it.\n        if (this.__activeTextElement !== null) {\n            this.__activeTextElement.complete();\n        }\n        // Split message by new lines.\n        this.textBuffer = packet.message.split(\"\\n\");\n        // Set and return the new active text element.\n        return this.__setActiveTextElement(this.textBuffer.shift(), packet.color);\n    }\n    // Method: addBoxAnimation\n    addBoxAnimation(color) {\n        this.__animations.add(new _box_animation__WEBPACK_IMPORTED_MODULE_6__[\"default\"](color));\n    }\n    // Method: deleteAnimation\n    deleteAnimation(animation) {\n        this.__animations.delete(animation);\n    }\n    // Method: addAnimation\n    addAnimation(id) {\n        const aid = window.gameClient.dataObjects.getAnimationId(id);\n        if (aid === null) {\n            return;\n        }\n        // TODO: Implement Animation class.\n        //this.__animations.add(new Animation(aid));\n    }\n    // Method: increaseHealth\n    increaseHealth(amount) {\n        // Assuming state.health and maxHealth are numbers and a .clamp method exists on number.\n        this.vitals.state.health = (this.vitals.state.health + amount).clamp(0, this.vitals.state.maxHealth);\n    }\n    // Method: getTarget\n    getTarget() {\n        return this.__target;\n    }\n    // Method: remove (removes creature's DOM element)\n    remove() {\n        this.characterElement.remove();\n    }\n    // Method: getMoveOffset\n    getMoveOffset() {\n        // If the creature is not moving or has teleported, return a null offset.\n        if (!this.isMoving() || this.__teleported) {\n            return _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NULL;\n        }\n        const fraction = this.getMovingFraction();\n        switch (this.getLookDirection()) {\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.DIRECTION.WEST:\n                return new _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"](-fraction, 0, 0);\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.DIRECTION.NORTH:\n                return new _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, -fraction, 0);\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.DIRECTION.EAST:\n                return new _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"](fraction, 0, 0);\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.DIRECTION.SOUTH:\n                return new _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, fraction, 0);\n            // TODO: Implement diagonal movement.\n            // case CONST.DIRECTION.NORTH_WEST:\n            //   return new Position(-fraction, -fraction, 0);\n            // case CONST.DIRECTION.NORTH_EAST:\n            //   return new Position(fraction, -fraction, 0);\n            // case CONST.DIRECTION.SOUTH_EAST:\n            //   return new Position(fraction, fraction, 0);\n            // case CONST.DIRECTION.SOUTH_WEST:\n            //   return new Position(-fraction, fraction, 0);\n            default:\n                return new _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0, 0);\n        }\n    }\n    moveTo(position, speed) {\n        if (!window.gameClient.world.isValidWorldPosition(position)) {\n            return false;\n        }\n        this.__chunk = window.gameClient.world.getChunkFromWorldPosition(position);\n        if (this.__movementEvent) {\n            this.__movementEvent.cancel();\n        }\n        const modSlowness = (this.getPosition().isDiagonal(position) ? 2 : 1) * speed;\n        this.__movementEvent = window.gameClient.eventQueue.addEvent(this.unlockMovement.bind(this), modSlowness);\n        const angle = this.getPosition().getLookDirection(position);\n        if (angle !== null) {\n            this.__lookDirection = angle;\n        }\n        this.__previousPosition = this.getPosition();\n        this.vitals.position = position;\n        if (window.gameClient.player.canSeeSmall(this) && position.z === window.gameClient.player.vitals.position.z) {\n            window.gameClient.interface.soundManager.playWalkBit(position);\n        }\n        if (window.gameClient.player && this.id === window.gameClient.player.id) {\n            // return window.gameClient.renderer.minimap.cache();\n        }\n    }\n    getLookDirection() {\n        return this.__lookDirection;\n    }\n    setTurnBuffer(direction) {\n        if (this.isMoving()) {\n            this.__lookDirectionBuffer = direction;\n            return;\n        }\n        this.__setLookDirection(direction);\n    }\n    unlockMovement() {\n        if (this.__lookDirectionBuffer !== null) {\n            this.__lookDirection = this.__lookDirectionBuffer;\n            this.__lookDirectionBuffer = null;\n        }\n        this.__movementEvent = null;\n        this.__teleported = false;\n        if (window.gameClient.player &&\n            this.id === window.gameClient.player.id &&\n            window.gameClient.world.pathfinder.__pathfindCache.length > 0) {\n            return window.gameClient.world.pathfinder.handlePathfind();\n        }\n        // TODO: Implement movement buffer handling.\n        // if (\n        //   window.gameClient.player &&\n        //   this.id === window.gameClient.player.id &&\n        //   this.__movementBuffer !== null\n        // ) {\n        //   window.gameClient.keyboard.handleCharacterMovement(this.__movementBuffer);\n        //   this.__movementBuffer = null;\n        // }\n    }\n    getChunk() {\n        return this.__chunk;\n    }\n    isMoving() {\n        return this.__movementEvent !== null;\n    }\n    getMovingFraction() {\n        // If not moving or teleported, fraction is 0.\n        if (!this.isMoving() || this.__teleported) {\n            return 0;\n        }\n        return this.__movementEvent.remainingFraction();\n    }\n    canSee(thing) {\n        const projectedSelf = this.getPosition().projected();\n        const projectedThing = thing.getPosition().projected();\n        const dx = Math.abs(projectedSelf.x - projectedThing.x);\n        const dy = Math.abs(projectedSelf.y - projectedThing.y);\n        return (dx < (_interface__WEBPACK_IMPORTED_MODULE_9__[\"default\"].TILE_WIDTH + 2) / 2) && (dy < (_interface__WEBPACK_IMPORTED_MODULE_9__[\"default\"].TILE_HEIGHT + 2) / 2);\n    }\n    canSeeSmall(thing) {\n        const projectedSelf = this.getPosition().projected();\n        const projectedThing = thing.getPosition().projected();\n        const dx = Math.abs(projectedSelf.x - projectedThing.x);\n        const dy = Math.abs(projectedSelf.y - projectedThing.y);\n        return (dx < 8) && (dy < 6);\n    }\n    __setLookDirection(direction) {\n        this.__lookDirection = direction;\n    }\n    __setActiveTextElement(message, color) {\n        // Sets a new active text element for the creature.\n        this.__activeTextElement = window.gameClient.interface.screenElementManager.createTextElement(this, message, color);\n        return this.__activeTextElement;\n    }\n    __getWalkingFrame(frameGroup) {\n        // Calculate walking frame based on remaining movement fraction.\n        return Math.round((1 - this.getMovingFraction()) * (frameGroup.animationLength - 1));\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/creature.ts?");

/***/ }),

/***/ "./client/src/database.ts":
/*!********************************!*\
  !*** ./client/src/database.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Database)\n/* harmony export */ });\n/* harmony import */ var _sprite_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sprite-buffer */ \"./client/src/sprite-buffer.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass Database {\n    constructor() {\n        this.__database = null;\n        this.__minimapChunkSize = 128;\n        this.__loadedMinimapChunks = {};\n        this.init();\n    }\n    init() {\n        const VERSION = 1098;\n        const openRequest = indexedDB.open(\"game\", VERSION);\n        openRequest.onerror = (event) => this.__handleOpenError(event);\n        openRequest.onsuccess = (event) => this.__handleOpenSuccess(event);\n        openRequest.onupgradeneeded = (event) => this.__handleUpgrade(event);\n    }\n    clear() {\n        if (!confirm(\"Are you sure you want to reset the client?\")) {\n            return;\n        }\n        localStorage.clear();\n        indexedDB.deleteDatabase(\"game\");\n        window.location.reload();\n    }\n    transaction(store, mode) {\n        if (!this.__database) {\n            throw new Error(\"Database not initialized.\");\n        }\n        return this.__database.transaction(store, mode).objectStore(store);\n    }\n    saveChunks() {\n        Object.keys(this.__loadedMinimapChunks).forEach((id) => {\n            this.__saveChunk(id);\n        });\n    }\n    preloadCallback(positions, callback) {\n        positions = positions.filter(this.isValidMinimapChunk.bind(this));\n        let count = 0;\n        const finishCallback = () => {\n            if (++count === positions.length) {\n                return callback(this.getLoadedMinimapChunks());\n            }\n        };\n        positions.forEach((position) => {\n            this.loadChunk(this.getChunkIdentifier(position), finishCallback);\n        });\n    }\n    isValidMinimapChunk(position) {\n        return position.x >= 0 && position.y >= 0 && position.z >= 0;\n    }\n    getChunkIdentifier(position) {\n        const xChunk = Math.floor(position.x / this.__minimapChunkSize);\n        const yChunk = Math.floor(position.y / this.__minimapChunkSize);\n        return `${xChunk}.${yChunk}.${position.z}`;\n    }\n    getLoadedMinimapChunks() {\n        return this.__loadedMinimapChunks;\n    }\n    loadChunk(id, callback) {\n        if (this.__loadedMinimapChunks.hasOwnProperty(id)) {\n            return callback();\n        }\n        const request = this.transaction(\"minimap\", \"readonly\").get(id);\n        request.onsuccess = (event) => {\n            const target = event.target;\n            if (target.result === undefined) {\n                this.__loadedMinimapChunks[id] = this.__createView(this.__createChunk());\n            }\n            else {\n                this.__loadedMinimapChunks[id] = this.__createView(target.result.data);\n            }\n            callback();\n        };\n    }\n    storeFile(filename, data) {\n        console.log(\"filename\", filename);\n        localStorage.setItem(filename, \"true\");\n        const fileStore = this.transaction(\"files\", \"readwrite\");\n        const request = fileStore.put({\n            filename: filename,\n            data: data,\n        });\n        request.onsuccess = (event) => {\n            console.debug(\"Cached file \" + filename + \" to indexDB.\");\n        };\n    }\n    loadConstants() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield fetch(`/data/${window.gameClient.SERVER_VERSION}/constants.json`);\n            return yield response.json();\n        });\n    }\n    loadGameAssets() {\n        this.loadConstants().then((constants) => {\n            window.CONST = constants;\n            if (!localStorage.getItem(\"Tibia.spr\") || !localStorage.getItem(\"Tibia.dat\")) {\n                return window.gameClient.networkManager.loadGameFilesServer();\n            }\n            this.__loadGameAssets();\n        });\n    }\n    __handleUpgrade(event) {\n        console.debug(\"Initializing IndexedDB with new version.\");\n        // Set the database; event.target is an IDBOpenDBRequest.\n        this.__database = event.target.result;\n        const objectStore = this.__database.createObjectStore(\"minimap\", { keyPath: \"chunk\" });\n        objectStore.createIndex(\"id\", \"chunk\");\n        const fileStore = this.__database.createObjectStore(\"files\", { keyPath: \"filename\" });\n        fileStore.createIndex(\"id\", \"filename\");\n        // Instead of fileStore.onsuccess (which doesn't exist), call loadGameAssets immediately.\n        //this.loadGameAssets();\n    }\n    __handleOpenError(event) {\n        const target = event.target;\n        console.error(\"Error\", target.error);\n    }\n    __handleOpenSuccess(event) {\n        console.debug(\"Successfully initialized IndexedDB.\");\n        this.__database = event.target.result;\n        this.loadGameAssets();\n    }\n    __createView(chunk) {\n        return {\n            imageData: chunk,\n            view: new Uint32Array(chunk.data.buffer),\n        };\n    }\n    __createChunk() {\n        const size = 4 * this.__minimapChunkSize * this.__minimapChunkSize;\n        return new ImageData(new Uint8ClampedArray(size), this.__minimapChunkSize, this.__minimapChunkSize);\n    }\n    __loadGameAssets() {\n        console.log('LOAD FROM GAME');\n        window.gameClient.setErrorModal(\"Welcome back! Loading game assets from local storage.\");\n        this.transaction(\"files\", \"readonly\").getAll().onsuccess = (event) => {\n            const target = event.target;\n            if (target.result.length === 0) {\n                return;\n            }\n            target.result.forEach((file) => {\n                switch (file.filename) {\n                    case \"Tibia.dat\":\n                        return window.gameClient.dataObjects.__load(file.filename, file.data);\n                    case \"Tibia.spr\":\n                        return _sprite_buffer__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(file.filename, file.data);\n                    default:\n                        return;\n                }\n            });\n        };\n    }\n    dropWorldMapChunks(position) {\n        const id = this.getChunkIdentifier(position);\n        const [rx, ry, rz] = id.split(\".\").map(Number);\n        Object.keys(this.__loadedMinimapChunks).forEach((chunkId) => {\n            const [x, y, z] = chunkId.split(\".\").map(Number);\n            if (Math.abs(rx - x) > 2 || Math.abs(ry - y) > 2 || rz !== z) {\n                delete this.__loadedMinimapChunks[chunkId];\n            }\n        });\n    }\n    checkChunks() {\n        Object.keys(this.__loadedMinimapChunks).forEach((id) => {\n            const [x, y, z] = id.split(\".\").map(Number);\n            if (window.gameClient.player.getPosition().z !== z) {\n                this.__saveChunk(id);\n            }\n        });\n    }\n    __saveChunk(id) {\n        const minimapStore = this.transaction(\"minimap\", \"readwrite\");\n        const request = minimapStore.put({\n            chunk: id,\n            data: this.__loadedMinimapChunks[id].imageData,\n        });\n        request.onsuccess = () => {\n            delete this.__loadedMinimapChunks[id];\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/database.ts?");

/***/ }),

/***/ "./client/src/dataobject.ts":
/*!**********************************!*\
  !*** ./client/src/dataobject.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataObject: () => (/* binding */ DataObject)\n/* harmony export */ });\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n\n\nclass DataObject {\n    constructor({ flags, properties }) {\n        /*\n         * Class DataObject\n         * Container for a generic data object class: these definitions are loaded from Tibia.dat\n         *\n         * API:\n         *\n         * DataObject.isAlwaysAnimated() - Returns true if the data object is always animated\n         * DataObject.setGroupCount(count) - Sets the group count of the data object\n         * DataObject.getFrameGroup(group) - Returns the frame group for a particular state\n         *\n         */\n        this.flags = flags;\n        this.properties = properties;\n        this.frameGroups = [];\n        this.groupCount = 1;\n    }\n    isAlwaysAnimated() {\n        /*\n         * Function DataObject.isAlwaysAnimated\n         * Returns true when the object is supposed to be always animated (not only when moving like flying wasps)\n         */\n        return this.flags.get(\"DatFlagAnimateAlways\");\n    }\n    setGroupCount(count) {\n        /*\n         * Function DataObject.setGroupCount\n         * Sets the group count of the data object\n         */\n        this.groupCount = count;\n    }\n    getFrameGroup(group) {\n        /*\n         * Function DataObject.getFrameGroup\n         * Returns the requested frame group\n         */\n        if (this.groupCount === 1) {\n            return this.frameGroups[_frame_group__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE];\n        }\n        return this.frameGroups[Math.max(0, Math.min(group, this.groupCount - 1))];\n    }\n}\n\n\n\n//# sourceURL=webpack:///./client/src/dataobject.ts?");

/***/ }),

/***/ "./client/src/debugger.ts":
/*!********************************!*\
  !*** ./client/src/debugger.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Debugger)\n/* harmony export */ });\nclass Debugger {\n    constructor() {\n        // How often the statistics are updated (in frames).\n        this.UPDATE_INTERVAL = 60;\n        // Debugger state.\n        this.__showStatistics = false;\n        this.__nFrames = 0;\n        this.__averageFPS = 0;\n        this.__averageEvictions = 0;\n        this.__averageDrawCalls = 0;\n        this.__averageDrawTime = 0;\n        this.__nSeconds = performance.now();\n        // Information on the GPU.\n        this.__GPU = this.__getGPUInformation();\n    }\n    isActive() {\n        // Returns true if the debugger is active.\n        return this.__showStatistics;\n    }\n    renderStatistics() {\n        // Render statistics to the top of the screen.\n        if (!this.isActive()) {\n            return;\n        }\n        if (!this.__shouldUpdate()) {\n            return;\n        }\n        this.__renderStatistics();\n    }\n    toggleStatistics() {\n        // Toggles visibility of debugging statistics on/off.\n        this.__showStatistics = !this.__showStatistics;\n        const debugEl = document.getElementById(\"debug-statistics\");\n        if (!this.isActive()) {\n            if (debugEl) {\n                debugEl.innerHTML = \"\";\n            }\n        }\n        else {\n            this.__renderStatistics();\n        }\n    }\n    __getGPUInformation() {\n        // Returns the GPU information if available.\n        const canvas = document.createElement(\"canvas\");\n        const gl = canvas.getContext(\"webgl\");\n        if (gl) {\n            return gl.getParameter(gl.RENDERER);\n        }\n        return \"Unknown GPU\";\n    }\n    __updateAverageStatistics() {\n        // Time elapsed since the previous update.\n        const elapsed = performance.now() - this.__nSeconds;\n        // Calculate average statistics over the interval.\n        this.__averageEvictions = parseFloat(((1E3 * window.gameClient.spriteBuffer.nEvictions) / elapsed).toFixed(0));\n        this.__averageFPS = parseFloat(((1E3 * this.UPDATE_INTERVAL) / elapsed).toFixed(0));\n        this.__averageDrawCalls = parseFloat((window.gameClient.renderer.drawCalls / this.UPDATE_INTERVAL).toFixed(0));\n        this.__averageDrawTime = parseFloat(((1E3 * window.gameClient.renderer.totalDrawTime) / this.UPDATE_INTERVAL).toFixed(0));\n        this.__nSeconds = performance.now();\n        window.gameClient.networkManager.getLatency();\n        // Reset counters.\n        window.gameClient.renderer.drawCalls = 0;\n        window.gameClient.spriteBuffer.nEvictions = 0;\n        window.gameClient.renderer.totalDrawTime = 0;\n    }\n    __shouldUpdate() {\n        // Returns true if the debugger should update on this frame.\n        return this.__nFrames % this.UPDATE_INTERVAL === 0;\n    }\n    __getMemoryUsage() {\n        try {\n            const mem = performance.memory;\n            if (mem && mem.totalJSHeapSize) {\n                return (1E-6 * mem.totalJSHeapSize).toFixed(0) + \"MB\";\n            }\n            else {\n                return \"Metric Not Available\";\n            }\n        }\n        catch (exception) {\n            return \"Metric Not Available\";\n        }\n    }\n    __renderStatistics() {\n        // Update the average statistics.\n        this.__updateAverageStatistics();\n        // Build the debug information string.\n        const debugInfo = [\n            `Server Version: ${window.gameClient.serverVersion}`,\n            `Client Version: ${window.gameClient.clientVersion}`,\n            `Server Tick Interval: ${window.gameClient.getTickInterval()}ms`,\n            `Current Frame: ${window.gameClient.eventQueue.getFrame()}`,\n            `Frame Rate: ${this.__averageFPS}fps`,\n            `Draw Calls: ${this.__averageDrawCalls}`,\n            `Draw Time: ${this.__averageDrawTime}µs`,\n            `Draw Tiles: ${window.gameClient.renderer.numberOfTiles}`,\n            `Active Entities: ${Object.keys(window.gameClient.world.activeCreatures).length}`,\n            `Latency: ${Math.round(window.gameClient.networkManager.state.latency)}ms`,\n            `Packets Received: ${window.gameClient.networkManager.state.nPackets}`,\n            `Packets Sent: ${window.gameClient.networkManager.nPacketsSent}`,\n            `Bytes Recieved: ${Math.round(1E-3 * window.gameClient.networkManager.state.bytesRecv)}KB`,\n            `Bytes Sent: ${Math.round(1E-3 * window.gameClient.networkManager.state.bytesSent)}KB`,\n            `Sprite Buffer Size: ${Math.round(1E-6 * window.gameClient.spriteBuffer.size * window.gameClient.spriteBuffer.size * 4 * 32 * 32)}MB`,\n            `Sprite Buffer Evictions: ${this.__averageEvictions}`,\n            `Memory Usage: ${this.__getMemoryUsage()}`,\n            `GPU: ${this.__GPU}`,\n            `Identifier: ${window.gameClient.player.id}`,\n            `Current Position: ${window.gameClient.player.getPosition().toString()}`,\n            `Current Chunk: ${window.gameClient.player.getChunk().id}`,\n            `Opened Containers: ${window.gameClient.player.__openedContainers.size}`,\n            `Outfit: ${window.gameClient.player.outfit.toString()}`\n        ].join(\"<br>\");\n        const debugEl = document.getElementById(\"debug-statistics\");\n        if (debugEl) {\n            debugEl.innerHTML = debugInfo;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/debugger.ts?");

/***/ }),

/***/ "./client/src/distance-animation.ts":
/*!******************************************!*\
  !*** ./client/src/distance-animation.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DistanceAnimation)\n/* harmony export */ });\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./animation */ \"./client/src/animation.ts\");\n\n\nclass DistanceAnimation extends _animation__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id, fromPosition, toPosition) {\n        super(id);\n        this.fromPosition = fromPosition;\n        this.toPosition = toPosition;\n    }\n    __generateDurations() {\n        return [2 * _animation__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_FRAME_LENGTH_MS];\n    }\n    getFraction() {\n        return Math.min(1, (performance.now() - this.__created) /\n            (2 * _animation__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_FRAME_LENGTH_MS));\n    }\n    getPosition() {\n        return this.fromPosition;\n    }\n    getPattern() {\n        const x = this.fromPosition.x - this.toPosition.x;\n        const y = this.fromPosition.y - this.toPosition.y;\n        if (x === 0 && y === 0) {\n            return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](4, 0, 0);\n        }\n        const angle = Math.floor((8 * (1.125 * Math.PI + Math.atan2(y, x))) / (2 * Math.PI));\n        switch (angle % 8) {\n            case 0:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](5, 0, 0);\n            case 1:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](8, 0, 0);\n            case 2:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](7, 0, 0);\n            case 3:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](6, 0, 0);\n            case 4:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](3, 0, 0);\n            case 5:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0, 0);\n            case 6:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](1, 0, 0);\n            case 7:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](2, 0, 0);\n            default:\n                return new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](4, 0, 0);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/distance-animation.ts?");

/***/ }),

/***/ "./client/src/event-queue.ts":
/*!***********************************!*\
  !*** ./client/src/event-queue.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EventQueue)\n/* harmony export */ });\n/* harmony import */ var _binary_heap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binary-heap */ \"./client/src/binary-heap.ts\");\n/* harmony import */ var _heap_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./heap-event */ \"./client/src/heap-event.ts\");\n\n\nclass EventQueue {\n    constructor() {\n        this.__internalDelta = 0;\n        this.__start = performance.now();\n        this.heap = new _binary_heap__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    }\n    getFrame() {\n        return Math.floor(this.__internalDelta / window.gameClient.getTickInterval());\n    }\n    tick() {\n        // Update the internal time delta.\n        this.__update();\n        while (true) {\n            // If there are no more items in the queue, exit.\n            if (this.heap.content.length === 0) {\n                return;\n            }\n            // If the next event's scheduled frame is greater than the current delta, exit.\n            if (this.heap.content[0].__f > this.__internalDelta) {\n                return;\n            }\n            // Pop the next event from the heap.\n            const nextEvent = this.heap.pop();\n            if (!nextEvent || nextEvent.cancelled) {\n                continue;\n            }\n            // Execute the callback for the event.\n            nextEvent.callback();\n        }\n    }\n    addEvent(callback, when) {\n        // Convert the \"when\" (in ticks) to an absolute frame using the tick interval.\n        when = Math.floor(Math.max(when, 0) * window.gameClient.getTickInterval());\n        return this.__addEvent(callback, when);\n    }\n    addEventMs(callback, ms) {\n        // Convert milliseconds to ticks (using the tick interval).\n        const ticks = Math.floor(ms / window.gameClient.getTickInterval());\n        return this.addEvent(callback, ticks);\n    }\n    __update() {\n        this.__internalDelta = performance.now() - this.__start;\n    }\n    __isValidFrame(frame) {\n        return frame >= 0 && !isNaN(frame);\n    }\n    __addEvent(callback, frame) {\n        if (!this.__isValidFrame(frame)) {\n            console.error(\"Could not add event with an invalid frame.\");\n            return;\n        }\n        const eventItem = new _heap_event__WEBPACK_IMPORTED_MODULE_1__[\"default\"](callback, frame);\n        this.heap.push(eventItem);\n        return eventItem;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/event-queue.ts?");

/***/ }),

/***/ "./client/src/eventemitter.ts":
/*!************************************!*\
  !*** ./client/src/eventemitter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EventEmitter)\n/* harmony export */ });\nclass EventEmitter {\n    constructor() {\n        /*\n         * Class EventEmitter\n         * Subscribes to events and waits for emit\n         */\n        this.events = {};\n    }\n    emit(which, ...args) {\n        /*\n         * Function EventEmitter.emit\n         * Emits a call to the event emitter and executes callbacks\n         */\n        // Not available\n        if (!this.events.hasOwnProperty(which)) {\n            return;\n        }\n        // Execute the callback\n        this.events[which].forEach((callback) => callback(...args));\n    }\n    on(which, callback) {\n        /*\n         * Function EventEmitter.on\n         * Subscribes a callback to an event\n         */\n        // Create a new event of this type if it doesn't exist\n        if (!this.events.hasOwnProperty(which)) {\n            this.events[which] = new Set();\n        }\n        // Add the function to the set\n        this.events[which].add(callback);\n        // Return a reference to the callback for potential removal later\n        return callback;\n    }\n    off(which, callback) {\n        /*\n         * Function EventEmitter.off\n         * Unsubscribe a callback from an event\n         */\n        // Not available\n        if (!this.events.hasOwnProperty(which)) {\n            return;\n        }\n        this.events[which].delete(callback);\n    }\n    clear() {\n        /*\n         * Function EventEmitter.clear\n         * Clears all event listeners\n         */\n        this.events = {};\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/eventemitter.ts?");

/***/ }),

/***/ "./client/src/fluid-container.ts":
/*!***************************************!*\
  !*** ./client/src/fluid-container.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./item */ \"./client/src/item.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n\n\n\nclass FluidThing extends _item__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id, count) {\n        super(id, count);\n    }\n    getPattern() {\n        /*\n         * Function FluidThing.getPattern\n         * Returns the pattern for the liquid item\n         */\n        let frameGroup = this.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE);\n        // Map it to the correct sprite index\n        let index = this.__getLiquidPatternIndex();\n        let x = (index % 4) % frameGroup.pattern.x;\n        let y = Math.floor(index / 4) % frameGroup.pattern.y;\n        // Return the pattern\n        return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](x, y, 0);\n    }\n    __getLiquidPatternIndex() {\n        /*\n         * Function FluidThing.__getLiquidPatternIndex\n         * Returns the index of the liquid pattern\n         */\n        switch (this.count) {\n            case FluidThing.FLUID_TYPES.NONE:\n                return FluidThing.FLUID_COLORS.TRANSPARENT;\n            case FluidThing.FLUID_TYPES.WATER:\n            case FluidThing.FLUID_TYPES.WATER2:\n                return FluidThing.FLUID_COLORS.BLUE;\n            case FluidThing.FLUID_TYPES.MANA:\n                return FluidThing.FLUID_COLORS.PURPLE;\n            case FluidThing.FLUID_TYPES.BEER:\n            case FluidThing.FLUID_TYPES.OIL:\n            case FluidThing.FLUID_TYPES.MUD:\n            //case FluidThing.FLUID_TYPES.TEA:\n            //case FluidThing.FLUID_TYPES.MEAD:\n            case FluidThing.FLUID_TYPES.RUM:\n                return FluidThing.FLUID_COLORS.BROWN;\n            case FluidThing.FLUID_TYPES.BLOOD:\n            case FluidThing.FLUID_TYPES.HEALTH:\n            case FluidThing.FLUID_TYPES.LAVA:\n                return FluidThing.FLUID_COLORS.RED;\n            case FluidThing.FLUID_TYPES.SLIME:\n            case FluidThing.FLUID_TYPES.SLIME2:\n                return FluidThing.FLUID_COLORS.GREEN;\n            case FluidThing.FLUID_TYPES.LEMONADE:\n            case FluidThing.FLUID_TYPES.URINE:\n            case FluidThing.FLUID_TYPES.FRUITJUICE:\n                return FluidThing.FLUID_COLORS.YELLOW;\n            case FluidThing.FLUID_TYPES.MILK:\n            case FluidThing.FLUID_TYPES.COCONUTMILK:\n                return FluidThing.FLUID_COLORS.WHITE;\n            case FluidThing.FLUID_TYPES.WINE:\n                return FluidThing.FLUID_COLORS.PURPLE;\n            default:\n                return FluidThing.FLUID_COLORS.TRANSPARENT;\n        }\n    }\n}\n/*\n * Class FluidThing\n * Container for fluid containers (e.g., troughs and vials) but also splashes (e.g., blood)\n */\nFluidThing.FLUID_TYPES = {\n    NONE: 0,\n    WATER: 1,\n    BLOOD: 2,\n    BEER: 3,\n    SLIME: 4,\n    LEMONADE: 5,\n    MILK: 6,\n    MANA: 7,\n    WATER2: 9,\n    HEALTH: 10,\n    OIL: 11,\n    SLIME2: 12,\n    URINE: 13,\n    COCONUTMILK: 14,\n    WINE: 15,\n    MUD: 19,\n    FRUITJUICE: 21,\n    LAVA: 26,\n    RUM: 27\n};\nFluidThing.FLUID_COLORS = {\n    TRANSPARENT: 0,\n    BLUE: 1,\n    RED: 2,\n    BROWN: 3,\n    GREEN: 4,\n    YELLOW: 5,\n    WHITE: 6,\n    PURPLE: 7\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FluidThing);\n\n\n//# sourceURL=webpack:///./client/src/fluid-container.ts?");

/***/ }),

/***/ "./client/src/frame-group.ts":
/*!***********************************!*\
  !*** ./client/src/frame-group.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n\nclass FrameGroup {\n    ;\n    constructor() {\n        this.type = 0;\n        this.asynchronous = 0;\n        this.nLoop = 0;\n        this.start = 0;\n        this.width = 0;\n        this.height = 0;\n        this.layers = 1;\n        this.pattern = new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0, 0);\n        this.animationLength = 1;\n        this.__totalAnimationLength = 0;\n        this.sprites = [];\n        this.animationLengths = [];\n    }\n    getAlwaysAnimatedFrame() {\n        if (!this.isAnimated()) {\n            return 0;\n        }\n        let current = window.gameClient.renderer.__nMiliseconds % this.__totalAnimationLength;\n        let sum = 0;\n        for (let i = 0; i < this.animationLengths.length; i++) {\n            sum += this.animationLengths[i].min;\n            if (sum >= current) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    isValidIndex(index) {\n        return index >= 0 && index < this.sprites.length;\n    }\n    getSprite(index) {\n        if (!this.isValidIndex(index)) {\n            return null;\n        }\n        return window.gameClient.spriteBuffer.get(this.sprites[index]);\n    }\n    isAnimated() {\n        return this.animationLength > 1;\n    }\n    setAnimation(animations) {\n        this.animationLengths = animations;\n        this.__totalAnimationLength = animations.reduce((a, b) => a + b.min, 0);\n    }\n    setAnimationLength(length) {\n        this.animationLength = length;\n    }\n    getSpriteId(frame, xPattern, yPattern, zPattern, layer, x, y) {\n        let index = this.getSpriteIndex(frame, xPattern, yPattern, zPattern, layer, x, y);\n        return this.isValidIndex(index) ? this.sprites[index] : 0;\n    }\n    getSpriteIndex(frame, xPattern, yPattern, zPattern, layer, x, y) {\n        return ((((((frame * this.pattern.z + zPattern) * this.pattern.y + yPattern) *\n            this.pattern.x + xPattern) * this.layers + layer) *\n            this.height + y) *\n            this.width + x);\n    }\n    setLayers(layers) {\n        this.layers = layers;\n    }\n    setPattern(x, y, z) {\n        this.pattern = new _position__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x, y, z);\n    }\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    getNumberSprites() {\n        return this.width * this.height * this.layers * this.pattern.x * this.pattern.y * this.pattern.z * this.animationLength;\n    }\n}\nFrameGroup.NONE = 0;\nFrameGroup.GROUP_IDLE = 0;\nFrameGroup.GROUP_MOVING = 1;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FrameGroup);\n\n\n//# sourceURL=webpack:///./client/src/frame-group.ts?");

/***/ }),

/***/ "./client/src/game-loop.ts":
/*!*********************************!*\
  !*** ./client/src/game-loop.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameLoop)\n/* harmony export */ });\nclass GameLoop {\n    constructor(frameCallback) {\n        // Callback fired every frame.\n        this.__frameCallback = frameCallback;\n        // State initialization.\n        this.__frame = 0;\n        this.__running = false;\n        this.__aborted = false;\n        this.__initialized = null;\n    }\n    getCurrentFrame() {\n        return this.__frame;\n    }\n    isRunning() {\n        return this.__running;\n    }\n    init() {\n        // Already running.\n        if (this.isRunning()) {\n            return;\n        }\n        this.__initialized = performance.now();\n        this.__aborted = false;\n        this.__running = true;\n        this.__loop();\n    }\n    abort() {\n        this.__aborted = true;\n        this.__running = false;\n    }\n    __loop() {\n        this.__frame++;\n        // If the loop was aborted, stop execution.\n        if (this.__aborted) {\n            return;\n        }\n        // Execute the frame callback.\n        this.__frameCallback();\n        // Schedule the next frame.\n        requestAnimationFrame(this.__loop.bind(this));\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/game-loop.ts?");

/***/ }),

/***/ "./client/src/gameclient.ts":
/*!**********************************!*\
  !*** ./client/src/gameclient.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GameClient)\n/* harmony export */ });\n/* harmony import */ var _chunk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk */ \"./client/src/chunk.ts\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./database */ \"./client/src/database.ts\");\n/* harmony import */ var _event_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event-queue */ \"./client/src/event-queue.ts\");\n/* harmony import */ var _game_loop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./game-loop */ \"./client/src/game-loop.ts\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keyboard */ \"./client/src/keyboard.ts\");\n/* harmony import */ var _mouse__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mouse */ \"./client/src/mouse.ts\");\n/* harmony import */ var _network_manager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./network-manager */ \"./client/src/network-manager.ts\");\n/* harmony import */ var _object_buffer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./object-buffer */ \"./client/src/object-buffer.ts\");\n/* harmony import */ var _player_player__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./player/player */ \"./client/src/player/player.ts\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./renderer */ \"./client/src/renderer.ts\");\n/* harmony import */ var _sprite_buffer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sprite-buffer */ \"./client/src/sprite-buffer.ts\");\n/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./world */ \"./client/src/world.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass GameClient {\n    constructor() {\n        /*\n         * Class GameClient\n         * Main container for the HTML5 ForbyJS Game Client\n         */\n        this.SERVER_VERSION = \"1098\";\n        this.CLIENT_VERSION = \"0.0.1\";\n        this.player = null;\n        this.__tickInterval = 0;\n        this.serverVersion = null;\n        this.clientVersion = null;\n        this.renderer = new _renderer__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\n        this.interface = new _interface__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        this.spriteBuffer = new _sprite_buffer__WEBPACK_IMPORTED_MODULE_11__[\"default\"](32);\n        this.dataObjects = new _object_buffer__WEBPACK_IMPORTED_MODULE_8__[\"default\"]();\n        this.networkManager = new _network_manager__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n        this.database = new _database__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.gameLoop = new _game_loop__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.__loop.bind(this));\n        this.keyboard = new _keyboard__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n        this.mouse = new _mouse__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n        this.eventQueue = new _event_queue__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        document.getElementById(\"client-version\").innerHTML = this.CLIENT_VERSION;\n    }\n    setServerData(packet) {\n        /*\n         * Handles event when connected to the gameserver\n         */\n        let serverData = packet.readServerData();\n        if (serverData.clientVersion !== _sprite_buffer__WEBPACK_IMPORTED_MODULE_11__[\"default\"].__version ||\n            serverData.clientVersion !== this.dataObjects.getVersion()) {\n            this.disconnect();\n            packet.discard();\n            this.interface.modalManager.open(\"floater-connecting\", `Server version (${serverData.clientVersion}) mismatch with client sprite (${_sprite_buffer__WEBPACK_IMPORTED_MODULE_11__[\"default\"].__version}) or object (${this.dataObjects.getVersion()}) data.`);\n        }\n        this.interface.enableVersionFeatures(serverData.clientVersion);\n        this.__setServerVersion(serverData.version);\n        this.__setClientVersion(serverData.clientVersion);\n        console.log('serverData', serverData);\n        _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].WIDTH = serverData.chunk.width;\n        _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].HEIGHT = serverData.chunk.height;\n        _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEPTH = serverData.chunk.depth;\n        this.world = new _world__WEBPACK_IMPORTED_MODULE_12__[\"default\"](serverData.width, serverData.height, serverData.depth);\n        this.world.clock.CLOCK_SPEED = serverData.clock;\n        this.__setTickInterval(serverData.tick);\n        document.getElementById(\"anti-aliasing\").dispatchEvent(new Event(\"change\"));\n    }\n    getFrame() {\n        return this.renderer.debugger.__nFrames;\n    }\n    isRunning() {\n        return this.gameLoop.isRunning();\n    }\n    getTickInterval() {\n        return this.__tickInterval;\n    }\n    setErrorModal(message) {\n        this.interface.modalManager.open(\"floater-connecting\", message);\n    }\n    reset() {\n        /*\n         * Resets the gameclient for a new connection\n         */\n        //this.renderer.minimap.save();\n        this.interface.settings.saveState();\n        this.gameLoop.abort();\n        this.renderer.screen.clear();\n        if (this.player) {\n            this.player.closeAllContainers();\n            this.player = null;\n        }\n        this.interface.reset();\n    }\n    connect() {\n        if (this.networkManager.isConnected())\n            return;\n        this.networkManager.connect();\n    }\n    disconnect() {\n        this.networkManager.close();\n    }\n    send(buffer) {\n        this.networkManager.send(buffer);\n    }\n    isSelf(creature) {\n        return this.player === creature;\n    }\n    isSelfID(creature) {\n        var _a;\n        return ((_a = this.player) === null || _a === void 0 ? void 0 : _a.id) === creature.id;\n    }\n    getSelfID() {\n        var _a;\n        return (_a = this.player) === null || _a === void 0 ? void 0 : _a.id;\n    }\n    handleAcceptLogin(packet) {\n        /*\n         * Handles incoming login registration: start the game client\n         */\n        this.interface.showGameInterface();\n        this.interface.modalManager.close();\n        this.player = new _player_player__WEBPACK_IMPORTED_MODULE_9__[\"default\"](packet);\n        this.world.createCreature(packet.id, this.player);\n        console.log(this.player);\n        this.renderer.updateTileCache();\n        this.player.setAmbientSound();\n        //this.renderer.minimap.setRenderLayer(this.player.getPosition().z);\n        this.gameLoop.init();\n    }\n    isConnected() {\n        return this.networkManager.isConnected();\n    }\n    hasExtendedAnimations() {\n        /*\n         * Returns true if the data object has extended animations\n         */\n        return this.dataObjects.__version >= 1050;\n    }\n    __setServerVersion(version) {\n        this.serverVersion = Number(version);\n    }\n    __setClientVersion(version) {\n        this.clientVersion = Number(version);\n    }\n    __setTickInterval(tick) {\n        this.__tickInterval = tick;\n    }\n    __loop() {\n        /*\n         * Main body of the internal game loop\n         */\n        this.eventQueue.tick();\n        this.interface.soundManager.tick();\n        this.keyboard.handleInput();\n        this.renderer.render();\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/gameclient.ts?");

/***/ }),

/***/ "./client/src/heap-event.ts":
/*!**********************************!*\
  !*** ./client/src/heap-event.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HeapEvent)\n/* harmony export */ });\nclass HeapEvent {\n    constructor(callback, when) {\n        this.callback = callback;\n        this.length = when;\n        this.cancelled = false;\n        this.__f = window.gameClient.eventQueue.__internalDelta + when;\n    }\n    extendTo(when) {\n        this.cancel();\n        return window.gameClient.eventQueue.addEvent(this.callback, window.gameClient.eventQueue.__internalDelta + when);\n    }\n    complete() {\n        // Cancel the event, then immediately execute the callback.\n        this.cancel();\n        this.callback();\n    }\n    cancel() {\n        this.cancelled = true;\n    }\n    remainingMillis() {\n        return this.__f - window.gameClient.eventQueue.__internalDelta;\n    }\n    remainingSeconds() {\n        return 1E-3 * this.remainingMillis();\n    }\n    remainingFraction() {\n        return this.remainingMillis() / this.length;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/heap-event.ts?");

/***/ }),

/***/ "./client/src/helper/appContext.ts":
/*!*****************************************!*\
  !*** ./client/src/helper/appContext.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONST: () => (/* binding */ CONST)\n/* harmony export */ });\n/* harmony import */ var _config_constants_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/constants.json */ \"./client/src/config/constants.json\");\n\nconst CONST = _config_constants_json__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceURL=webpack:///./client/src/helper/appContext.ts?");

/***/ }),

/***/ "./client/src/hotbar-manager.ts":
/*!**************************************!*\
  !*** ./client/src/hotbar-manager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HotbarManager)\n/* harmony export */ });\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n\nclass HotbarManager {\n    ;\n    constructor() {\n        this.GRADIENTS = [];\n        this.__currentDragElement = null;\n        // Get all elements with the class \"hotbar-item\" from the DOM.\n        const hotbarElements = Array.from(document.querySelectorAll(\".hotbar-item\"));\n        // Attach click event listeners to each hotbar element.\n        hotbarElements.forEach(this.__addClickEventListeners.bind(this));\n        // Create a slot for each hotbar element.\n        this.slots = hotbarElements.map((el) => this.__createSlot(el));\n        // Initialize the hotbar icons.\n        this.ICONS = new Image();\n        this.ICONS.src = \"./png/icons.png\";\n        // Create the conic gradients lookup table.\n        this.__createConicGradients();\n    }\n    addSlot(index, sid) {\n        if (index < 0 || index >= this.slots.length)\n            return;\n        // Get the spell details from the game interface.\n        const spell = window.gameClient.interface.getSpell(sid);\n        // Set the new spell reference in the slot.\n        this.slots[index].spell = { sid, icon: spell.icon };\n        // Update the DOM: set the text color and title.\n        const parent = this.slots[index].canvas.canvas.parentNode;\n        if (parent && parent.lastElementChild instanceof HTMLElement) {\n            parent.lastElementChild.style.color = \"white\";\n            parent.title = `${spell.name}: ${spell.description}`;\n        }\n        this.__saveConfiguration();\n    }\n    clearSlot(index) {\n        const slot = this.slots[index];\n        slot.spell = null;\n        slot.canvas.clear();\n        const parent = slot.canvas.canvas.parentNode;\n        if (parent && parent.lastElementChild instanceof HTMLElement) {\n            parent.lastElementChild.style.color = \"grey\";\n        }\n        this.__saveConfiguration();\n    }\n    handleKeyPress(key) {\n        const F1_KEY = 112;\n        if (typeof key === \"string\" && key.startsWith(\"F\")) {\n            key = parseInt(key.slice(1)) + 111; // Convert \"F1\" → 112\n        }\n        if (typeof key === \"number\") {\n            this.__handleClick(key - F1_KEY);\n        }\n    }\n    render() {\n        this.slots.forEach((slot) => {\n            if (slot.spell === null)\n                return;\n            // Draw the spell icon on the slot's canvas.\n            slot.canvas.context.drawImage(this.ICONS, 32 * slot.spell.icon.x, 32 * slot.spell.icon.y, 32, 32, 0, 0, 32, 32);\n            // Get the cooldown fraction for the spell.\n            const fraction = window.gameClient.player.spellbook.getCooldownFraction(slot.spell.sid);\n            if (fraction < 1) {\n                this.__applyCooldownEffect(fraction, slot);\n            }\n            if (fraction === 1) {\n                slot.duration.innerHTML = \"\";\n            }\n        });\n    }\n    __applyCooldownEffect(fraction, slot) {\n        slot.canvas.context.fillStyle = this.__getConicGradient(fraction);\n        slot.canvas.context.fillRect(0, 0, 32, 32);\n        const seconds = window.gameClient.player.spellbook.getCooldownSeconds(slot.spell.sid);\n        if (seconds > 60) {\n            slot.duration.innerHTML = `${(seconds / 60).toFixed(1)}m`;\n        }\n        else {\n            slot.duration.innerHTML = `${seconds.toFixed(1)}s`;\n        }\n    }\n    __getConicGradient(fraction) {\n        // Clamp fraction between 0 and 1.\n        const clamped = Math.min(1, Math.max(0, fraction));\n        const index = Math.round(360 * (clamped % 1));\n        return this.GRADIENTS[index];\n    }\n    __addClickEventListeners(DOMElement, i) {\n        DOMElement.addEventListener(\"click\", this.__handleClick.bind(this, i));\n    }\n    __handleLightUp(slot) {\n        const parent = slot.canvas.canvas.parentNode;\n        if (parent) {\n            parent.className = \"hotbar-item active\";\n            setTimeout(() => {\n                parent.className = \"hotbar-item\";\n            }, 250);\n        }\n    }\n    __handleClick(i) {\n        const slot = this.slots[i];\n        this.__handleLightUp(slot);\n        if (slot.spell === null)\n            return;\n        window.gameClient.player.spellbook.castSpell(slot.spell.sid);\n    }\n    __createSlot(DOMElement) {\n        // Assume DOMElement.firstElementChild is the canvas container.\n        const firstChild = DOMElement.firstElementChild;\n        const canvasInstance = new _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](firstChild, 32, 32);\n        return {\n            canvas: canvasInstance,\n            duration: DOMElement.children[1],\n            spell: null,\n        };\n    }\n    __createConicGradients() {\n        const temp = new _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](null, 32, 32);\n        const gradients = [];\n        for (let i = 0; i < 360; i++) {\n            gradients.push(this.__createConicGradient(i / 360, temp.context));\n        }\n        this.GRADIENTS = gradients;\n    }\n    __createConicGradient(fraction, context) {\n        const gradient = context.createConicGradient(fraction * 2 * Math.PI, 16, 16);\n        gradient.addColorStop(0, \"rgba(0, 0, 0, 0.75)\");\n        gradient.addColorStop(1 - fraction, \"rgba(0, 0, 0, 0.75)\");\n        gradient.addColorStop(1 - fraction, \"rgba(0, 0, 0, 0)\");\n        return gradient;\n    }\n    __loadConfiguration() {\n        const storage = localStorage.getItem(\"hotbar\");\n        if (storage === null)\n            return;\n        JSON.parse(storage).forEach((x, i) => {\n            if (x !== null) {\n                this.addSlot(i, x.sid);\n            }\n        });\n    }\n    __saveConfiguration() {\n        localStorage.setItem(\"hotbar\", JSON.stringify(this.slots.map((x) => x.spell)));\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/hotbar-manager.ts?");

/***/ }),

/***/ "./client/src/index.ts":
/*!*****************************!*\
  !*** ./client/src/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameclient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameclient */ \"./client/src/gameclient.ts\");\n\nwindow.onload = function windowOnLoad() {\n    window.gameClient = new _gameclient__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n};\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const enterGame = document.getElementById(\"enter-game\");\n    if (enterGame) {\n        enterGame.disabled = true;\n    }\n});\n\n\n//# sourceURL=webpack:///./client/src/index.ts?");

/***/ }),

/***/ "./client/src/interface.ts":
/*!*********************************!*\
  !*** ./client/src/interface.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _channel_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel-manager */ \"./client/src/channel-manager.ts\");\n/* harmony import */ var _hotbar_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hotbar-manager */ \"./client/src/hotbar-manager.ts\");\n/* harmony import */ var _menu_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu-manager */ \"./client/src/menu-manager.ts\");\n/* harmony import */ var _modal_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modal-manager */ \"./client/src/modal-manager.ts\");\n/* harmony import */ var _notification__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notification */ \"./client/src/notification.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n/* harmony import */ var _screen_element_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./screen-element-manager */ \"./client/src/screen-element-manager.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./settings */ \"./client/src/settings.ts\");\n/* harmony import */ var _sound_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sound-manager */ \"./client/src/sound-manager.ts\");\n/* harmony import */ var _sprite_buffer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sprite-buffer */ \"./client/src/sprite-buffer.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./state */ \"./client/src/state.ts\");\n/* harmony import */ var _window_manager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./window-manager */ \"./client/src/window-manager.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Interface {\n    constructor() {\n        var _a;\n        this.settings = new _settings__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this);\n        this.channelManager = new _channel_manager__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.hotbarManager = new _hotbar_manager__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.notificationManager = new _notification__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        this.modalManager = new _modal_manager__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n        //this.statusBar = new StatusBar();\n        this.windowManager = new _window_manager__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\n        this.soundManager = new _sound_manager__WEBPACK_IMPORTED_MODULE_8__[\"default\"](this.settings.isSoundEnabled());\n        this.menuManager = new _menu_manager__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        this.screenElementManager = new _screen_element_manager__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n        this.state = new _state__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\n        this.state.add(\"spritesLoaded\", this.enableEnterGame.bind(this));\n        this.state.add(\"dataLoaded\", this.enableEnterGame.bind(this));\n        //(document.getElementById(\"chat-input\") as HTMLInputElement).disabled = true;\n        this.addAvailableResolutions();\n        (_a = document.getElementById(\"keyring\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", this.__openKeyRing.bind(this));\n        this.__enableListeners();\n    }\n    getSpell(id) {\n        var _a;\n        return (_a = Interface.SPELLS.get(id)) !== null && _a !== void 0 ? _a : { name: \"Unknown\", description: \"Unknown\", icon: { x: 6, y: 10 } };\n    }\n    updateSpells(sid) {\n        var _a;\n        (_a = window.gameClient.player) === null || _a === void 0 ? void 0 : _a.spellbook.addSpell(sid);\n    }\n    __openKeyRing() {\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_5__.KeyringOpenPacket());\n    }\n    enableVersionFeatures(version) {\n        var _a;\n        if (version <= 1000) {\n            (_a = this.modalManager.get(\"outfit-modal\")) === null || _a === void 0 ? void 0 : _a.disableAddons();\n        }\n    }\n    getHexColor(index) {\n        return Interface.WEBCOLORS[index] || \"#FFFFFF\";\n    }\n    getAccountDetails() {\n        return {\n            account: document.getElementById(\"user-username\").value.trim(),\n            password: document.getElementById(\"user-password\").value.trim(),\n        };\n    }\n    enterGame() {\n        if (!this.areAssetsLoaded()) {\n            alert(\"The Tibia.spr and Tibia.dat must be loaded first.\");\n            return;\n        }\n        this.modalManager.open(\"floater-connecting\", \"Connecting to Gameworld...\");\n        window.gameClient.connect();\n    }\n    reset() {\n        this.screenElementManager.clear();\n        this.windowManager.closeAll();\n        this.hideGameInterface();\n    }\n    enableEnterGame() {\n        var _a;\n        if (this.areAssetsLoaded()) {\n            (_a = document.getElementById(\"enter-game\")) === null || _a === void 0 ? void 0 : _a.removeAttribute(\"disabled\");\n        }\n    }\n    loadAssetsDelegator() {\n        var _a;\n        (_a = document.getElementById(\"asset-selector\")) === null || _a === void 0 ? void 0 : _a.click();\n    }\n    areAssetsLoaded() {\n        return Boolean(this.state.spritesLoaded && this.state.dataLoaded);\n    }\n    showModal(id) {\n        this.modalManager.open(id);\n    }\n    toggleWindow(which) {\n        var _a;\n        (_a = this.windowManager.getWindow(which)) === null || _a === void 0 ? void 0 : _a.toggle();\n    }\n    setCancelMessage(message) {\n        this.notificationManager.setCancelMessage(message);\n    }\n    hideGameInterface() {\n        var _a;\n        document.getElementById(\"login-wrapper\").style.display = \"flex\";\n        document.getElementById(\"game-wrapper\").style.display = \"none\";\n        (_a = window.onresize) === null || _a === void 0 ? void 0 : _a.call(window, new UIEvent(\"resize\"));\n    }\n    showGameInterface() {\n        var _a;\n        document.getElementById(\"login-wrapper\").style.display = \"none\";\n        document.getElementById(\"game-wrapper\").style.display = \"flex\";\n        (_a = window.onresize) === null || _a === void 0 ? void 0 : _a.call(window, new UIEvent(\"resize\"));\n    }\n    loadGameFiles(event) {\n        console.log('LOAD FROM INTERFACE');\n        const target = event.target;\n        if (!target.files)\n            return;\n        Array.from(target.files).forEach((file) => {\n            console.debug(`Loading asset ${file.name} from disk.`);\n            const reader = new FileReader();\n            if (file.name === \"Tibia.dat\") {\n                reader.addEventListener(\"load\", (e) => window.gameClient.dataObjects.load(file.name, e));\n            }\n            else if (file.name === \"Tibia.spr\") {\n                reader.addEventListener(\"load\", (e) => _sprite_buffer__WEBPACK_IMPORTED_MODULE_9__[\"default\"].load(file.name, e));\n            }\n            else {\n                console.error(`Unknown asset file ${file.name} was selected.`);\n                return;\n            }\n            reader.readAsArrayBuffer(file);\n        });\n    }\n    loadAssetCallback(which, filename) {\n        if (which === \"sprite\") {\n            this.state.spritesLoaded = true;\n            const element = document.getElementById(\"sprites-loaded\");\n            if (element) {\n                element.style.color = \"green\";\n                element.innerHTML = `${filename} (${_sprite_buffer__WEBPACK_IMPORTED_MODULE_9__[\"default\"].__version})`;\n            }\n        }\n        else if (which === \"data\") {\n            this.state.dataLoaded = true;\n            const element = document.getElementById(\"data-loaded\");\n            if (element) {\n                element.style.color = \"green\";\n                element.innerHTML = `${filename} (${window.gameClient.dataObjects.__version})`;\n            }\n        }\n    }\n    requestFullScreen() {\n        const element = document.body;\n        const requestMethod = element.requestFullscreen ||\n            element.webkitRequestFullscreen ||\n            element.mozRequestFullScreen ||\n            element.msRequestFullscreen;\n        if (requestMethod) {\n            requestMethod.call(element);\n        }\n    }\n    isRaining() {\n        return window.gameClient.renderer.weatherCanvas.isRaining();\n    }\n    getSpriteScaling() {\n        return 32 * this.getResolutionScale();\n    }\n    addAvailableResolutions() {\n        var _a;\n        const selectElement = document.getElementById(\"resolution\");\n        const resolutions = [\n            { width: 800, height: 600 },\n            { width: 960, height: 720 },\n            { width: 1024, height: 768 },\n            { width: 1152, height: 864 },\n        ];\n        const nodes = [this.__createResolutionNode({ width: 480, height: 352 })];\n        for (const resolution of resolutions) {\n            const { width, height } = resolution;\n            const viewport = (_a = window.visualViewport) !== null && _a !== void 0 ? _a : { width: window.innerWidth, height: window.innerHeight };\n            if (viewport.width - 360 < width || viewport.height - 188 < height) {\n                break;\n            }\n            nodes.push(this.__createResolutionNode(resolution));\n        }\n        selectElement.replaceChildren(...nodes);\n        selectElement.selectedIndex = selectElement.options.length - 1;\n    }\n    getResolutionScale() {\n        var _a;\n        const viewport = (_a = window.visualViewport) !== null && _a !== void 0 ? _a : { width: window.innerWidth, height: window.innerHeight };\n        const scaleX = (viewport.width) / Interface.SCREEN_WIDTH_MIN;\n        const scaleY = (viewport.height) / Interface.SCREEN_HEIGHT_MIN;\n        return Math.min(scaleX, scaleY);\n    }\n    setElementDimensions(elem, width, height) {\n        elem.style.width = `${Math.round(width)}px`;\n        elem.style.height = `${Math.round(height)}px`;\n    }\n    closeClient(event) {\n        // Save the minimap\n        //window.gameClient.renderer.minimap.save();\n        // Save the state of the settings to localstorage\n        this.settings.saveState();\n    }\n    sendLogout() {\n        this.modalManager.open(\"confirm-modal\", () => {\n            // Block logout in no-logout zones.\n            if (window.gameClient.player.getTile().isNoLogoutZone()) {\n                return window.gameClient.interface.setCancelMessage(\"You may not logout here.\");\n            }\n            window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_5__.LogoutPacket());\n        });\n    }\n    openOptions() {\n        this.modalManager.open(\"settings-modal\");\n    }\n    openCharactherStatus() {\n        this.modalManager.open(\"skill-modal\");\n    }\n    openFriendsList() {\n        this.modalManager.open(\"friend-modal\");\n    }\n    openOutfit() {\n        this.modalManager.open(\"outfit-modal\");\n    }\n    handleResize() {\n        const screenWidth = window.innerWidth;\n        const screenHeight = window.innerHeight;\n        const scaleX = screenWidth / (Interface.TILE_WIDTH * Interface.TILE_SIZE);\n        const scaleY = screenHeight / (Interface.TILE_HEIGHT * Interface.TILE_SIZE);\n        const scale = Math.min(scaleX, scaleY); // prevent overflow\n        window.gameClient.renderer.screen.setScale(scale);\n    }\n    __handleStackResize() {\n        var _a, _b;\n        // Get all elements with the class \"column\".\n        const columns = Array.from(document.getElementsByClassName(\"column\"));\n        // Use visualViewport.height if available, otherwise fallback to window.innerHeight.\n        const viewportHeight = (_b = (_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : window.innerHeight;\n        for (const stack of columns) {\n            // If there are no child elements in this stack, exit the function.\n            if (stack.children.length === 0)\n                return;\n            // Get the last child element.\n            const last = stack.children[stack.children.length - 1];\n            // If the last element has the class \"prototype window\"\n            if (last.className === \"prototype window\") {\n                const bounding = last.getBoundingClientRect();\n                // If the bottom of the element is below the viewport height, close the corresponding container.\n                if (bounding.bottom >= viewportHeight) {\n                    const containerIndex = Number(last.getAttribute(\"containerIndex\"));\n                    window.gameClient.player.getContainer(containerIndex).close();\n                }\n            }\n        }\n    }\n    __createResolutionNode({ width, height }) {\n        const optionElement = document.createElement(\"option\");\n        // Using template literals to create the display string.\n        optionElement.text = `${width} × ${height}`;\n        // Store width as the value (converted to string).\n        optionElement.value = width.toString();\n        return optionElement;\n    }\n    __handleVisibiliyChange(event) {\n        if (!window.gameClient.networkManager.isConnected()) {\n            return;\n        }\n        // Disable the keyboard when tabbing out to prevent stuck keys.\n        window.gameClient.keyboard.setInactive();\n        window.gameClient.renderer.__handleVisibiliyChange(event);\n    }\n    __handleResizeWindow() {\n        // Re-calculate available game screen resolutions.\n        this.addAvailableResolutions();\n        // Handle resizing of the game screen.\n        this.handleResize();\n    }\n    /**\n     * Asks the client to confirm the browser close when connected.\n     * @returns True if confirmation is needed, otherwise undefined.\n     */\n    __closeClientConfirm(event) {\n        if (window.gameClient.isConnected()) {\n            return true;\n        }\n        return;\n    }\n    __enableListeners() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        (_a = document.getElementById(\"openSkills\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", () => this.toggleWindow(\"skill-window\"));\n        (_b = document.getElementById(\"openBattle\")) === null || _b === void 0 ? void 0 : _b.addEventListener(\"click\", () => this.toggleWindow(\"battle-window\"));\n        (_c = document.getElementById(\"openFriends\")) === null || _c === void 0 ? void 0 : _c.addEventListener(\"click\", () => this.toggleWindow(\"friend-window\"));\n        (_d = document.getElementById(\"logout-button\")) === null || _d === void 0 ? void 0 : _d.addEventListener(\"click\", () => this.sendLogout());\n        (_e = document.getElementById(\"load-assets\")) === null || _e === void 0 ? void 0 : _e.addEventListener(\"click\", () => this.loadAssetsDelegator());\n        (_f = document.getElementById(\"asset-selector\")) === null || _f === void 0 ? void 0 : _f.addEventListener(\"change\", (event) => this.loadGameFiles(event));\n        (_g = document.getElementById(\"enter-game\")) === null || _g === void 0 ? void 0 : _g.addEventListener(\"click\", () => this.enterGame());\n        window.onbeforeunload = () => window.gameClient.isConnected() ? true : undefined;\n        //window.onunload = () => window.gameClient.renderer.minimap.save();\n        window.onresize = () => this.handleResize();\n    }\n}\nInterface.SCREEN_WIDTH_MIN = 864;\nInterface.SCREEN_HEIGHT_MIN = 416;\nInterface.TILE_SIZE = 32;\nInterface.TILE_WIDTH = 27;\nInterface.TILE_HEIGHT = 13;\nInterface.COLORS = {\n    \"BLACK\": 0,\n    \"BLUE\": 5,\n    \"LIGHTGREEN\": 30,\n    \"LIGHTBLUE\": 35,\n    \"MAYABLUE\": 95,\n    \"DARKRED\": 108,\n    \"LIGHTGREY\": 129,\n    \"SKYBLUE\": 143,\n    \"PURPLE\": 155,\n    \"RED\": 180,\n    \"ORANGE\": 198,\n    \"YELLOW\": 210,\n    \"WHITE\": 215,\n};\nInterface.WEBCOLORS = [\n    \"#000000\", \"#000033\", \"#000066\", \"#000099\", \"#0000CC\", \"#0000FF\", \"#003300\",\n    \"#003333\", \"#003366\", \"#003399\", \"#0033CC\", \"#0033FF\", \"#006600\", \"#006633\",\n    \"#006666\", \"#006699\", \"#0066CC\", \"#0066FF\", \"#009900\", \"#009933\", \"#009966\",\n    \"#009999\", \"#0099CC\", \"#0099FF\", \"#00CC00\", \"#00CC33\", \"#00CC66\", \"#00CC99\",\n    \"#00CCCC\", \"#00CCFF\", \"#00FF00\", \"#00FF33\", \"#00FF66\", \"#00FF99\", \"#00FFCC\",\n    \"#00FFFF\", \"#330000\", \"#330033\", \"#330066\", \"#330099\", \"#3300CC\", \"#3300FF\",\n    \"#333300\", \"#333333\", \"#333366\", \"#333399\", \"#3333CC\", \"#3333FF\", \"#336600\",\n    \"#336633\", \"#336666\", \"#336699\", \"#3366CC\", \"#3366FF\", \"#339900\", \"#339933\",\n    \"#339966\", \"#339999\", \"#3399CC\", \"#3399FF\", \"#33CC00\", \"#33CC33\", \"#33CC66\",\n    \"#33CC99\", \"#33CCCC\", \"#33CCFF\", \"#33FF00\", \"#33FF33\", \"#33FF66\", \"#33FF99\",\n    \"#33FFCC\", \"#33FFFF\", \"#660000\", \"#660033\", \"#660066\", \"#660099\", \"#6600CC\",\n    \"#6600FF\", \"#663300\", \"#663333\", \"#663366\", \"#663399\", \"#6633CC\", \"#6633FF\",\n    \"#666600\", \"#666633\", \"#666666\", \"#666699\", \"#6666CC\", \"#6666FF\", \"#669900\",\n    \"#669933\", \"#669966\", \"#669999\", \"#6699CC\", \"#6699FF\", \"#66CC00\", \"#66CC33\",\n    \"#66CC66\", \"#66CC99\", \"#66CCCC\", \"#66CCFF\", \"#66FF00\", \"#66FF33\", \"#66FF66\",\n    \"#66FF99\", \"#66FFCC\", \"#66FFFF\", \"#990000\", \"#990033\", \"#990066\", \"#990099\",\n    \"#9900CC\", \"#9900FF\", \"#993300\", \"#993333\", \"#993366\", \"#993399\", \"#9933CC\",\n    \"#9933FF\", \"#996600\", \"#996633\", \"#996666\", \"#996699\", \"#9966CC\", \"#9966FF\",\n    \"#999900\", \"#999933\", \"#999966\", \"#999999\", \"#9999CC\", \"#9999FF\", \"#99CC00\",\n    \"#99CC33\", \"#99CC66\", \"#99CC99\", \"#99CCCC\", \"#99CCFF\", \"#99FF00\", \"#99FF33\",\n    \"#99FF66\", \"#99FF99\", \"#99FFCC\", \"#99FFFF\", \"#CC0000\", \"#CC0033\", \"#CC0066\",\n    \"#CC0099\", \"#CC00CC\", \"#CC00FF\", \"#CC3300\", \"#CC3333\", \"#CC3366\", \"#CC3399\",\n    \"#CC33CC\", \"#CC33FF\", \"#CC6600\", \"#CC6633\", \"#CC6666\", \"#CC6699\", \"#CC66CC\",\n    \"#CC66FF\", \"#CC9900\", \"#CC9933\", \"#CC9966\", \"#CC9999\", \"#CC99CC\", \"#CC99FF\",\n    \"#CCCC00\", \"#CCCC33\", \"#CCCC66\", \"#CCCC99\", \"#CCCCCC\", \"#CCCCFF\", \"#CCFF00\",\n    \"#CCFF33\", \"#CCFF66\", \"#CCFF99\", \"#CCFFCC\", \"#CCFFFF\", \"#FF0000\", \"#FF0033\",\n    \"#FF0066\", \"#FF0099\", \"#FF00CC\", \"#FF00FF\", \"#FF3300\", \"#FF3333\", \"#FF3366\",\n    \"#FF3399\", \"#FF33CC\", \"#FF33FF\", \"#FF6600\", \"#FF6633\", \"#FF6666\", \"#FF6699\",\n    \"#FF66CC\", \"#FF66FF\", \"#FF9900\", \"#FF9933\", \"#FF9966\", \"#FF9999\", \"#FF99CC\",\n    \"#FF99FF\", \"#FFCC00\", \"#FFCC33\", \"#FFCC66\", \"#FFCC99\", \"#FFCCCC\", \"#FFCCFF\",\n    \"#FFFF00\", \"#FFFF33\", \"#FFFF66\", \"#FFFF99\", \"#FFFFCC\", \"#FFFFFF\"\n];\nInterface.SPELLS = new Map([\n    [0, { name: \"Cure Burning\", description: \"Cures Burning Condition\", icon: { x: 0, y: 0 } }],\n    [1, { name: \"Explosion\", description: \"Causes an Explosion\", icon: { x: 0, y: 4 } }],\n    [2, { name: \"Healing\", description: \"Heal Damage\", icon: { x: 2, y: 0 } }],\n    [3, { name: \"Invisibilis\", description: \"Turn Invisible for 60s.\", icon: { x: 10, y: 7 } }],\n    [4, { name: \"Morph\", description: \"Morphs into a Creature\", icon: { x: 9, y: 9 } }],\n    [5, { name: \"Parva Lux\", description: \"Surround yourself by light\", icon: { x: 8, y: 9 } }],\n    [7, { name: \"Hearthstone\", description: \"Teleport yourself to the temple.\", icon: { x: 3, y: 3 } }],\n    [8, { name: \"Velocitas\", description: \"Increases your movement speed\", icon: { x: 4, y: 8 } }],\n    [9, { name: \"Levitate\", description: \"Move up or down a mountain\", icon: { x: 4, y: 10 } }],\n]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Interface);\n\n\n//# sourceURL=webpack:///./client/src/interface.ts?");

/***/ }),

/***/ "./client/src/item.ts":
/*!****************************!*\
  !*** ./client/src/item.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Item)\n/* harmony export */ });\n/* harmony import */ var _bitflag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitflag */ \"./client/src/bitflag.ts\");\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./thing */ \"./client/src/thing.ts\");\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tile */ \"./client/src/tile.ts\");\n\n\n\n\n\nclass Item extends _thing__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    constructor(id, count) {\n        /*\n         * Class Item\n         * Container for an item with an identifier and count\n         *\n         * API:\n         *\n         * @Item.getCount() - returns the count of the item\n         * @Item.isHookSouth() - returns true if the item is a hookable item south\n         * @Item.isHookEast() - returns true if the item is a hookable item east\n         * @Item.isHangable() - returns true if the item is hangable\n         *\n         */\n        super(id);\n        this.count = count;\n    }\n    getPattern() {\n        /*\n         * Function Item.getPattern\n         * Returns the pattern of an item: this may be different for various types of items (e.g., stackables, hangables, and liquids)\n         */\n        let frameGroup = this.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NONE);\n        if (this.isHangable()) {\n            return this.__getHangablePattern();\n        }\n        if (this.isStackable() && frameGroup.pattern.x === 4 && frameGroup.pattern.y === 2) {\n            return this.__getCountPattern();\n        }\n        return _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NULL;\n    }\n    getCount() {\n        /*\n         * Function Item.getCount\n         * Returns the count of an item\n         */\n        return this.count;\n    }\n    isHookSouth() {\n        /*\n         * Function Item.isHookSouth\n         * Returns true if the item can be hooked on south-facing walls\n         */\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagHookSouth);\n    }\n    isHookEast() {\n        /*\n         * Function Item.isHookEast\n         * Returns true if the item can be hooked on east-facing walls\n         */\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagHookEast);\n    }\n    isHangable() {\n        /*\n         * Function Item.isHangable\n         * Returns true if the item can be used with something else\n         */\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagHangable);\n    }\n    isPickupable() {\n        /*\n         * Function Item.isPickupable\n         * Returns true if the item can be picked up\n         */\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagPickupable);\n    }\n    isElevation() {\n        /*\n         * Function Item.isElevation\n         * Returns true when an item is elevated\n         */\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagElevation);\n    }\n    isWalkable() {\n        /*\n         * Function Item.isWalkable\n         * Returns true when an item is walkable\n         */\n        return !this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagNotWalkable);\n    }\n    isMoveable() {\n        /*\n         * Function Item.isMoveable\n         * Returns true if the item is moveable\n         */\n        return !this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagNotMoveable);\n    }\n    isStackable() {\n        /*\n         * Function Item.isStackable\n         * Returns true when an item has its stackable flag set\n         */\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.flags.DatFlagStackable);\n    }\n    __getHangablePattern() {\n        /*\n         * Function Item.__getHangablePattern\n         * Returns the hangable pattern of a thing that can be hooked on a wall\n         */\n        if (this.__parent instanceof _tile__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            if (this.__parent.isHookSouth()) {\n                return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 0, 0);\n            }\n            else if (this.__parent.isHookEast()) {\n                return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](2, 0, 0);\n            }\n        }\n        return _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NULL;\n    }\n    __getCountPattern() {\n        /*\n         * Function Item.__getCountPattern\n         * Returns the pattern for stackable items that shows the respective item count\n         */\n        let count = this.getCount();\n        if (count === 1) {\n            return _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NULL;\n        }\n        else if (count === 2) {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 0, 0);\n        }\n        else if (count === 3) {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](2, 0, 0);\n        }\n        else if (count === 4) {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3, 0, 0);\n        }\n        else if (count === 5) {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](4, 0, 0);\n        }\n        else if (count < 10) {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](0, 1, 0);\n        }\n        else if (count < 25) {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](1, 1, 0);\n        }\n        else if (count < 50) {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](2, 1, 0);\n        }\n        else {\n            return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3, 1, 0);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/item.ts?");

/***/ }),

/***/ "./client/src/keyboard.ts":
/*!********************************!*\
  !*** ./client/src/keyboard.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n\n\nclass Keyboard {\n    constructor() {\n        this.__activeKeys = new Set();\n        this.__keyDown = (event) => {\n            // convert event.key to lower case for consistency\n            //event.preventDefault();\n            const lowerKey = event.key.toLowerCase();\n            if (!this.__isConfigured(lowerKey))\n                return;\n            const { code } = event;\n            if (lowerKey === Keyboard.KEYS.ENTER) {\n                this.__handleReturnKey();\n                return;\n            }\n            if (window.gameClient.isConnected()) {\n                if (lowerKey === Keyboard.KEYS.KEY_G && this.isControlDown()) {\n                    event.preventDefault();\n                    return window.gameClient.interface.sendLogout();\n                }\n                if (lowerKey === Keyboard.KEYS.KEY_O && this.isControlDown()) {\n                    event.preventDefault();\n                    return window.gameClient.interface.openOptions();\n                }\n                if (lowerKey === Keyboard.KEYS.KEY_K && this.isControlDown()) {\n                    event.preventDefault();\n                    return window.gameClient.interface.openCharactherStatus();\n                }\n                if (lowerKey === Keyboard.KEYS.KEY_U && this.isControlDown()) {\n                    event.preventDefault();\n                    return window.gameClient.interface.openOutfit();\n                }\n                if (lowerKey === Keyboard.KEYS.KEY_M && this.isControlDown()) {\n                    event.preventDefault();\n                    //return window.gameClient.renderer.minimap.openLargeMap();\n                }\n                if (lowerKey === Keyboard.KEYS.KEY_E && this.isControlDown()) {\n                    event.preventDefault();\n                    return window.gameClient.interface.channelManager.closeCurrentChannel();\n                }\n            }\n            // Update cursor on modifier keys\n            if (lowerKey === Keyboard.KEYS.SHIFT) {\n                this.__activeKeys.add(lowerKey);\n                window.gameClient.mouse.setCursor(\"zoom-in\");\n                return;\n            }\n            if (lowerKey === Keyboard.KEYS.CONTROL) {\n                this.__activeKeys.add(lowerKey);\n                window.gameClient.mouse.setCursor(\"pointer\");\n                return;\n            }\n            if (lowerKey === Keyboard.KEYS.ESC) {\n                this.__handleEscapeKey();\n                return;\n            }\n            // Handle function keys F1 - F12 (convert to lower-case)\n            if (lowerKey.startsWith(\"f\")) {\n                event.preventDefault();\n                if (this.isControlDown()) {\n                    if (lowerKey === Keyboard.KEYS.F8) {\n                        return window.gameClient.renderer.debugger.toggleStatistics();\n                    }\n                    if (lowerKey === Keyboard.KEYS.F12) {\n                        return window.gameClient.renderer.takeScreenshot(event);\n                    }\n                }\n                return window.gameClient.interface.hotbarManager.handleKeyPress(code);\n            }\n            if (lowerKey === Keyboard.KEYS.TAB && window.gameClient.isConnected()) {\n                event.preventDefault();\n                return window.gameClient.interface.channelManager.handleChannelIncrement(1);\n            }\n            // When modal is open, block other inputs\n            if (window.gameClient.interface.modalManager.isOpened())\n                return;\n            // If not on main game body, handle key type\n            if (document.activeElement !== document.body) {\n                this.__handleKeyType(lowerKey);\n                return;\n            }\n            // Otherwise, mark the key as active (using lower-case)\n            this.__activeKeys.add(lowerKey);\n        };\n        this.__keyUp = (event) => {\n            const lowerKey = event.key.toLowerCase();\n            if (!this.__isConfigured(lowerKey))\n                return;\n            if (lowerKey === Keyboard.KEYS.SHIFT || lowerKey === Keyboard.KEYS.CONTROL) {\n                window.gameClient.mouse.setCursor(\"auto\");\n            }\n            this.__activeKeys.delete(lowerKey);\n        };\n        document.addEventListener(\"keydown\", this.__keyDown);\n        document.addEventListener(\"keyup\", this.__keyUp);\n    }\n    setInactive() {\n        this.__activeKeys.clear();\n    }\n    isShiftDown() {\n        return this.__activeKeys.has(Keyboard.KEYS.SHIFT);\n    }\n    isControlDown() {\n        return this.__activeKeys.has(Keyboard.KEYS.CONTROL);\n    }\n    handleInput() {\n        this.__activeKeys.forEach((key) => {\n            window.gameClient.world.pathfinder.setPathfindCache(null);\n            if (!window.gameClient.player.__serverWalkConfirmation)\n                return;\n            if (window.gameClient.player.isMoving()) {\n                return window.gameClient.player.extendMovementBuffer(key);\n            }\n            if (this.isShiftDown()) {\n                return this.__handleCharacterRotate(key);\n            }\n            this.handleCharacterMovement(key);\n        });\n    }\n    handleCharacterMovement(key) {\n        const position = window.gameClient.player.getPosition();\n        switch (key) {\n            case Keyboard.KEYS.KEYPAD_7:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTHWEST, position.northwest());\n                break;\n            case Keyboard.KEYS.KEYPAD_9:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTHEAST, position.northeast());\n                break;\n            case Keyboard.KEYS.KEYPAD_1:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTHWEST, position.southwest());\n                break;\n            case Keyboard.KEYS.KEYPAD_3:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTHEAST, position.southeast());\n                break;\n            case Keyboard.KEYS.LEFT_ARROW:\n            case Keyboard.KEYS.KEY_A:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.WEST, position.west());\n                break;\n            case Keyboard.KEYS.UP_ARROW:\n            case Keyboard.KEYS.KEY_W:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTH, position.north());\n                break;\n            case Keyboard.KEYS.RIGHT_ARROW:\n            case Keyboard.KEYS.KEY_D:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.EAST, position.east());\n                break;\n            case Keyboard.KEYS.DOWN_ARROW:\n            case Keyboard.KEYS.KEY_S:\n                this.__move(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTH, position.south());\n                break;\n        }\n    }\n    __handleCharacterRotate(key) {\n        switch (key) {\n            case Keyboard.KEYS.LEFT_ARROW:\n            case Keyboard.KEYS.KEY_A:\n                this.__setTurn(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.WEST);\n                break;\n            case Keyboard.KEYS.UP_ARROW:\n            case Keyboard.KEYS.KEY_W:\n                this.__setTurn(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTH);\n                break;\n            case Keyboard.KEYS.RIGHT_ARROW:\n            case Keyboard.KEYS.KEY_D:\n                this.__setTurn(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.EAST);\n                break;\n            case Keyboard.KEYS.DOWN_ARROW:\n            case Keyboard.KEYS.KEY_S:\n                this.__setTurn(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTH);\n                break;\n        }\n    }\n    __move(direction, position) {\n        if (!window.gameClient.networkManager.packetHandler.handlePlayerMove(position))\n            return;\n        window.gameClient.renderer.updateTileCache();\n        window.gameClient.interface.modalManager.close();\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.MovementPacket(direction));\n    }\n    __setTurn(direction) {\n        if (window.gameClient.player.getLookDirection() === direction)\n            return;\n        window.gameClient.player.setTurnBuffer(direction);\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.PlayerTurnPacket(direction));\n    }\n    __setChatOpacity(value) {\n        const wrapper = document.querySelector(\".chatbox-wrapper\");\n        if (wrapper)\n            wrapper.style.opacity = `${value}`;\n    }\n    __handleReturnKey() {\n        const modalManager = window.gameClient.interface.modalManager;\n        const input = window.gameClient.interface.channelManager;\n        if (!modalManager.isOpened() && !window.gameClient.isConnected()) {\n            modalManager.open(\"floater-enter\");\n            window.gameClient.interface.enterGame();\n            return;\n        }\n        if (modalManager.isOpened()) {\n            modalManager.handleConfirm();\n            return;\n        }\n        const chatInput = document.getElementById(\"chat-input\");\n        if (input.isDisabled()) {\n            input.toggleInputLock();\n            this.__setChatOpacity(1); // fully visible when active\n            return;\n        }\n        // Send message, then lock input again\n        input.handleMessageSend();\n        input.toggleInputLock();\n        this.__setChatOpacity(0.6); // fade out when not typing\n    }\n    __handleEscapeKey() {\n        if (window.gameClient.interface.modalManager.isOpened()) {\n            window.gameClient.interface.modalManager.close();\n        }\n        else if (window.gameClient.interface.menuManager.isOpened()) {\n            window.gameClient.interface.menuManager.close();\n        }\n        else if (window.gameClient.player && window.gameClient.player.hasTarget()) {\n            window.gameClient.player.setTarget(null);\n            window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.TargetPacket(0));\n        }\n        window.gameClient.world.pathfinder.setPathfindCache(null);\n    }\n    __handleKeyType(key) {\n        if (this.isShiftDown() && key === Keyboard.KEYS.UP_ARROW) {\n            window.gameClient.interface.channelManager.suggestPrevious();\n        }\n    }\n    __isConfigured(key) {\n        return Object.values(Keyboard.KEYS).includes(key);\n    }\n}\nKeyboard.KEYS = {\n    TAB: \"tab\",\n    ENTER: \"enter\",\n    SHIFT: \"shift\",\n    CONTROL: \"control\",\n    ESC: \"escape\",\n    SPACE: \" \",\n    KEYPAD_9: \"pageup\",\n    KEYPAD_3: \"pagedown\",\n    KEYPAD_1: \"end\",\n    KEYPAD_7: \"home\",\n    LEFT_ARROW: \"arrowleft\",\n    UP_ARROW: \"arrowup\",\n    RIGHT_ARROW: \"arrowright\",\n    DOWN_ARROW: \"arrowdown\",\n    // Alphabet\n    KEY_A: \"a\",\n    KEY_B: \"b\",\n    KEY_C: \"c\",\n    KEY_D: \"d\",\n    KEY_E: \"e\",\n    KEY_F: \"f\",\n    KEY_G: \"g\",\n    KEY_H: \"h\",\n    KEY_I: \"i\",\n    KEY_J: \"j\",\n    KEY_K: \"k\",\n    KEY_L: \"l\",\n    KEY_M: \"m\",\n    KEY_N: \"n\",\n    KEY_O: \"o\",\n    KEY_P: \"p\",\n    KEY_Q: \"q\",\n    KEY_R: \"r\",\n    KEY_S: \"s\",\n    KEY_T: \"t\",\n    KEY_U: \"u\",\n    KEY_V: \"v\",\n    KEY_W: \"w\",\n    KEY_X: \"x\",\n    KEY_Y: \"y\",\n    KEY_Z: \"z\",\n    // Function keys\n    F1: \"f1\",\n    F2: \"f2\",\n    F3: \"f3\",\n    F4: \"f4\",\n    F5: \"f5\",\n    F6: \"f6\",\n    F7: \"f7\",\n    F8: \"f8\",\n    F9: \"f9\",\n    F10: \"f10\",\n    F11: \"f11\",\n    F12: \"f12\",\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Keyboard);\n\n\n//# sourceURL=webpack:///./client/src/keyboard.ts?");

/***/ }),

/***/ "./client/src/light-canvas.ts":
/*!************************************!*\
  !*** ./client/src/light-canvas.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LightCanvas)\n/* harmony export */ });\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _rgba__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rgba */ \"./client/src/rgba.ts\");\n\n\nclass LightCanvas extends _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id, width, height) {\n        super(id, width, height);\n        // Darkness is black.\n        this.DARKNESS = new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0, 0, 255);\n        this.__ambientColor = new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0, 0, 0);\n        this.__ambientColorTarget = new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0, 0, 0);\n        this.__ambientColorStart = new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0, 0, 0);\n        this.__counter = 0;\n        this.__steps = 0;\n    }\n    setAmbientColor(r, g, b, a) {\n        // Store the start and target of the transition.\n        this.__ambientColorTarget = new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](r, g, b, a);\n        this.__ambientColorStart = this.__ambientColor.copy();\n        // Determine the length of transition (number of ticks to go from color one to another).\n        const f1 = Math.abs(this.__ambientColorStart.r - this.__ambientColorTarget.r);\n        const f2 = Math.abs(this.__ambientColorStart.g - this.__ambientColorTarget.g);\n        const f3 = Math.abs(this.__ambientColorStart.b - this.__ambientColorTarget.b);\n        const f4 = Math.abs(this.__ambientColorStart.a - this.__ambientColorTarget.a);\n        // Reset the state.\n        this.__steps = 2 * Math.max(f1, f2, f3, f4);\n        this.__counter = this.__steps;\n    }\n    getNightSine() {\n        // Read the world time from the clock.\n        const unix = window.gameClient.world.clock.getUnix();\n        // Calculate the sine with an 1/8th PI offset.\n        return Math.sin(0.25 * Math.PI + (2 * Math.PI * unix) / (24 * 60 * 60 * 1000));\n    }\n    getDarknessFraction() {\n        // Simulate the day & night cycle.\n        let fraction = 0.5 * (this.getNightSine() + 1);\n        // Underground is always in full darkness.\n        if (window.gameClient.player.isUnderground()) {\n            fraction = 1;\n        }\n        return fraction;\n    }\n    getInterpolationFraction() {\n        return (this.__counter - 1) / this.__steps;\n    }\n    setup() {\n        // Clear lightscreen and create ambient color.\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.context.globalCompositeOperation = \"source-over\";\n        // If we are still interpolating.\n        if (this.__counter > 0) {\n            this.__ambientColor = this.__ambientColorTarget.interpolate(this.__ambientColorStart, this.getInterpolationFraction());\n            this.__counter--;\n        }\n        // Interpolate with complete darkness to simulate night.\n        const color = this.__ambientColor.interpolate(this.DARKNESS, this.getDarknessFraction());\n        this.context.fillStyle = color.toString();\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        // Get ready to XOR light bubbles.\n        this.context.globalCompositeOperation = \"xor\";\n    }\n    getGradient(x, y, size, color) {\n        // Make the density depend on the night fraction.\n        const intensity = 0.5 * this.getDarknessFraction();\n        // Invalid input.\n        if (color < 0 || color >= 216) {\n            return null;\n        }\n        // In Tibia color information, each channel has 6 colors scaled from 0 to 255.\n        const r = 51 * (Math.floor(color / 36) % 6);\n        const g = 51 * (Math.floor(color / 6) % 6);\n        const b = 51 * (color % 6);\n        // Create a radial gradient.\n        const radgrad = this.context.createRadialGradient(x, y, 0, x, y, size);\n        // Quadratic scaling of intensity.\n        const a1 = Math.floor(0xff * intensity);\n        const a2 = Math.floor(a1 * 0.5);\n        const a3 = Math.floor(a2 * 0.5);\n        const a4 = Math.floor(a3 * 0.5);\n        // Add color stops to the radial gradient.\n        radgrad.addColorStop(0.00, new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](r, g, b, a1).toString());\n        radgrad.addColorStop(0.25, new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](r, g, b, a2).toString());\n        radgrad.addColorStop(0.50, new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](r, g, b, a3).toString());\n        radgrad.addColorStop(0.75, new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](r, g, b, a4).toString());\n        radgrad.addColorStop(1.00, new _rgba__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0, 0, 0).toString());\n        return radgrad;\n    }\n    renderLightBubble(x, y, size, colorByte) {\n        // Scale to the gamescreen.\n        x = 32 * x + 32;\n        y = 32 * y + 32;\n        size *= 32;\n        const gradient = this.getGradient(x, y, size, colorByte);\n        if (gradient === null) {\n            return;\n        }\n        // Create the circle on the canvas.\n        this.context.beginPath();\n        this.context.fillStyle = gradient;\n        this.context.arc(x, y, size, 0, 2 * Math.PI, false);\n        this.context.fill();\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/light-canvas.ts?");

/***/ }),

/***/ "./client/src/local-channel.ts":
/*!*************************************!*\
  !*** ./client/src/local-channel.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LocalChannel)\n/* harmony export */ });\n/* harmony import */ var _channel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel */ \"./client/src/channel.ts\");\n\nclass LocalChannel extends _channel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(name) {\n        super(name, null);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/local-channel.ts?");

/***/ }),

/***/ "./client/src/menu-chat-body.ts":
/*!**************************************!*\
  !*** ./client/src/menu-chat-body.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChatBodyMenu)\n/* harmony export */ });\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ \"./client/src/menu.ts\");\n\nclass ChatBodyMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.click = (event) => {\n            const target = event.target;\n            const action = target.getAttribute(\"action\");\n            switch (action) {\n                case \"clear\":\n                    return window.gameClient.interface.channelManager.clearCurrentChannel();\n                default:\n                    break;\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-chat-body.ts?");

/***/ }),

/***/ "./client/src/menu-chat-header.ts":
/*!****************************************!*\
  !*** ./client/src/menu-chat-header.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChatHeaderMenu)\n/* harmony export */ });\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ \"./client/src/menu.ts\");\n\nclass ChatHeaderMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.click = (event) => {\n            const target = event.target;\n            const action = target.getAttribute(\"action\");\n            switch (action) {\n                case \"close\":\n                    if (this.downEvent) {\n                        // Cast downEvent to MouseEvent to access its target.\n                        const downTarget = this.downEvent.target;\n                        return this.closeChannel(downTarget);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n    }\n    closeChannel(target) {\n        // Get the channel identifier from the target element's first child.\n        const index = target.children[0].innerHTML;\n        // Retrieve the channel by index and then close it.\n        const channel = window.gameClient.interface.channelManager.getChannel(index);\n        if (channel) {\n            window.gameClient.interface.channelManager.closeChannel(channel);\n        }\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-chat-header.ts?");

/***/ }),

/***/ "./client/src/menu-friend-list.ts":
/*!****************************************!*\
  !*** ./client/src/menu-friend-list.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FriendListMenu)\n/* harmony export */ });\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ \"./client/src/menu.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n\n\nclass FriendListMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.click = (event) => {\n            const target = event.target;\n            const action = target.getAttribute(\"action\");\n            switch (action) {\n                case \"remove\":\n                    if (this.downEvent) {\n                        // Cast downEvent to MouseEvent to access its target.\n                        const downTarget = this.downEvent.target;\n                        return this.removeFriend(downTarget);\n                    }\n                    break;\n                case \"note\":\n                    window.gameClient.interface.setCancelMessage(\"Not implemented.\");\n                    return true;\n                default:\n                    break;\n            }\n        };\n    }\n    removeFriend(target) {\n        const friend = target.getAttribute(\"friend\");\n        if (friend === null) {\n            return false;\n        }\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.FriendRemovePacket(friend));\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-friend-list.ts?");

/***/ }),

/***/ "./client/src/menu-friend-window.ts":
/*!******************************************!*\
  !*** ./client/src/menu-friend-window.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FriendWindowMenu)\n/* harmony export */ });\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ \"./client/src/menu.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n\n // Adjust the import as needed\nclass FriendWindowMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.click = (event) => {\n            const target = event.target;\n            const action = target.getAttribute(\"action\");\n            switch (action) {\n                case \"add\":\n                    return this.openInputModal();\n                case \"sort-reversed\":\n                    return window.gameClient.player.friendlist.sortBy(\"reversed\");\n                case \"sort-normal\":\n                    return window.gameClient.player.friendlist.sortBy(\"normal\");\n                case \"hide-offline\":\n                    return this.hideOffline(target);\n                default:\n                    break;\n            }\n        };\n    }\n    hideOffline(target) {\n        if (target.innerHTML === \"Hide Offline\") {\n            target.innerHTML = \"Show Offline\";\n        }\n        else {\n            target.innerHTML = \"Hide Offline\";\n        }\n        window.gameClient.player.friendlist.toggleShowOffline();\n    }\n    openInputModal() {\n        // Pass a dummy MouseEvent if needed (adjust as appropriate)\n        const modal = window.gameClient.interface.modalManager.open(\"enter-name-modal\", new MouseEvent(\"click\"));\n        if (modal === null) {\n            return;\n        }\n        // Bind the instance method so that `this` refers to the FriendWindowMenu instance.\n        // TODO: \n        //return modal.setConfirmCallback(this.addFriend.bind(this));\n    }\n    addFriend(friend) {\n        if (friend === null || friend === \"\") {\n            return;\n        }\n        if (window.gameClient.player.friendlist.has(friend)) {\n            return window.gameClient.interface.setCancelMessage(\"This friend is already in your friendlist.\");\n        }\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.FriendAddPacket(friend));\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-friend-window.ts?");

/***/ }),

/***/ "./client/src/menu-hotbar.ts":
/*!***********************************!*\
  !*** ./client/src/menu-hotbar.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HotbarMenu)\n/* harmony export */ });\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ \"./client/src/menu.ts\");\n\nclass HotbarMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.click = (event) => {\n            if (!this.downEvent)\n                return false;\n            // Get the index of the element that was the target of the downEvent\n            const downTarget = this.downEvent.target;\n            if (!downTarget.parentNode)\n                return false;\n            const childrenArray = Array.from(downTarget.parentNode.children);\n            const index = childrenArray.indexOf(downTarget);\n            const target = event.target;\n            const action = target.getAttribute(\"action\");\n            switch (action) {\n                case \"add\":\n                    // Here we assume that the modal manager's open method can accept a number as second parameter.\n                    window.gameClient.interface.modalManager.open(\"spellbook-modal\", index);\n                    break;\n                case \"remove\":\n                    window.gameClient.interface.hotbarManager.clearSlot(index);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this.__index = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-hotbar.ts?");

/***/ }),

/***/ "./client/src/menu-manager.ts":
/*!************************************!*\
  !*** ./client/src/menu-manager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MenuManager)\n/* harmony export */ });\n/* harmony import */ var _menu_chat_body__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu-chat-body */ \"./client/src/menu-chat-body.ts\");\n/* harmony import */ var _menu_chat_header__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menu-chat-header */ \"./client/src/menu-chat-header.ts\");\n/* harmony import */ var _menu_friend_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./menu-friend-list */ \"./client/src/menu-friend-list.ts\");\n/* harmony import */ var _menu_friend_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./menu-friend-window */ \"./client/src/menu-friend-window.ts\");\n/* harmony import */ var _menu_hotbar__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menu-hotbar */ \"./client/src/menu-hotbar.ts\");\n/* harmony import */ var _menu_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./menu-message */ \"./client/src/menu-message.ts\");\n/* harmony import */ var _menu_screen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./menu-screen */ \"./client/src/menu-screen.ts\");\n\n\n\n\n\n\n\nclass MenuManager {\n    ;\n    constructor() {\n        // Register the configured menus.\n        this.menus = {\n            \"screen-menu\": new _menu_screen__WEBPACK_IMPORTED_MODULE_6__[\"default\"](\"screen-menu\"),\n            \"chat-header-menu\": new _menu_chat_header__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"chat-header-menu\"),\n            \"chat-entry-menu\": new _menu_message__WEBPACK_IMPORTED_MODULE_5__[\"default\"](\"chat-entry-menu\"),\n            \"chat-body-menu\": new _menu_chat_body__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"chat-body-menu\"),\n            \"friend-list-menu\": new _menu_friend_list__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"friend-list-menu\"),\n            \"friend-window-menu\": new _menu_friend_window__WEBPACK_IMPORTED_MODULE_3__[\"default\"](\"friend-window-menu\"),\n            \"hotbar-menu\": new _menu_hotbar__WEBPACK_IMPORTED_MODULE_4__[\"default\"](\"hotbar-menu\"),\n        };\n        // Reference the currently active open menu.\n        this.__activeMenu = null;\n    }\n    getMenu(name) {\n        if (!this.menus.hasOwnProperty(name)) {\n            return null;\n        }\n        return this.menus[name];\n    }\n    open(name, event) {\n        const menuElement = this.getMenu(name);\n        if (menuElement === null) {\n            return console.error(`Cannot open menu ${name} because the menu has not been registered.`);\n        }\n        if (this.isOpened()) {\n            return console.error(`Cannot open menu ${name} because another menu is already opened.`);\n        }\n        this.__activeMenu = menuElement.open(event);\n    }\n    isOpened() {\n        return this.__activeMenu !== null;\n    }\n    close() {\n        if (!this.isOpened()) {\n            return;\n        }\n        this.__activeMenu.close();\n        this.__activeMenu = null;\n        this.__defocus();\n    }\n    __defocus() {\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-manager.ts?");

/***/ }),

/***/ "./client/src/menu-message.ts":
/*!************************************!*\
  !*** ./client/src/menu-message.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MessageMenu)\n/* harmony export */ });\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ \"./client/src/menu.ts\");\n\nclass MessageMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.click = (event) => {\n            const target = event.target;\n            const action = target.getAttribute(\"action\");\n            switch (action) {\n                case \"whisper\":\n                    if (this.downEvent) {\n                        // Cast downEvent to MouseEvent to access its target.\n                        const downTarget = this.downEvent.target;\n                        return this.whisper(downTarget);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        };\n    }\n    whisper(target) {\n        const name = target.getAttribute(\"name\");\n        if (name === null) {\n            return false;\n        }\n        window.gameClient.interface.channelManager.addPrivateChannel(name);\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-message.ts?");

/***/ }),

/***/ "./client/src/menu-screen.ts":
/*!***********************************!*\
  !*** ./client/src/menu-screen.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ScreenMenu)\n/* harmony export */ });\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu */ \"./client/src/menu.ts\");\n\nclass ScreenMenu extends _menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    ;\n    constructor(id) {\n        super(id);\n        /**\n         * Callback fired specially for the ScreenMenu after a button is clicked.\n         */\n        this.click = (event) => {\n            // Get the selected world object from the stored downEvent (assumed to be a MouseEvent)\n            const object = window.gameClient.mouse.getWorldObject(this.downEvent);\n            const action = this.__getAction(event);\n            switch (action) {\n                case \"look\":\n                    window.gameClient.mouse.look(object);\n                    break;\n                case \"use\":\n                    window.gameClient.mouse.use(object);\n                    break;\n                case \"outfits\":\n                    window.gameClient.interface.modalManager.open(\"outfit-modal\", event);\n                    break;\n            }\n            this.close(); // Explicitly close the menu.\n        };\n    }\n    /**\n     * Dynamically adds a new button to the menu if it doesn't already exist.\n     * @param action - The action identifier for the button.\n     * @param label - The text displayed on the button.\n     */\n    addOption(action, label) {\n        if (this.element.querySelector(`button[action=\"${action}\"]`)) {\n            return; // Do not add the button if it already exists.\n        }\n        const button = document.createElement(\"button\");\n        button.setAttribute(\"action\", action);\n        button.textContent = label;\n        button.classList.add(\"dynamic-option\");\n        button.addEventListener(\"click\", (event) => this.click(event));\n        this.element.appendChild(button);\n    }\n    /**\n     * Removes all dynamically added buttons from the menu.\n     */\n    removeDynamicOptions() {\n        const dynamicButtons = this.element.querySelectorAll(\".dynamic-option\");\n        dynamicButtons.forEach(button => button.remove());\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu-screen.ts?");

/***/ }),

/***/ "./client/src/menu.ts":
/*!****************************!*\
  !*** ./client/src/menu.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Menu)\n/* harmony export */ });\nclass Menu {\n    constructor(id) {\n        // Default \"click\" callback: subclasses should override this.\n        this.click = () => { };\n        const elem = document.getElementById(id);\n        if (!elem) {\n            throw new Error(`Element with id \"${id}\" not found.`);\n        }\n        this.element = elem;\n        this.downEvent = null;\n        this.__addEventListeners();\n    }\n    __addEventListeners() {\n        // Get all button elements within the menu.\n        const buttons = Array.from(this.element.getElementsByTagName(\"button\"));\n        buttons.forEach((button) => {\n            button.addEventListener(\"click\", this.buttonClose.bind(this));\n        });\n    }\n    __getAction(event) {\n        const target = event.target;\n        return target.getAttribute(\"action\");\n    }\n    open(event) {\n        this.element.style.display = \"block\";\n        this.updateElementPosition(event);\n        this.downEvent = event;\n        return this;\n    }\n    updateElementPosition(event) {\n        // Cast the event to MouseEvent to access pageX/pageY.\n        const mouseEvent = event;\n        const bodyWidth = document.body.offsetWidth;\n        const bodyHeight = document.body.offsetHeight;\n        const elemWidth = this.element.offsetWidth;\n        const elemHeight = this.element.offsetHeight;\n        const left = Math.min(bodyWidth - elemWidth, Math.floor(mouseEvent.pageX));\n        const top = Math.min(bodyHeight - elemHeight, Math.floor(mouseEvent.pageY));\n        this.element.style.left = `${left}px`;\n        this.element.style.top = `${top}px`;\n    }\n    close() {\n        this.element.style.display = \"none\";\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n        }\n    }\n    buttonClose(event) {\n        // If the click callback returns a truthy value, close the menu.\n        if (this.click(event)) {\n            this.close();\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/menu.ts?");

/***/ }),

/***/ "./client/src/message-character.ts":
/*!*****************************************!*\
  !*** ./client/src/message-character.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CharacterMessage)\n/* harmony export */ });\n/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./message */ \"./client/src/message.ts\");\n\nclass CharacterMessage extends _message__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(message, type, name, color) {\n        super(message, color);\n        this.name = name;\n        this.type = type;\n        this.color = window.gameClient.interface.getHexColor(color);\n    }\n    /**\n     * Formats the message using the inherited __formatTime method.\n     */\n    format() {\n        // Assuming __formatTime is defined in the base Message class.\n        return `${this.__formatTime()} ${this.name}: ${this.message}`;\n    }\n    /**\n     * Creates a DOM node representing the message.\n     */\n    createNode() {\n        const span = document.createElement(\"span\");\n        span.className = \"chat-message\";\n        span.style.color = this.color;\n        span.innerHTML = this.format();\n        if (this.type === 0) {\n            span.setAttribute(\"name\", this.name);\n        }\n        return span;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/message-character.ts?");

/***/ }),

/***/ "./client/src/message.ts":
/*!*******************************!*\
  !*** ./client/src/message.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Message)\n/* harmony export */ });\nclass Message {\n    constructor(message, color) {\n        this.message = message;\n        this.color = window.gameClient.interface.getHexColor(color);\n        this.__time = new Date();\n    }\n    /**\n     * Formats the message for display.\n     */\n    format() {\n        return `${this.__formatTime()}: ${this.message}`;\n    }\n    /**\n     * Creates the DOM node representing the message.\n     */\n    createNode() {\n        const span = document.createElement(\"span\");\n        span.className = \"chat-message\";\n        span.style.color = this.color;\n        span.innerHTML = this.format();\n        return span;\n    }\n    /**\n     * Returns the formatted minute (with leading zero).\n     */\n    __formatMinute() {\n        return (\"00\" + this.__time.getMinutes()).slice(-2);\n    }\n    /**\n     * Returns the formatted hour (with leading zero).\n     */\n    __formatHour() {\n        return (\"0\" + this.__time.getHours()).slice(-2);\n    }\n    /**\n     * Returns the formatted time as \"HH:MM\".\n     */\n    __formatTime() {\n        return `${this.__formatHour()}:${this.__formatMinute()}`;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/message.ts?");

/***/ }),

/***/ "./client/src/modal-chat.ts":
/*!**********************************!*\
  !*** ./client/src/modal-chat.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChatModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n\nclass ChatModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.handleConfirm = () => {\n            const channel = this.__getSelectedDefaultChannel();\n            if (channel.selectedIndex === -1) {\n                return this.__handleOpenPrivateChannel();\n            }\n            const row = channel.options[channel.selectedIndex];\n            const type = row.getAttribute(\"channelType\");\n            const idAttr = row.getAttribute(\"channelId\");\n            if (type === \"local\") {\n                window.gameClient.interface.channelManager.addLocalChannel(idAttr);\n            }\n            else {\n                window.gameClient.interface.channelManager.joinChannel(Number(idAttr), channel.value);\n            }\n            return true;\n        };\n        const privateInput = document.getElementById(\"open-private-channel-input\");\n        if (privateInput) {\n            privateInput.addEventListener(\"focus\", this.__handleFocus.bind(this));\n        }\n        const channelSelect = document.getElementById(\"channel-select\");\n        if (channelSelect) {\n            channelSelect.ondblclick = this.__handleDoubleClick.bind(this);\n        }\n    }\n    __handleDoubleClick() {\n        // Simulate a confirm click by calling the inherited __buttonClick method.\n        const confirmButton = this.element.querySelector(\"button[action='confirm']\");\n        if (confirmButton) {\n            // Assuming __buttonClick is defined as a protected method in Modal.\n            this.__buttonClick({ target: confirmButton });\n        }\n    }\n    __getSelectedDefaultChannel() {\n        return document.getElementById(\"channel-select\");\n    }\n    __handleOpenPrivateChannel() {\n        const input = document.getElementById(\"open-private-channel-input\");\n        const playerName = input.value.trim();\n        window.gameClient.interface.channelManager.addPrivateChannel(playerName);\n        return true;\n    }\n    __handleFocus() {\n        const channelSelect = document.getElementById(\"channel-select\");\n        if (channelSelect) {\n            channelSelect.selectedIndex = -1;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-chat.ts?");

/***/ }),

/***/ "./client/src/modal-confirm.ts":
/*!*************************************!*\
  !*** ./client/src/modal-confirm.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ConfirmModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n\nclass ConfirmModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        /**\n         * Sets the confirm callback to be executed when confirm is pressed.\n         * @param callback - The callback function.\n         */\n        // Override handleOpen as a property that accepts a callback.\n        this.handleOpen = (callback) => {\n            this.__confirmCallback = callback;\n        };\n        // Override handleConfirm as a property to match the base class.\n        this.handleConfirm = () => {\n            this.__confirmCallback();\n            // Reset the callback to a no-op function.\n            this.__confirmCallback = () => { };\n            return true;\n        };\n        this.__confirmCallback = () => { };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-confirm.ts?");

/***/ }),

/***/ "./client/src/modal-create-account.ts":
/*!********************************************!*\
  !*** ./client/src/modal-create-account.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CreateAccountModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n\nclass CreateAccountModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    ;\n    constructor(id) {\n        super(id);\n        this.handleConfirm = () => {\n            const accountInput = document.getElementById(\"create-username\");\n            const passwordInput = document.getElementById(\"create-password\");\n            const nameInput = document.getElementById(\"create-name\");\n            const sexInput = document.getElementById(\"create-sex\");\n            const options = {\n                account: accountInput.value,\n                password: passwordInput.value,\n                name: nameInput.value.toLowerCase(),\n                sex: sexInput.value,\n            };\n            if (!this.__isValidSubmission(options)) {\n                return false;\n            }\n            window.gameClient.networkManager.createAccount(options);\n            return true;\n        };\n    }\n    __isValidSubmission(options) {\n        // Clear any previous error styling.\n        document.getElementById(\"create-username\").style.border = \"\";\n        document.getElementById(\"create-password\").style.border = \"\";\n        document.getElementById(\"create-name\").style.border = \"\";\n        document.getElementById(\"create-sex\").style.border = \"\";\n        if (options.account === \"\" || options.password === \"\" || options.name === \"\") {\n            return false;\n        }\n        if (options.sex !== \"male\" && options.sex !== \"female\") {\n            return false;\n        }\n        if (options.account.length < 6) {\n            document.getElementById(\"create-username\").style.border = \"1px solid red\";\n            return false;\n        }\n        if (options.password.length < 6) {\n            document.getElementById(\"create-password\").style.border = \"1px solid red\";\n            return false;\n        }\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-create-account.ts?");

/***/ }),

/***/ "./client/src/modal-enter-name.ts":
/*!****************************************!*\
  !*** ./client/src/modal-enter-name.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EnterNameModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n\nclass EnterNameModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    ;\n    constructor(id) {\n        super(id);\n        this.handleOpen = () => {\n            // Focus on the input with id \"enter-name\".\n            const input = document.getElementById(\"enter-name\");\n            input === null || input === void 0 ? void 0 : input.focus();\n        };\n        this.handleConfirm = () => {\n            // Retrieve the name from the input element.\n            const input = document.getElementById(\"enter-name\");\n            const name = input ? input.value : \"\";\n            // Execute the callback and then reset it.\n            this.__confirmCallback(name);\n            this.__confirmCallback = () => { };\n            return true;\n        };\n        this.__confirmCallback = () => { };\n    }\n    /**\n     * Sets a callback to be executed when the modal is confirmed.\n     */\n    setConfirmCallback(callback) {\n        this.__confirmCallback = callback;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-enter-name.ts?");

/***/ }),

/***/ "./client/src/modal-manager.ts":
/*!*************************************!*\
  !*** ./client/src/modal-manager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ModalManager)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n/* harmony import */ var _modal_outfit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal-outfit */ \"./client/src/modal-outfit.ts\");\n/* harmony import */ var _modal_move_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modal-move-item */ \"./client/src/modal-move-item.ts\");\n/* harmony import */ var _modal_chat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modal-chat */ \"./client/src/modal-chat.ts\");\n/* harmony import */ var _modal_enter_name__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modal-enter-name */ \"./client/src/modal-enter-name.ts\");\n/* harmony import */ var _modal_confirm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modal-confirm */ \"./client/src/modal-confirm.ts\");\n/* harmony import */ var _modal_text__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modal-text */ \"./client/src/modal-text.ts\");\n/* harmony import */ var _modal_create_account__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modal-create-account */ \"./client/src/modal-create-account.ts\");\n/* harmony import */ var _modal_readable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modal-readable */ \"./client/src/modal-readable.ts\");\n/* harmony import */ var _modal_offer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modal-offer */ \"./client/src/modal-offer.ts\");\n/* harmony import */ var _modal_map__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modal-map */ \"./client/src/modal-map.ts\");\n/* harmony import */ var _modal_spellbook__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modal-spellbook */ \"./client/src/modal-spellbook.ts\");\n/* harmony import */ var _modal_skills__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modal-skills */ \"./client/src/modal-skills.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nclass ModalManager {\n    constructor() {\n        this.__openedModal = null;\n        this.__modals = {};\n        // Register all the modals.\n        this.register(_modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"information-modal\");\n        this.register(_modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"settings-modal\");\n        this.register(_modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"settings-box\");\n        this.register(_modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"floater-enter\");\n        this.register(_modal_skills__WEBPACK_IMPORTED_MODULE_12__[\"default\"], \"skill-modal\");\n        this.register(_modal_outfit__WEBPACK_IMPORTED_MODULE_1__[\"default\"], \"outfit-modal\");\n        this.register(_modal_move_item__WEBPACK_IMPORTED_MODULE_2__[\"default\"], \"move-item-modal\");\n        this.register(_modal_chat__WEBPACK_IMPORTED_MODULE_3__[\"default\"], \"chat-modal\");\n        this.register(_modal_enter_name__WEBPACK_IMPORTED_MODULE_4__[\"default\"], \"enter-name-modal\");\n        this.register(_modal_confirm__WEBPACK_IMPORTED_MODULE_5__[\"default\"], \"confirm-modal\");\n        this.register(_modal_text__WEBPACK_IMPORTED_MODULE_6__[\"default\"], \"floater-connecting\");\n        this.register(_modal_create_account__WEBPACK_IMPORTED_MODULE_7__[\"default\"], \"floater-create\");\n        this.register(_modal_readable__WEBPACK_IMPORTED_MODULE_8__[\"default\"], \"readable-modal\");\n        this.register(_modal_offer__WEBPACK_IMPORTED_MODULE_9__[\"default\"], \"offer-modal\");\n        this.register(_modal_map__WEBPACK_IMPORTED_MODULE_10__[\"default\"], \"map-modal\");\n        this.register(_modal_spellbook__WEBPACK_IMPORTED_MODULE_11__[\"default\"], \"spellbook-modal\");\n        this.__addEventListeners();\n    }\n    __addEventListeners() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        (_a = document.getElementById(\"open-chat-modal\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", this.open.bind(this, \"chat-modal\"));\n        (_b = document.getElementById(\"openOutfit\")) === null || _b === void 0 ? void 0 : _b.addEventListener(\"click\", this.open.bind(this, \"outfit-modal\"));\n        (_c = document.getElementById(\"openSettings\")) === null || _c === void 0 ? void 0 : _c.addEventListener(\"click\", this.open.bind(this, \"settings-modal\"));\n        (_d = document.getElementById(\"information\")) === null || _d === void 0 ? void 0 : _d.addEventListener(\"click\", this.open.bind(this, \"information-modal\"));\n        (_e = document.getElementById(\"login-info\")) === null || _e === void 0 ? void 0 : _e.addEventListener(\"click\", this.open.bind(this, \"floater-enter\"));\n        (_f = document.getElementById(\"create-account\")) === null || _f === void 0 ? void 0 : _f.addEventListener(\"click\", this.open.bind(this, \"floater-create\"));\n        (_g = document.getElementById(\"settings\")) === null || _g === void 0 ? void 0 : _g.addEventListener(\"click\", this.open.bind(this, \"settings-box\"));\n        (_h = document.getElementById(\"openSkills\")) === null || _h === void 0 ? void 0 : _h.addEventListener(\"click\", this.open.bind(this, \"skill-modal\"));\n        Array.from(document.querySelectorAll(\".modal-header\")).forEach(header => {\n            header.addEventListener(\"mousedown\", this.__handleHeaderMouseDown.bind(this));\n        });\n    }\n    /**\n     * Handles dragging of modal windows. The event listener is attached to modal header elements.\n     */\n    __handleHeaderMouseDown(event) {\n        event.preventDefault();\n    }\n    /**\n     * Registers a modal class with a given identifier.\n     */\n    register(ModalClass, id) {\n        if (this.__modals.hasOwnProperty(id)) {\n            console.error(\"A modal with identifier \" + id + \" already exists.\");\n            return;\n        }\n        let instance;\n        // ModalClass.length gives the number of expected parameters.\n        if (ModalClass.length === 1) {\n            instance = new ModalClass(id);\n        }\n        else {\n            instance = new ModalClass(id);\n        }\n        this.__modals[id] = instance;\n    }\n    /**\n     * Delegates the confirm action to the currently opened modal.\n     */\n    handleConfirm() {\n        if (!this.isOpened())\n            return;\n        this.__openedModal.handleConfirm();\n        this.close();\n    }\n    /**\n     * Closes the currently opened modal.\n     */\n    close() {\n        if (!this.isOpened())\n            return;\n        this.__openedModal.element.style.display = \"none\";\n        this.__openedModal = null;\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n        }\n    }\n    /**\n     * Renders the currently opened modal.\n     */\n    render() {\n        if (!this.isOpened())\n            return;\n        this.__openedModal.handleRender();\n    }\n    /**\n     * Returns the modal registered with the given identifier, or null if not found.\n     */\n    get(id) {\n        return this.__modals.hasOwnProperty(id) ? this.__modals[id] : null;\n    }\n    /**\n     * Returns true if a modal is currently opened.\n     */\n    isOpened() {\n        return this.__openedModal !== null;\n    }\n    /**\n     * Opens the modal with the given identifier and passes optional options to it.\n     */\n    open(id, options) {\n        var _a;\n        // If the modal is already opened and it's the same one, close it (toggle off)\n        if (this.isOpened() && ((_a = this.__openedModal) === null || _a === void 0 ? void 0 : _a.id) === id) {\n            this.close();\n            return null;\n        }\n        // If another modal is opened, close it first\n        if (this.isOpened()) {\n            this.close();\n        }\n        // Open the requested modal\n        if (!this.__modals.hasOwnProperty(id)) {\n            return null;\n        }\n        this.__openedModal = this.get(id);\n        this.__openedModal.show();\n        this.__openedModal.handleOpen(options);\n        return this.__openedModal;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-manager.ts?");

/***/ }),

/***/ "./client/src/modal-map.ts":
/*!*********************************!*\
  !*** ./client/src/modal-map.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MapModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n\n\n\nclass MapModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.handleOpen = () => {\n            // When the modal is opened, center it on the player's current position.\n            this.__center = window.gameClient.player.getPosition().copy();\n            this.draw();\n        };\n        this.canvas = new _canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"map-modal-canvas\", 256, 256);\n        const spanElem = document.querySelector(\".map-modal-wrapper > span\");\n        if (!spanElem) {\n            throw new Error(\"Span element not found.\");\n        }\n        this.span = spanElem;\n        // Attach event listeners for scrolling and moving the map.\n        this.canvas.canvas.addEventListener(\"mousedown\", this.__attachMove.bind(this));\n        this.canvas.canvas.addEventListener(\"wheel\", this.__handleScroll.bind(this));\n        document.addEventListener(\"mouseup\", this.__removeMove.bind(this));\n        // Use Position.NULL if available; otherwise, default to (0,0,0).\n        this.__center = _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NULL || new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](0, 0, 0);\n        this.__mouseDownPosition = _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NULL || new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](0, 0, 0);\n        this.__boundMoveCallback = this.__handleMove.bind(this);\n        this.__zoomLevel = 0;\n    }\n    __removeMove() {\n        this.canvas.canvas.removeEventListener(\"mousemove\", this.__boundMoveCallback);\n    }\n    __handleScroll(event) {\n        if (event.deltaY < 0) {\n            this.__changeZoomLevel(1);\n        }\n        else {\n            this.__changeZoomLevel(-1);\n        }\n    }\n    __changeZoomLevel(value) {\n        this.__zoomLevel += value;\n        this.__zoomLevel = Math.min(Math.max(0, this.__zoomLevel), 4);\n        this.draw();\n    }\n    __attachMove(event) {\n        this.__mouseDownPosition = this.canvas.getCanvasCoordinates(event);\n        this.canvas.canvas.addEventListener(\"mousemove\", this.__boundMoveCallback);\n    }\n    __handleMove(event) {\n        const coords = this.canvas.getCanvasCoordinates(event);\n        const x = coords.x;\n        const y = coords.y;\n        // Calculate difference from initial mouse down position.\n        const deltaX = this.__mouseDownPosition.x - x;\n        const deltaY = this.__mouseDownPosition.y - y;\n        let moveOffset = new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](deltaX, deltaY, 0);\n        // Adjust for zoom level.\n        moveOffset.x = Math.round(moveOffset.x * (1 / (this.__zoomLevel + 1)));\n        moveOffset.y = Math.round(moveOffset.y * (1 / (this.__zoomLevel + 1)));\n        // Update the center position.\n        this.__center = this.__center.add(moveOffset);\n        // Update the mouse down position to current coordinates.\n        this.__mouseDownPosition = this.canvas.getCanvasCoordinates(event);\n        this.draw();\n    }\n    draw() {\n        // Update the span with the current center position.\n        this.span.innerHTML = this.__center.toString();\n        const position = this.__center;\n        // Determine which chunks to load: a 5x5 grid around the player.\n        const chunkPositions = [];\n        for (let x = -2; x <= 2; x++) {\n            for (let y = -2; y <= 2; y++) {\n                chunkPositions.push(new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](position.x - x * 128, position.y - y * 128, position.z));\n            }\n        }\n        this.canvas.clear();\n        // Load visible chunks from the database.\n        window.gameClient.database.preloadCallback(chunkPositions, (chunks) => {\n            Object.entries(chunks).forEach(([id, chunk]) => {\n                const [x, y, z] = id.split(\".\").map(Number);\n                this.canvas.context.putImageData(chunk.imageData, x * 128 - position.x + 128, y * 128 - position.y + 128);\n            });\n        });\n        // Set the composite operation for zooming.\n        this.canvas.context.globalCompositeOperation = \"copy\";\n        // Apply zooming effect by repeatedly drawing the canvas.\n        for (let i = 0; i < this.__zoomLevel; i++) {\n            this.canvas.context.drawImage(this.canvas.canvas, 0, 0, 256, 256, -128, -128, 512, 512);\n        }\n        // Optionally, retrieve the player's position (unused here) and drop old map chunks.\n        const pos = window.gameClient.player.getPosition();\n        window.gameClient.database.dropWorldMapChunks(this.__center);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-map.ts?");

/***/ }),

/***/ "./client/src/modal-move-item.ts":
/*!***************************************!*\
  !*** ./client/src/modal-move-item.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MoveItemModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item */ \"./client/src/item.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n\n\n\n\nclass MoveItemModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.handleOpen = (properties) => {\n            var _a;\n            // Focus the slider element.\n            (_a = document.getElementById(\"item-amount\")) === null || _a === void 0 ? void 0 : _a.focus();\n            this.__properties = properties;\n            this.__count = properties.item.count;\n            // Set the slider's value and maximum based on the item's count.\n            this.__slider.value = this.__slider.max = String(this.__count);\n            this.__changeSelectedCount();\n        };\n        this.handleConfirm = () => {\n            // Write the move event to the server.\n            window.gameClient.mouse.sendItemMove(this.__properties.fromObject, this.__properties.toObject, this.__count);\n            // Returning true will close the modal.\n            return true;\n        };\n        // Create a canvas for the preview using the element with id \"move-count-sprite\"\n        this.__canvas = new _canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"move-count-sprite\", 32, 32);\n        // Get slider and output elements from the DOM.\n        const slider = document.getElementById(\"item-amount\");\n        if (!slider) {\n            throw new Error(\"Element with id 'item-amount' not found.\");\n        }\n        this.__slider = slider;\n        const output = document.getElementById(\"item-count\");\n        if (!output) {\n            throw new Error(\"Element with id 'item-count' not found.\");\n        }\n        this.__output = output;\n        // Bind the slider input event to update the selected count.\n        this.__slider.addEventListener(\"input\", this.__changeSelectedCount.bind(this));\n        // Initialize state properties.\n        this.__properties = null;\n        this.__count = null;\n    }\n    __redrawModal() {\n        // Update the output element with the current count.\n        this.__output.innerHTML = String(this.__count);\n        // Create a temporary fake item with the updated count.\n        const item = new _item__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.__properties.item.id, this.__count);\n        // Clear the canvas and redraw the sprite.\n        this.__canvas.clear();\n        this.__canvas.drawSprite(item, new _position__WEBPACK_IMPORTED_MODULE_3__[\"default\"](0, 0, 0), 32);\n    }\n    __changeSelectedCount() {\n        let amount = Number(this.__slider.value);\n        const max = Number(this.__slider.max);\n        // If the shift key is down, adjust the amount in steps of 10.\n        if (window.gameClient.keyboard.isShiftDown()) {\n            if (amount !== max) {\n                amount = Math.round(amount / 10) * 10;\n            }\n        }\n        // Clamp the amount between 1 and max.\n        this.__count = Math.min(Math.max(amount, 1), max);\n        // Redraw the modal elements.\n        this.__redrawModal();\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-move-item.ts?");

/***/ }),

/***/ "./client/src/modal-offer.ts":
/*!***********************************!*\
  !*** ./client/src/modal-offer.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OfferModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item */ \"./client/src/item.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n\n\n\n\n\nclass OfferModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // Internal state\n    ;\n    constructor(id) {\n        var _a, _b, _c;\n        super(id);\n        this.__selectedElement = null;\n        this.__selectedOffer = null;\n        this.__offerType = \"sell\";\n        this.__offers = null;\n        this.__id = null;\n        this.handleOpen = (properties) => {\n            // Retrieve the NPC from the game world.\n            const NPC = window.gameClient.world.getCreature(properties.id);\n            this.__id = properties.id;\n            this.__offers = properties.offers;\n            this.setOffers();\n            this.setTitle(`${NPC.name} Trade Offers`);\n            const wrapper = document.getElementById(\"buy-count-wrapper\");\n            if (wrapper) {\n                wrapper.style.display = \"none\";\n            }\n        };\n        this.handleConfirm = () => {\n            if (this.__selectedOffer === null) {\n                return false;\n            }\n            let count = Number(document.getElementById(\"buy-count\").value);\n            const wrapper = document.getElementById(\"buy-count-wrapper\");\n            if (wrapper && wrapper.style.display === \"none\") {\n                count = 1;\n            }\n            if (typeof this.__id === 'number') {\n                window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_4__.OfferBuyPacket(this.__id, this.__selectedOffer, count));\n            }\n            else {\n                console.error('Invalid ID type');\n            }\n            return false;\n        };\n        // Set up event listeners for offer type toggling and count changes.\n        (_a = document.getElementById(\"set-sell\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"click\", this.setOfferType.bind(this, \"sell\"));\n        (_b = document.getElementById(\"set-buy\")) === null || _b === void 0 ? void 0 : _b.addEventListener(\"click\", this.setOfferType.bind(this, \"buy\"));\n        (_c = document.getElementById(\"buy-count\")) === null || _c === void 0 ? void 0 : _c.addEventListener(\"input\", this.__handleChangeCount.bind(this));\n    }\n    __handleChangeCount(event) {\n        const input = event.target;\n        const offerCountElem = document.getElementById(\"offer-count\");\n        if (offerCountElem) {\n            offerCountElem.innerHTML = input.value;\n        }\n        this.handleChangeCount();\n    }\n    handleChangeCount() {\n        if (this.__offers === null || this.__selectedOffer === null)\n            return;\n        const offer = this.__offers[this.__selectedOffer];\n        const buyCountElem = document.getElementById(\"buy-count\");\n        let count = Number(buyCountElem.value);\n        const wrapper = document.getElementById(\"buy-count-wrapper\");\n        if (wrapper && wrapper.style.display === \"none\") {\n            count = 1;\n        }\n        const offerPriceElem = document.getElementById(\"offer-price\");\n        if (offerPriceElem) {\n            offerPriceElem.innerHTML = String(count * offer.price);\n        }\n        const offerCountDisplay = document.getElementById(\"offer-count\");\n        if (offerCountDisplay) {\n            offerCountDisplay.innerHTML = String(count);\n        }\n    }\n    setOfferType(which) {\n        // Update CSS classes for offer type tabs.\n        const sellTab = document.getElementById(\"set-sell\");\n        const buyTab = document.getElementById(\"set-buy\");\n        if (sellTab)\n            sellTab.className = \"offer-tab\";\n        if (buyTab)\n            buyTab.className = \"offer-tab\";\n        const selectedTab = document.getElementById(\"set-\" + which);\n        if (selectedTab) {\n            selectedTab.className += \" selected\";\n        }\n        // If already set, do nothing.\n        if (this.__offerType === which)\n            return;\n        this.__offerType = which;\n        this.setOffers();\n    }\n    setOffers() {\n        this.clear();\n        const offerDOM = this.element.querySelector(\".offers\");\n        if (!offerDOM)\n            return;\n        offerDOM.innerHTML = \"\";\n        const filtered = this.__offers ? this.__offers.filter(this.matchOfferType.bind(this)) : [];\n        if (filtered.length === 0) {\n            offerDOM.innerHTML = \"No \" + this.__offerType + \" offers to display.\";\n            return;\n        }\n        filtered\n            .map((offer, index) => this.createOfferNode(offer, index))\n            .forEach((node) => offerDOM.appendChild(node));\n    }\n    matchOfferType(offer) {\n        return offer.type === this.__offerType;\n    }\n    createOfferNode(offer, index) {\n        const canvasInstance = new _canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"](null, 32, 32);\n        canvasInstance.canvas.className = \"slot\";\n        // Draw the item's sprite on the canvas. We assume Position.prototype.NULL is equivalent to a default position.\n        canvasInstance.drawSprite(new _item__WEBPACK_IMPORTED_MODULE_2__[\"default\"](offer.id, offer.count), new _position__WEBPACK_IMPORTED_MODULE_3__[\"default\"](0, 0, 0), 32);\n        canvasInstance.canvas.addEventListener(\"click\", this.handleSelectOffer.bind(this, canvasInstance, offer, index));\n        return canvasInstance.canvas;\n    }\n    clear() {\n        const offerNameElem = document.getElementById(\"offer-name\");\n        if (offerNameElem) {\n            offerNameElem.innerHTML = \"Select an Offer\";\n        }\n        this.__selectedElement = null;\n        this.__selectedOffer = null;\n    }\n    handleSelectOffer(canvasInstance, offer, index) {\n        if (this.__selectedElement !== null) {\n            this.__selectedElement.className = \"slot\";\n        }\n        this.__selectedElement = canvasInstance.canvas;\n        this.__selectedOffer = index;\n        canvasInstance.canvas.className = \"slot selected\";\n        this.__setOfferInformation(offer);\n        this.handleChangeCount();\n    }\n    __setOfferInformation(offer) {\n        const thing = new _item__WEBPACK_IMPORTED_MODULE_2__[\"default\"](offer.id, offer.count);\n        const wrapper = document.getElementById(\"buy-count-wrapper\");\n        if (wrapper) {\n            wrapper.style.display = thing.isStackable() ? \"flex\" : \"none\";\n        }\n        const offerNameElem = document.getElementById(\"offer-name\");\n        if (offerNameElem) {\n            offerNameElem.innerHTML = offer.name;\n        }\n        const offerPriceElem = document.getElementById(\"offer-price\");\n        if (offerPriceElem) {\n            offerPriceElem.innerHTML = String(offer.price);\n        }\n    }\n    // Optionally, you can implement __setPriceInformation if needed.\n    __setPriceInformation(offer) {\n        // Implementation not provided.\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-offer.ts?");

/***/ }),

/***/ "./client/src/modal-outfit.ts":
/*!************************************!*\
  !*** ./client/src/modal-outfit.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OutfitModal)\n/* harmony export */ });\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n/* harmony import */ var _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sprite-buffer */ \"./client/src/sprite-buffer.ts\");\n\n\n\n\nclass OutfitModal extends _modal__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.handleOpen = (options) => {\n            // Copy over the current player's outfit.\n            this.__outfit = window.gameClient.player.outfit.copy();\n            // Default selection of HEAD.\n            this.__internalToggleSectionSelect(document.getElementById(\"outfit-head\"));\n            // Overwrite checkboxes with the player's current settings.\n            if (!this.__outfit)\n                return;\n            document.getElementById(\"checkbox-outfit-addon-one\").checked = this.__outfit.addonOne;\n            document.getElementById(\"checkbox-outfit-addon-two\").checked = this.__outfit.addonTwo;\n            document.getElementById(\"checkbox-outfit-mounted\").checked = this.__outfit.mounted;\n            // Get the indices for the mount and outfit.\n            this.__mountIndex = this.__getIndex(window.gameClient.player.mounts, this.__outfit.mount);\n            this.__outfitIndex = this.__getIndex(window.gameClient.player.outfits, this.__outfit.id);\n            if (window.gameClient.player.mounts.length === 0) {\n                const mountSpan = document.getElementById(\"mount-span\");\n                if (mountSpan) {\n                    mountSpan.innerHTML = \"Mounts Unavailable\";\n                }\n                document.getElementById(\"checkbox-outfit-mounted\").disabled = true;\n            }\n            else {\n                const mountSpan = document.getElementById(\"mount-span\");\n                if (mountSpan) {\n                    mountSpan.innerHTML = window.gameClient.player.mounts[this.__mountIndex].name;\n                }\n            }\n            const outfitSpan = document.getElementById(\"outfit-span\");\n            if (outfitSpan) {\n                outfitSpan.innerHTML = window.gameClient.player.outfits[this.__outfitIndex].name;\n            }\n            // Render the preview.\n            this.__renderOutfit();\n        };\n        this.handleConfirm = () => {\n            if (!window.gameClient.player.outfit.equals(this.__outfit)) {\n                window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_2__.OutfitChangePacket(this.__outfit));\n            }\n            return true;\n        };\n        this.handleRender = () => {\n            if (document.getElementById(\"checkbox-animate-outfit\").checked) {\n                this.__renderOutfit();\n            }\n        };\n        this.__addEventListeners();\n        this.__activeOutfitElement = null;\n        this.__spriteBuffer = new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](2);\n        this.__spriteBufferMount = new _sprite_buffer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](2);\n        const outfitExample = document.getElementById(\"outfit-example\");\n        if (!(outfitExample instanceof HTMLCanvasElement)) {\n            throw new Error(\"Element with id 'outfit-example' is not a canvas element.\");\n        }\n        this.__canvas = new _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](outfitExample, 128, 128);\n        this.__outfit = null;\n        this.__mountIndex = 0;\n        this.__outfitIndex = 0;\n        this.__faceDirection = 0;\n    }\n    disableAddons() {\n        document.getElementById(\"checkbox-outfit-addon-one\").disabled = true;\n        document.getElementById(\"checkbox-outfit-addon-two\").disabled = true;\n        document.getElementById(\"checkbox-outfit-mounted\").disabled = true;\n    }\n    __addEventListeners() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const colorElementWrapper = this.element.querySelector(\".outfit-color-picker\");\n        if (colorElementWrapper) {\n            colorElementWrapper.addEventListener(\"click\", this.__handleChangeOutfitColor.bind(this));\n        }\n        Array.from(this.element.getElementsByClassName(\"outfit-face-picker\")).forEach((element) => {\n            element.addEventListener(\"click\", this.__toggleSectionSelect.bind(this));\n        });\n        (_a = document.getElementById(\"checkbox-outfit-addon-one\")) === null || _a === void 0 ? void 0 : _a.addEventListener(\"change\", this.__renderOutfit.bind(this));\n        (_b = document.getElementById(\"checkbox-outfit-addon-two\")) === null || _b === void 0 ? void 0 : _b.addEventListener(\"change\", this.__renderOutfit.bind(this));\n        (_c = document.getElementById(\"checkbox-outfit-mounted\")) === null || _c === void 0 ? void 0 : _c.addEventListener(\"change\", this.__renderOutfit.bind(this));\n        (_d = document.getElementById(\"checkbox-animate-outfit\")) === null || _d === void 0 ? void 0 : _d.addEventListener(\"change\", this.__renderOutfit.bind(this));\n        (_e = document.getElementById(\"rotate-outfit\")) === null || _e === void 0 ? void 0 : _e.addEventListener(\"click\", this.__handleRotateOutfit.bind(this));\n        (_f = document.getElementById(\"left-outfit\")) === null || _f === void 0 ? void 0 : _f.addEventListener(\"click\", this.__handleSelectOutfit.bind(this, -1));\n        (_g = document.getElementById(\"right-outfit\")) === null || _g === void 0 ? void 0 : _g.addEventListener(\"click\", this.__handleSelectOutfit.bind(this, 1));\n        (_h = document.getElementById(\"left-mount\")) === null || _h === void 0 ? void 0 : _h.addEventListener(\"click\", this.__handleSelectMount.bind(this, -1));\n        (_j = document.getElementById(\"right-mount\")) === null || _j === void 0 ? void 0 : _j.addEventListener(\"click\", this.__handleSelectMount.bind(this, 1));\n    }\n    __getIndex(input, id) {\n        for (let i = 0; i < input.length; i++) {\n            if (input[i].id === id) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    __handleSelectMount(value) {\n        if (window.gameClient.player.mounts.length === 0)\n            return;\n        this.__mountIndex += value;\n        if (this.__mountIndex < 0) {\n            this.__mountIndex = window.gameClient.player.mounts.length - 1;\n        }\n        else {\n            this.__mountIndex = this.__mountIndex % window.gameClient.player.mounts.length;\n        }\n        this.__outfit.mount = window.gameClient.player.mounts[this.__mountIndex].id;\n        const mountSpan = document.getElementById(\"mount-span\");\n        if (mountSpan) {\n            mountSpan.innerHTML = window.gameClient.player.mounts[this.__mountIndex].name;\n        }\n        this.__renderOutfit();\n    }\n    __handleSelectOutfit(value) {\n        this.__outfitIndex += value;\n        if (this.__outfitIndex < 0) {\n            this.__outfitIndex = window.gameClient.player.outfits.length - 1;\n        }\n        else {\n            this.__outfitIndex = this.__outfitIndex % window.gameClient.player.outfits.length;\n        }\n        this.__outfit.id = window.gameClient.player.outfits[this.__outfitIndex].id;\n        const outfitSpan = document.getElementById(\"outfit-span\");\n        if (outfitSpan) {\n            outfitSpan.innerHTML = window.gameClient.player.outfits[this.__outfitIndex].name;\n        }\n        this.__renderOutfit();\n    }\n    __handleRotateOutfit(event) {\n        this.__faceDirection++;\n        this.__faceDirection = this.__faceDirection % 4;\n        this.__renderOutfit();\n    }\n    __toggleSectionSelect(event) {\n        this.__internalToggleSectionSelect(event.target);\n    }\n    __internalToggleSectionSelect(target) {\n        if (this.__activeOutfitElement !== null) {\n            this.__activeOutfitElement.classList.remove(\"on\");\n        }\n        target.classList.add(\"on\");\n        this.__activeOutfitElement = target;\n    }\n    __setOutfitDetail(id, index) {\n        switch (id) {\n            case \"outfit-head\":\n                this.__outfit.details.head = index;\n                break;\n            case \"outfit-body\":\n                this.__outfit.details.body = index;\n                break;\n            case \"outfit-legs\":\n                this.__outfit.details.legs = index;\n                break;\n            case \"outfit-feet\":\n                this.__outfit.details.feet = index;\n                break;\n        }\n        this.__renderOutfit();\n    }\n    __handleChangeOutfitColor(event) {\n        if (this.__activeOutfitElement === null)\n            return;\n        const index = event.target.getAttribute(\"index\");\n        if (index === null)\n            return;\n        this.__setOutfitDetail(this.__activeOutfitElement.id, Number(index));\n    }\n    __renderOutfit() {\n        if (this.__outfit === null)\n            return;\n        const outfitObject = this.__outfit.getDataObject();\n        if (outfitObject === null)\n            return;\n        let item;\n        let mount;\n        let mountFrame;\n        let characterFrame;\n        const animate = document.getElementById(\"checkbox-animate-outfit\").checked;\n        if (!animate) {\n            item = outfitObject.getFrameGroup(0);\n            characterFrame = 0;\n            if (window.gameClient.clientVersion === 1098) {\n                mount = this.__outfit.getDataObjectMount().getFrameGroup(0);\n                mountFrame = 0;\n            }\n            else {\n                mount = 0;\n                mountFrame = 0;\n            }\n        }\n        else {\n            item = outfitObject.getFrameGroup(1);\n            if (window.gameClient.clientVersion === 1098) {\n                mount = this.__outfit.getDataObjectMount().getFrameGroup(1);\n                characterFrame = mount.getAlwaysAnimatedFrame();\n                mountFrame = mount.getAlwaysAnimatedFrame();\n            }\n            else {\n                characterFrame = item.getAlwaysAnimatedFrame();\n                mount = 0;\n                mountFrame = 0;\n            }\n        }\n        // Update outfit properties based on checkboxes.\n        this.__outfit.mounted = document.getElementById(\"checkbox-outfit-mounted\").checked;\n        this.__outfit.addonOne = document.getElementById(\"checkbox-outfit-addon-one\").checked;\n        this.__outfit.addonTwo = document.getElementById(\"checkbox-outfit-addon-two\").checked;\n        const zPattern = (item.pattern.z > 1 && this.__outfit.mounted) ? 1 : 0;\n        this.__canvas.clear();\n        this.__spriteBuffer.clear();\n        // TODO: Implement this.__canvas.__drawCharacter\n        // this.__canvas.__drawCharacter(\n        //   this.__spriteBuffer,\n        //   this.__spriteBufferMount,\n        //   this.__outfit,\n        //   new Position(1, 1, 0),\n        //   item,\n        //   mount,\n        //   characterFrame,\n        //   mountFrame,\n        //   this.__faceDirection,\n        //   zPattern,\n        //   64,\n        //   0.25\n        // );\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-outfit.ts?");

/***/ }),

/***/ "./client/src/modal-readable.ts":
/*!**************************************!*\
  !*** ./client/src/modal-readable.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ReadableModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n\nclass ReadableModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.handleOpen = (packet) => {\n            const textArea = document.getElementById(\"book-text-area\");\n            if (textArea) {\n                textArea.value = packet.content;\n                textArea.disabled = !packet.writeable;\n            }\n            this.setTitle(packet.name);\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-readable.ts?");

/***/ }),

/***/ "./client/src/modal-skills.ts":
/*!************************************!*\
  !*** ./client/src/modal-skills.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SkillModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n\nfunction formatNumber(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\nclass SkillModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n    }\n    setSkillValue(which, value, percentage) {\n        const spanSelector = `div[skill=\"${which}\"]`;\n        const container = this.getElement(spanSelector);\n        if (!container)\n            return;\n        // Find the element with class \"skill\" inside the container.\n        const skillElement = container.querySelector(\".skill\");\n        if (skillElement) {\n            skillElement.innerHTML = formatNumber(value);\n            // Alternatively: skillElement.innerHTML = value.toLocaleString();\n        }\n        // Find the element with class \"bar\" inside the container.\n        const barElement = container.querySelector(\".bar\");\n        if (!barElement)\n            return;\n        barElement.title = `You need ${Math.ceil(100 - percentage)}% to advance.`;\n        if (barElement.children.length > 0) {\n            barElement.children[0].style.width = `${percentage}%`;\n        }\n    }\n    setCharactherInfo(data) {\n        const nameElement = document.getElementById(\"character-name\");\n        if (nameElement) {\n            nameElement.innerText = \"Name: \" + data.name;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-skills.ts?");

/***/ }),

/***/ "./client/src/modal-spellbook.ts":
/*!***************************************!*\
  !*** ./client/src/modal-spellbook.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SpellbookModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _hotbar_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hotbar-manager */ \"./client/src/hotbar-manager.ts\");\n\n\n\nclass SpellbookModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    ;\n    constructor(id) {\n        super(id);\n        // Using an arrow function property to avoid issues with 'this'\n        this.__handleClick = (sid) => {\n            window.gameClient.interface.hotbarManager.addSlot(this.__index, sid);\n            const cancelButton = this.element.querySelector(\"button[action='cancel']\");\n            if (cancelButton) {\n                // __buttonClick is assumed to be defined on the base class (Modal)\n                const fakeEvent = new MouseEvent(\"click\");\n                Object.defineProperty(fakeEvent, \"target\", { value: cancelButton, writable: false });\n                this.__buttonClick(fakeEvent);\n            }\n        };\n        this.__createSpellNode = (id) => {\n            const spell = window.gameClient.interface.getSpell(id);\n            const prototypeElem = document.getElementById(\"spellbook-wrapper-prototype\");\n            if (!prototypeElem) {\n                throw new Error(\"Element with id 'spellbook-wrapper-prototype' not found.\");\n            }\n            // Clone the prototype element.\n            const DOMElement = prototypeElem.cloneNode(true);\n            const DOMElementCanvas = DOMElement.firstElementChild;\n            const canvas = new _canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"](DOMElementCanvas, 32, 32);\n            // Draw the spell icon on the canvas.\n            canvas.context.drawImage(_hotbar_manager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prototype.ICONS, 32 * spell.icon.x, 32 * spell.icon.y, 32, 32, 0, 0, 32, 32);\n            // Set spell name and description.\n            const lastChild = DOMElement.lastElementChild;\n            lastChild.innerHTML = `${spell.name}<br><small>${spell.description}</small>`;\n            DOMElement.addEventListener(\"click\", this.__handleClick.bind(this, id));\n            DOMElement.title = spell.description;\n            DOMElement.style.display = \"flex\";\n            return DOMElement;\n        };\n        this.handleOpen = (index) => {\n            this.__index = index;\n        };\n        const wrapper = document.getElementById(\"spellbook-list\");\n        if (!wrapper) {\n            throw new Error(\"Element with id 'spellbook-list' not found.\");\n        }\n        this.__wrapper = wrapper;\n        this.__index = 0;\n    }\n    createSpellList(spells) {\n        const nodes = Array.from(spells).map(this.__createSpellNode, this);\n        const listElem = document.getElementById(\"spellbook-list\");\n        if (listElem) {\n            listElem.replaceChildren(...nodes);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-spellbook.ts?");

/***/ }),

/***/ "./client/src/modal-text.ts":
/*!**********************************!*\
  !*** ./client/src/modal-text.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TextModal)\n/* harmony export */ });\n/* harmony import */ var _modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modal */ \"./client/src/modal.ts\");\n\nclass TextModal extends _modal__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id) {\n        super(id);\n        this.handleOpen = (x) => {\n            const feedback = document.getElementById(\"serve-feedback\");\n            if (feedback) {\n                feedback.innerHTML = x;\n            }\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal-text.ts?");

/***/ }),

/***/ "./client/src/modal.ts":
/*!*****************************!*\
  !*** ./client/src/modal.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Modal)\n/* harmony export */ });\nclass Modal {\n    constructor(id) {\n        // Subclasses may override these:\n        this.handleConfirm = () => true;\n        this.handleCancel = () => true;\n        this.handleOpen = () => { };\n        this.handleRender = () => { };\n        const el = document.getElementById(id);\n        if (!el) {\n            throw new Error(`Element with id \"${id}\" not found.`);\n        }\n        this.id = id;\n        this.element = el;\n        this.isOpen = false;\n        Array.from(this.element.querySelectorAll(\"button[action]\")).forEach(this.__addAction.bind(this));\n    }\n    getElement(selector) {\n        return this.element.querySelector(selector);\n    }\n    show() {\n        // Centering the modal: resetting left and top.\n        this.element.style.left = \"\";\n        this.element.style.top = \"\";\n        this.element.style.display = \"block\";\n        this.isOpen = true;\n    }\n    close() {\n        this.element.style.display = \"none\";\n        this.isOpen = false;\n    }\n    isOpened() {\n        return this.isOpen;\n    }\n    setTitle(title) {\n        // Capitalize title: simple implementation.\n        const capitalizedTitle = title.charAt(0).toUpperCase() + title.slice(1);\n        const header = this.element.querySelector(\".modal-header\");\n        if (header) {\n            header.innerHTML = capitalizedTitle;\n        }\n    }\n    __addAction(element) {\n        element.addEventListener(\"click\", this.__buttonClick.bind(this));\n    }\n    __internalButtonClick(target) {\n        const action = target.getAttribute(\"action\");\n        switch (action) {\n            case \"cancel\":\n                return this.handleCancel();\n            case \"confirm\":\n                return this.handleConfirm();\n            default:\n                return false;\n        }\n    }\n    __buttonClick(event) {\n        const target = event.target;\n        if (this.__internalButtonClick(target)) {\n            // If the action returns true, close the modal via the global gameClient.\n            window.gameClient.interface.modalManager.close();\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/modal.ts?");

/***/ }),

/***/ "./client/src/mouse.ts":
/*!*****************************!*\
  !*** ./client/src/mouse.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./container */ \"./client/src/container.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tile */ \"./client/src/tile.ts\");\n\n\n\nclass Mouse {\n    constructor() {\n        this.__mouseDownObject = null;\n        this.__currentMouseTile = null;\n        this.__multiUseObject = null;\n        this.__leftButtonPressed = false;\n        this.__rightButtonPressed = false;\n        document.body.addEventListener(\"mousedown\", this.__handleMouseDown.bind(this));\n        document.body.addEventListener(\"mouseup\", this.__handleMouseUp.bind(this));\n        document.body.addEventListener(\"mousemove\", this.__handleMouseMove.bind(this));\n        document.body.addEventListener(\"dblclick\", this.__handleMouseDoubleClick.bind(this));\n        document.body.addEventListener(\"contextmenu\", this.__handleContextMenu.bind(this));\n    }\n    getCurrentTileHover() {\n        return this.__currentMouseTile;\n    }\n    sendItemMove(fromObject, toObject, count) {\n        if (!fromObject || !toObject)\n            return;\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.ItemMovePacket(fromObject, toObject, count));\n    }\n    setCursor(which) {\n        document.body.style.cursor = which;\n    }\n    getWorldObject(event) {\n        return {\n            which: window.gameClient.renderer.screen.getWorldCoordinates(event),\n            index: 0xff,\n        };\n    }\n    look(object) {\n        const item = object.which.peekItem(object.index);\n        if (object.which instanceof _container__WEBPACK_IMPORTED_MODULE_0__[\"default\"] && item === null)\n            return;\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.ItemLookPacket(object));\n    }\n    use(object) {\n        const item = object.which.peekItem(object.index);\n        if (object.which instanceof _tile__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            if (object.which.monsters.size !== 0) {\n                if (window.gameClient.player.isInProtectionZone()) {\n                    return window.gameClient.interface.setCancelMessage(\"You may not attack from within protection zone.\");\n                }\n                return window.gameClient.world.targetMonster(object.which.monsters);\n            }\n        }\n        if (item !== null && item.isMultiUse()) {\n            return this.__setMultiUseItem(object);\n        }\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.ItemUsePacket(object));\n    }\n    __handleMouseDoubleClick(event) {\n        if (event.target instanceof HTMLElement && event.target.className === \"chat-message\") {\n            const name = event.target.getAttribute(\"name\");\n            if (name !== null) {\n                window.gameClient.interface.channelManager.addPrivateChannel(name);\n            }\n        }\n    }\n    __handleContextMenu(event) {\n        event.preventDefault();\n        window.gameClient.interface.menuManager.close();\n        const target = event.target;\n        // If Control is held, open context-specific menus for the game screen.\n        // if (window.gameClient.keyboard.isControlDown()) {\n        //   window.gameClient.interface.menuManager.close();\n        //   if (target.id === \"screen\") {\n        //     const menu = window.gameClient.interface.menuManager.getMenu(\"screen-menu\");\n        //     menu.removeDynamicOptions();\n        //     const tile = this.getWorldObject(event);\n        //     const useButton = menu.element.querySelector(\"button[action=use]\");\n        //     if (useButton) {\n        //       useButton.innerHTML = \"Use\";\n        //       if (tile !== null && tile.which.items.length > 0) {\n        //         if (tile.which.peekItem(0xff).isRotateable()) {\n        //           useButton.innerHTML = \"Rotate\";\n        //         } else if (tile.which.peekItem(0xff).isMultiUse()) {\n        //           useButton.innerHTML = \"Use With\";\n        //         }\n        //       }\n        //     }\n        //     const monsters = tile.which.monsters;\n        //     if (monsters.size > 0) {\n        //       const firstMonster = Array.from(monsters)[0];\n        //       if (firstMonster.name === window.gameClient.player!.name) {\n        //         menu.addOption(\"outfits\", \"Outfits\");\n        //       }\n        //     }\n        //     return window.gameClient.interface.menuManager.open(\"screen-menu\", event);\n        //   }\n        // }\n        // Additional context menu handling based on the target's class or id:\n        if (target.className === \"hotbar-item\") {\n            return window.gameClient.interface.menuManager.open(\"hotbar-menu\", event);\n        }\n        if (target.id === \"chat-text-area\" || target.className === \"channel-empty\") {\n            return window.gameClient.interface.menuManager.open(\"chat-body-menu\", event);\n        }\n        if (target.parentElement && target.parentElement.id === \"chat-text-area\") {\n            if (target.getAttribute(\"name\") !== null) {\n                return window.gameClient.interface.menuManager.open(\"chat-entry-menu\", event);\n            }\n        }\n        if (target.parentElement && target.parentElement.className === \"window\") {\n            if (target.parentElement.id === \"friend-window\") {\n                return window.gameClient.interface.menuManager.open(\"friend-window-menu\", event);\n            }\n        }\n        if (target.className === \"friend-entry\") {\n            return window.gameClient.interface.menuManager.open(\"friend-list-menu\", event);\n        }\n        if (target.className.includes(\"chat-title\")) {\n            return window.gameClient.interface.menuManager.open(\"chat-header-menu\", event);\n        }\n    }\n    __handleMouseMove(event) {\n        if (!window.gameClient.isRunning())\n            return;\n        this.__currentMouseTile = window.gameClient.renderer.screen.getWorldCoordinates(event);\n        // Call __updateCursorMove to update the cursor based on the target element.\n        this.__updateCursorMove(event.target);\n    }\n    __handleMouseDown(event) {\n        // Left/right button pressed\n        if (event.button === 0)\n            this.__leftButtonPressed = true; // Left button\n        if (event.button === 2)\n            this.__rightButtonPressed = true; // Right button\n        // Only continue if connected to the game server\n        if (!window.gameClient.networkManager.isConnected()) {\n            return;\n        }\n        // Detect simultaneous left + right click and call look() if __mouseDownObject exists\n        if (this.__leftButtonPressed && this.__rightButtonPressed) {\n            if (this.__mouseDownObject) {\n                this.look(this.__mouseDownObject);\n            }\n        }\n        // If a menu is open and the event target isn't a BUTTON, close the menu\n        if (window.gameClient.interface.menuManager.isOpened() &&\n            event.target.tagName !== \"BUTTON\") {\n            window.gameClient.interface.menuManager.close();\n        }\n        // Set the selected object based on the event target\n        this.__setSelectedObject(event);\n        // If neither Shift nor Control is held and the left button is pressed, update the cursor to \"grabbing\"\n        if (!window.gameClient.keyboard.isShiftDown() &&\n            !window.gameClient.keyboard.isControlDown() &&\n            event.buttons === 1) {\n            this.setCursor(\"grabbing\");\n        }\n    }\n    __handleMouseUp(event) {\n        // Left/right button release\n        if (event.button === 0)\n            this.__leftButtonPressed = false;\n        if (event.button === 2)\n            this.__rightButtonPressed = false;\n        // Must be connected to the gameserver\n        if (!window.gameClient.networkManager.isConnected()) {\n            return;\n        }\n        // Mouse right-click use (when control is not held)\n        if (event.button === 2 && !window.gameClient.keyboard.isControlDown()) {\n            const targetObject = this.__mouseDownObject;\n            if (targetObject && targetObject.which) {\n                this.use(targetObject);\n            }\n            return;\n        }\n        // Delegate based on target element\n        const target = event.target;\n        if (target === window.gameClient.renderer.screen.canvas) {\n            this.__handleCanvasMouseUp(event);\n        }\n        else if (target.className.includes(\"slot\") || target.className === \"body\") {\n            this.__handleSlotMouseUp(event);\n        }\n        // Reset the selected object (if any)\n        this.__mouseDownObject = null;\n        // Reset the cursor if no multi-use object is pending\n        this.setCursor(\"auto\");\n    }\n    __handleCanvasMouseUp(event) {\n        if (this.__mouseDownObject === null || this.__mouseDownObject.which === null) {\n            return;\n        }\n        // If an item is already in use, handle the item use with action.\n        if (this.__multiUseObject !== null) {\n            return this.__handleItemUseWith(this.__multiUseObject, this.__mouseDownObject);\n        }\n        // Get the world object based on the mouse event.\n        const toObject = this.getWorldObject(event);\n        // If the object that was pressed is a Tile, perform extra checks.\n        if (this.__mouseDownObject.which.constructor.name === \"Tile\") {\n            // If the down and up objects are the same, treat it as a click.\n            if (this.__mouseDownObject.which === toObject.which) {\n                return this.__handleMouseClick(event);\n            }\n            // The position where the item is used must be besides the player \n            if (!this.__mouseDownObject.which.getPosition().besides(window.gameClient.player.getPosition())) {\n                return window.gameClient.interface.setCancelMessage(\"You have to move closer.\");\n            }\n        }\n        // Bind and send the move callback to the server.\n        return this.__bindMoveCallback(this.__mouseDownObject, toObject);\n    }\n    __handleItemUseWith(fromObject, toObject) {\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.ItemUseWithPacket(fromObject, toObject));\n        this.__multiUseObject = null;\n        this.setCursor(\"auto\");\n    }\n    __bindMoveCallback(fromObject, toObject) {\n        const item = fromObject.which.peekItem(fromObject.index);\n        if (!item)\n            return this.sendItemMove(fromObject, toObject, 1);\n        if (!item.isMoveable())\n            return;\n        if (item.isStackable() && window.gameClient.keyboard.isShiftDown()) {\n            return this.sendItemMove(fromObject, toObject, 1);\n        }\n        return this.sendItemMove(fromObject, toObject, item.count);\n    }\n    __setMultiUseItem(object) {\n        this.setCursor(\"move\");\n        this.__multiUseObject = object;\n    }\n    __setSelectedObject(event) {\n        if (event.target === window.gameClient.renderer.screen.canvas) {\n            this.__mouseDownObject = this.getWorldObject(event);\n        }\n    }\n    __handleMouseClick(event) {\n        if (window.gameClient.keyboard.isShiftDown()) {\n            return this.look(this.__mouseDownObject);\n        }\n        if (this.__multiUseObject !== null) {\n            return;\n        }\n        // TODO: Fix findPath\n        // if (\n        //   !window.gameClient.player!.isMoving() &&\n        //   this.__mouseDownObject.which.constructor.name === \"Tile\" &&\n        //   !window.gameClient.keyboard.isControlDown() &&\n        //   !this.__rightButtonPressed\n        // ) {\n        //   const worldCoordinates = window.gameClient.renderer.screen.getWorldCoordinates(event);\n        //   return window.gameClient.world.pathfinder.findPath(\n        //     window.gameClient.player!.__position,\n        //     worldCoordinates.__position\n        //   );\n        // }\n    }\n    __getSlotObject(event) {\n        var _a, _b, _c;\n        let slotIndex;\n        let containerIndex;\n        const target = event.target;\n        // Read the identifiers from the DOM.\n        if (target.className === \"body\") {\n            slotIndex = 0;\n            containerIndex = Number((_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute(\"containerIndex\"));\n        }\n        else {\n            slotIndex = Number(target.getAttribute(\"slotIndex\"));\n            containerIndex = Number((_c = (_b = target.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.getAttribute(\"containerIndex\"));\n        }\n        // Fetch the container from the player.\n        const container = window.gameClient.player.getContainer(containerIndex);\n        // Wrap and return the container and slot index.\n        return {\n            which: container,\n            index: slotIndex,\n        };\n    }\n    __handleSlotMouseUp(event) {\n        if (this.__mouseDownObject === null || this.__mouseDownObject.which === null) {\n            return;\n        }\n        const toObject = this.__getSlotObject(event);\n        // If moving from the world (a Tile), check that the target position is adjacent to the player.\n        if (this.__mouseDownObject.which.constructor.name === \"Tile\") {\n            if (!this.__mouseDownObject.which\n                .getPosition()\n                .besides(window.gameClient.player.getPosition())) {\n                return;\n            }\n        }\n        // If moving from a container, and the source and destination are the same, treat it as a click.\n        if (this.__mouseDownObject.which instanceof _container__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n            if (this.__mouseDownObject.which === toObject.which &&\n                this.__mouseDownObject.index === toObject.index) {\n                return this.__handleMouseClick(event);\n            }\n        }\n        return this.__bindMoveCallback(this.__mouseDownObject, toObject);\n    }\n    __updateCursorMove(target) {\n        var _a, _b;\n        // If shift or control is held, remove any text selections and exit.\n        if (window.gameClient.keyboard.isShiftDown() || window.gameClient.keyboard.isControlDown()) {\n            (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n            return;\n        }\n        // Block cursor update when using or dragging an item.\n        if (this.__multiUseObject !== null || this.__mouseDownObject !== null) {\n            (_b = window.getSelection()) === null || _b === void 0 ? void 0 : _b.removeAllRanges();\n            return;\n        }\n        // If hovering over a slot, set the cursor to \"grab\"\n        if (target.className.includes(\"slot\")) {\n            this.setCursor(\"grab\");\n            return;\n        }\n        const tile = this.getCurrentTileHover();\n        // In gameworld but nothing is there: reset cursor.\n        if (tile === null) {\n            this.setCursor(\"auto\");\n            return;\n        }\n        // If there are no items on the tile, reset cursor.\n        if (tile.items.length === 0) {\n            this.setCursor(\"auto\");\n            return;\n        }\n        const item = tile.peekItem(0xff);\n        if (item.isPickupable() || item.isMoveable()) {\n            this.setCursor(\"grab\");\n            return;\n        }\n        this.setCursor(\"auto\");\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mouse);\n\n\n//# sourceURL=webpack:///./client/src/mouse.ts?");

/***/ }),

/***/ "./client/src/network-manager.ts":
/*!***************************************!*\
  !*** ./client/src/network-manager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n/* harmony import */ var _packet_handler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packet-handler */ \"./client/src/packet-handler.ts\");\n/* harmony import */ var _packetreader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./packetreader */ \"./client/src/packetreader.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n/* harmony import */ var _sprite_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sprite-buffer */ \"./client/src/sprite-buffer.ts\");\n\n\n\n\n\nclass NetworkManager {\n    constructor() {\n        this.nPacketsSent = 0;\n        this.__latency = 0;\n        this.state = {\n            bytesRecv: null,\n            bytesSent: null,\n            latency: null,\n            nPackets: null,\n            connected: false,\n        };\n        this.packetHandler = new _packet_handler__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n    close() {\n        var _a;\n        (_a = this.socket) === null || _a === void 0 ? void 0 : _a.close();\n    }\n    isConnected() {\n        return this.state.connected;\n    }\n    readPacket(packet) {\n        // Increase the packet counter.\n        this.state.nPackets++;\n        const operationCode = packet.readUInt8();\n        const debug = true;\n        if (debug) {\n            try {\n                function getNameByNumber(data, number) {\n                    for (const [key, value] of Object.entries(data)) {\n                        if (typeof value === \"object\") {\n                            const result = getNameByNumber(value, number);\n                            if (result)\n                                return result;\n                        }\n                        else if (value === number) {\n                            return key;\n                        }\n                    }\n                    return null;\n                }\n                const operationName = getNameByNumber(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER, operationCode) || \"Unknown\";\n                console.log(`Packet Code: ${operationCode} (${operationName})`);\n            }\n            catch (error) {\n                console.error(\"Error processing packet:\", error);\n            }\n        }\n        // Determine the operation based on the first byte from the server.\n        switch (operationCode) {\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.SPELL_ADD: {\n                return window.gameClient.interface.updateSpells(packet.readUInt16());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.PLAYER_STATISTICS: {\n                return this.packetHandler.handlePlayerStatistics(packet.readCharacterStatistics());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.TRADE_OFFER: {\n                return this.packetHandler.handleTradeOffer(packet.readTradeOffer());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.REMOVE_FRIEND: {\n                return this.packetHandler.handleRemoveFriend(packet.readString());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.ITEM_TRANSFORM: {\n                return this.packetHandler.handleTransformTile(packet.readTransformTile());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.MESSAGE_CANCEL: {\n                return this.packetHandler.handleCancelMessage(packet.readString());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.ITEM_INFORMATION: {\n                return this.packetHandler.handleItemInformation(packet.readItemInformation());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.TARGET: {\n                return this.packetHandler.handleSetTarget(packet.readUInt32());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.OUTFIT: {\n                return this.packetHandler.handleChangeOutfit(packet.readChangeOutfit());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.ITEM_TEXT: {\n                return this.packetHandler.handleReadText(packet.readReadable());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.STATE_SERVER: {\n                return this.packetHandler.handleServerData(packet);\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CHANNEL_JOIN: {\n                return this.packetHandler.handleOpenChannel(packet.readOpenChannel());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.COMBAT_LOCK: {\n                return this.packetHandler.handleCombatLock(packet.readBoolean());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.MAGIC_EFFECT: {\n                return this.packetHandler.handleSendMagicEffect(packet.readMagicEffect());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.DISTANCE_EFFECT: {\n                return this.packetHandler.handleSendDistanceEffect(packet.readDistanceEffect());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CONTAINER_REMOVE: {\n                return this.packetHandler.handleContainerItemRemove(packet.readContainerItemRemove());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_STATE: {\n                return this.packetHandler.handleEntityReference(packet.readCreatureInfo());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_INFORMATION: {\n                return this.packetHandler.handleCharacterInformation(packet.readCharacterInformation());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CONTAINER_CLOSE: {\n                return this.packetHandler.handleContainerClose(packet.readUInt32());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.LATENCY: {\n                return this.packetHandler.handleLatency();\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_MOVE: {\n                return this.packetHandler.handleCreatureServerMove(packet.readEntityMove());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.ITEM_ADD: {\n                return this.packetHandler.handleItemAdd(packet.readTileItemAdd());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CONTAINER_OPEN: {\n                return this.packetHandler.handleContainerOpen(packet.readOpenContainer());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CONTAINER_ADD: {\n                return this.packetHandler.handleContainerAddItem(packet.readContainerItemAdd());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.STATE_PLAYER: {\n                return this.packetHandler.handleAcceptLogin(packet.readPlayerInfo());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.ITEM_REMOVE: {\n                return this.packetHandler.handleRemoveItem(packet.readRemoveItem());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.SPELL_CAST: {\n                return window.gameClient.player.spellbook.serverCastSpell(packet.readCastSpell());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CHUNK: {\n                return this.packetHandler.handleChunk(packet.readChunkData());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.SERVER_ERROR: {\n                return this.packetHandler.handleServerError(packet.readString());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.MESSAGE_SERVER: {\n                return this.packetHandler.handleServerMessage(packet.readString());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_REMOVE: {\n                return this.packetHandler.handleEntityRemove(packet.readUInt32());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_TELEPORT: {\n                return this.packetHandler.handleEntityTeleport(packet.readCreatureTeleport());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.MESSAGE_PRIVATE: {\n                return this.packetHandler.handleReceivePrivateMessage(packet.readPrivateMessage());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.PLAYER_LOGIN: {\n                return this.packetHandler.handlePlayerConnect(packet.readString());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.PLAYER_LOGOUT: {\n                return this.packetHandler.handlePlayerDisconnect(packet.readString());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.WORLD_TIME: {\n                return this.packetHandler.handleWorldTime(packet.readUInt32());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_MESSAGE: {\n                return this.packetHandler.handleChannelMessage(packet.readChannelMessage());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.TOGGLE_CONDITION: {\n                return this.packetHandler.handleCondition(packet.readToggleCondition());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.EMOTE: {\n                return this.packetHandler.handleEmote(packet.readDefaultMessage());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_SAY: {\n                return this.packetHandler.handleDefaultMessage(packet.readDefaultMessage());\n            }\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.SERVER.CREATURE_PROPERTY: {\n                return this.packetHandler.handlePropertyChange(packet.readProperty());\n            }\n            default:\n                throw new Error(\"An unknown packet was received from the server.\");\n        }\n    }\n    send(packet) {\n        if (!this.isConnected())\n            return;\n        const buffer = packet.getBuffer();\n        this.state.bytesSent += buffer.length;\n        this.nPacketsSent++;\n        this.socket.send(buffer);\n    }\n    getLatency() {\n        this.__latency = performance.now();\n        this.send(new _protocol__WEBPACK_IMPORTED_MODULE_3__.LatencyPacket());\n    }\n    getConnectionString(response) {\n        return `${response.host}?token=${response.token}`;\n    }\n    getConnectionSettings() {\n        return document.getElementById(\"host\").value;\n    }\n    createAccount(options) {\n        const host = this.getConnectionSettings();\n        const url = `${location.protocol}//${host}/?account=${options.account}&password=${options.password}&name=${options.name}&sex=${options.sex}`;\n        fetch(url, { method: \"POST\" })\n            .then((response) => {\n            if (response.status !== 201)\n                throw new Error(\"Account creation failed\");\n            document.getElementById(\"user-username\").value = options.account;\n            document.getElementById(\"user-password\").value = options.password;\n            window.gameClient.interface.modalManager.open(\"floater-connecting\", \"The account and character have been created.\");\n        })\n            .catch((err) => window.gameClient.interface.modalManager.open(\"floater-connecting\", err));\n    }\n    fetchCallback(response) {\n        if (response.status !== 200)\n            return Promise.reject(response);\n        return response.arrayBuffer();\n    }\n    loadGameFilesServer() {\n        // The resources to load from the server.\n        const resources = [\"Tibia.spr\", \"Tibia.dat\"];\n        // Map each resource to a fetch promise using template literals.\n        const promises = resources.map(url => fetch(`/data/${window.gameClient.SERVER_VERSION}/${url}`).then(this.fetchCallback));\n        // Wait for all resources to load.\n        Promise.all(promises)\n            .then(([dataSprites, dataObjects]) => {\n            window.gameClient.dataObjects.load(\"Tibia.dat\", { target: { result: dataObjects } });\n            _sprite_buffer__WEBPACK_IMPORTED_MODULE_4__[\"default\"].load(\"Tibia.spr\", { target: { result: dataSprites } });\n        })\n            .catch(error => {\n            return window.gameClient.interface.modalManager.open(\"floater-connecting\", \"Failed loading client data from server. Please select them manually using the Load Assets button.\");\n        });\n    }\n    connect() {\n        const host = this.getConnectionSettings();\n        const { account, password } = window.gameClient.interface.getAccountDetails();\n        // Contact the login server using a template literal.\n        fetch(`${location.protocol}//${host}/?account=${account}&password=${password}`)\n            .then((response) => {\n            switch (response.status) {\n                case 200:\n                    break;\n                default:\n                    break;\n            }\n            // Proceed with the JSON response.\n            return response.json();\n        })\n            .then((response) => {\n            // Open the websocket connection: binary transfer of data.\n            this.socket = new WebSocket(this.getConnectionString(response));\n            this.socket.binaryType = \"arraybuffer\";\n            // Attach callbacks.\n            this.socket.onopen = this.__handleConnection.bind(this);\n            this.socket.onmessage = this.__handlePacket.bind(this);\n            this.socket.onclose = this.__handleClose.bind(this);\n            this.socket.onerror = this.__handleError.bind(this);\n        })\n            .catch((x) => window.gameClient.interface.modalManager.open(\"floater-connecting\", x));\n    }\n    __handlePacket(event) {\n        const packet = new _packetreader__WEBPACK_IMPORTED_MODULE_2__[\"default\"](event.data);\n        this.state.bytesRecv += packet.buffer.length;\n        while (packet.readable()) {\n            this.readPacket(packet);\n        }\n    }\n    __handleError() {\n        window.gameClient.interface.modalManager.open(\"floater-connecting\", new Error(\"Could not connect to the Gameworld. Please try again later.\"));\n    }\n    __handleClose() {\n        console.log(\"Disconnected\");\n        if (this.state.connected && window.gameClient.renderer) {\n            window.gameClient.reset();\n        }\n        this.state.connected = false;\n    }\n    __handleConnection() {\n        this.state.connected = true;\n        console.log(\"You are connected to the gameserver.\");\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NetworkManager);\n\n\n//# sourceURL=webpack:///./client/src/network-manager.ts?");

/***/ }),

/***/ "./client/src/notification.ts":
/*!************************************!*\
  !*** ./client/src/notification.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NotificationManager)\n/* harmony export */ });\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n\nclass NotificationManager {\n    constructor() {\n        this.__internalTimeout = null;\n        this.__internalTimeoutServer = null;\n        this.__internalZoneTimeout = null;\n    }\n    /**\n     * Sets a zone message that displays for a limited time.\n     * @param message - The main message text.\n     * @param title - A secondary title text.\n     */\n    setZoneMessage(message, title) {\n        const element = document.getElementById(\"zone-message\");\n        if (!element)\n            return;\n        element.style.display = \"block\";\n        element.innerHTML = `&#128600 <span class='zone-title'>${message}</span> &#128602;<br><span class='zone-sub'>${title}</span>`;\n        if (this.__internalZoneTimeout !== null) {\n            clearTimeout(this.__internalZoneTimeout);\n        }\n        // Bind the deferServerMessage method to the element (so that \"this\" inside deferServerMessage is the element).\n        this.__internalZoneTimeout = window.setTimeout(this.deferServerMessage.bind(element), 3000);\n    }\n    /**\n     * Sets a cancel notification message that displays for a limited time.\n     * @param message - The message text.\n     */\n    setCancelMessage(message) {\n        const element = document.getElementById(\"notification\");\n        if (!element)\n            return;\n        element.innerHTML = message;\n        if (this.__internalTimeout !== null) {\n            clearTimeout(this.__internalTimeout);\n        }\n        this.__internalTimeout = window.setTimeout(this.deferCancel.bind(element), 3000);\n    }\n    /**\n     * Sets a server notification message that displays for a limited time.\n     * @param message - The message text.\n     * @param color - A numeric color value used to determine the hex color.\n     */\n    setServerMessage(message, color) {\n        const element = document.getElementById(\"server-message\");\n        if (!element)\n            return;\n        element.style.display = \"block\";\n        // Using the getHexColor method from Interface's prototype.\n        element.style.color = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype.getHexColor(color);\n        element.innerHTML = message;\n        if (this.__internalTimeoutServer !== null) {\n            clearTimeout(this.__internalTimeoutServer);\n        }\n        this.__internalTimeoutServer = window.setTimeout(this.deferServerMessage.bind(element), 3000);\n    }\n    /**\n     * Removes the server notification from the DOM.\n     * This method expects \"this\" to be bound to an HTMLElement.\n     */\n    deferServerMessage() {\n        this.style.display = \"none\";\n    }\n    /**\n     * Clears the cancel notification from the DOM.\n     * This method expects \"this\" to be bound to an HTMLElement.\n     */\n    deferCancel() {\n        this.innerHTML = \"\";\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/notification.ts?");

/***/ }),

/***/ "./client/src/object-buffer.ts":
/*!*************************************!*\
  !*** ./client/src/object-buffer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bitflag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitflag */ \"./client/src/bitflag.ts\");\n/* harmony import */ var _dataobject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataobject */ \"./client/src/dataobject.ts\");\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n/* harmony import */ var _packetreader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./packetreader */ \"./client/src/packetreader.ts\");\n\n\n\n\nclass ObjectBuffer {\n    ;\n    constructor() {\n        /*\n         * Class ObjectBuffer\n         * Container for Tibia.dat that contains item information and pointers to sprites\n         */\n        this.dataObjects = {};\n        this.__version = 0;\n        this.itemCount = 0;\n        this.outfitCount = 0;\n        this.effectCount = 0;\n        this.distanceCount = 0;\n        this.totalObjectCount = 0;\n    }\n    getOutfit(id) {\n        if (id < 0 || id > this.outfitCount) {\n            return null;\n        }\n        return this.get(this.__getOutfitIdentifier(id));\n    }\n    load(name, event) {\n        try {\n            const result = event.target.result;\n            if (result instanceof ArrayBuffer) {\n                this.__load(name, result);\n                window.gameClient.database.storeFile(name, result);\n            }\n            else {\n                throw new Error(\"Failed to load Tibia.dat: result is not an ArrayBuffer.\");\n            }\n        }\n        catch (exception) {\n            window.gameClient.interface.modalManager.open(\"floater-connecting\", exception);\n        }\n    }\n    __getOutfitIdentifier(id) {\n        return this.itemCount + id;\n    }\n    __isOutfit(id) {\n        return id > this.itemCount && id <= this.itemCount + this.outfitCount;\n    }\n    __hasFrameGroups(id) {\n        return this.__version !== null && this.__version >= 1050 && this.__isOutfit(id);\n    }\n    __load(name, buffer) {\n        const start = performance.now();\n        // Wrap the buffer in a packet reader class.\n        const packet = new _packetreader__WEBPACK_IMPORTED_MODULE_3__[\"default\"](buffer);\n        // Read the signature from the file.\n        const signature = packet.readUInt32().toString(16).toUpperCase();\n        // Verify the 4 byte data signature.\n        if (!ObjectBuffer.SIGNATURES.hasOwnProperty(signature)) {\n            throw new Error(\"Unknown Tibia.dat file supplied.\");\n        }\n        this.__version = ObjectBuffer.SIGNATURES[signature];\n        // Number of outfits, effects, and distance effects.\n        this.itemCount = packet.readUInt16();\n        this.outfitCount = packet.readUInt16();\n        this.effectCount = packet.readUInt16();\n        this.distanceCount = packet.readUInt16();\n        this.totalObjectCount = this.itemCount + this.outfitCount + this.effectCount + this.distanceCount;\n        // Item identifiers start at 100. Do not ask me why..\n        for (let id = 100; id <= this.totalObjectCount; id++) {\n            const flags = this.__readFlags(packet);\n            // Create a new data object.\n            if (id === 100)\n                console.log('flags', flags);\n            const dataObject = new _dataobject__WEBPACK_IMPORTED_MODULE_1__.DataObject(flags);\n            // Update the group count if this is an outfit.\n            dataObject.setGroupCount(this.__hasFrameGroups(id) ? packet.readUInt8() : 1);\n            // For each group in the data object.\n            for (let _ = 0; _ < dataObject.groupCount; _++) {\n                // Create a new frame group.\n                const frameGroup = new _frame_group__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n                frameGroup.type = this.__hasFrameGroups(id) ? packet.readUInt8() : 0;\n                // Read sprite parameters: defines width and height.\n                const width = packet.readUInt8();\n                const height = packet.readUInt8();\n                // Set the size.\n                frameGroup.setSize(width, height);\n                // If big then skip the following byte.\n                if (width > 1 || height > 1) {\n                    packet.readUInt8();\n                }\n                // Some frames are blended (combination of multiple sprites).\n                frameGroup.setLayers(packet.readUInt8());\n                const x = packet.readUInt8();\n                const y = packet.readUInt8();\n                const z = this.__version >= 755 ? packet.readUInt8() : 1;\n                // Next three bytes are x, y, z patterns.\n                frameGroup.setPattern(x, y, z);\n                frameGroup.setAnimationLength(packet.readUInt8());\n                // Read frame durations if animated and version supports it.\n                if (frameGroup.isAnimated() && this.__version >= 1050) {\n                    const animationLengths = [];\n                    frameGroup.asynchronous = packet.readUInt8();\n                    frameGroup.nLoop = packet.readUInt32();\n                    frameGroup.start = packet.readInt8();\n                    // Read the animation lengths.\n                    for (let i = 0; i < frameGroup.animationLength; i++) {\n                        animationLengths.push(packet.readAnimationLength());\n                    }\n                    frameGroup.setAnimation(animationLengths);\n                }\n                // Read all the sprite identifiers.\n                for (let i = 0; i < frameGroup.getNumberSprites(); i++) {\n                    frameGroup.sprites.push(this.__version >= 960 ? packet.readUInt32() : packet.readUInt16());\n                }\n                dataObject.frameGroups.push(frameGroup);\n            }\n            // Reference in a hashmap by identifier.\n            this.dataObjects[id] = dataObject;\n        }\n        //LoopedAnimation.initialize(window.gameClient);\n        console.log(`Completed loading ${this.totalObjectCount} data objects in ${Math.round(performance.now() - start)} milliseconds.`);\n        window.gameClient.interface.loadAssetCallback(\"data\", name);\n    }\n    getAnimation(id) {\n        /*\n         * Function ObjectBuffer.getAnimation\n         * Returns the internal outfit identifier of an external outfit identifier\n         */\n        if (id < 0 || id > this.effectCount) {\n            return null;\n        }\n        return this.get(this.getAnimationId(id));\n    }\n    getDistanceAnimation(id) {\n        /*\n         * Function ObjectBuffer.getDistanceAnimation\n         * Returns the internal animation identifier of an external animation identifier\n         */\n        return this.get(this.getDistanceAnimationId(id));\n    }\n    getVersion() {\n        return this.__version;\n    }\n    get(id) {\n        return this.dataObjects[id];\n    }\n    // private __createLoopedAnimations(): void {\n    //   LoopedAnimation.initialize();\n    // }\n    getAnimationId(id) {\n        if (id < 1 || id > this.effectCount) {\n            throw new Error(\"Invalid animation ID\");\n        }\n        return this.itemCount + this.outfitCount + id;\n    }\n    getDistanceAnimationId(id) {\n        if (id < 1 || id > this.distanceCount) {\n            throw new Error(\"Invalid distance animation ID\");\n        }\n        return this.itemCount + this.outfitCount + this.effectCount + id;\n    }\n    __mapVersionFlag(flag) {\n        // This always means the final flag regardless of the version.\n        if (flag === ObjectBuffer.attributes.ThingAttrLast) {\n            return flag;\n        }\n        // Specific .dat version handling.\n        if (this.__version >= 1000) {\n            if (flag === 16) {\n                return ObjectBuffer.attributes.ThingAttrNoMoveAnimation;\n            }\n            else if (flag > 16) {\n                return flag - 1;\n            }\n        }\n        else if (this.__version >= 755) {\n            if (flag === 23) {\n                return ObjectBuffer.attributes.ThingAttrFloorChange;\n            }\n        }\n        else if (this.__version >= 740) {\n            // Increment flags 1 to 15.\n            if (flag > 0 && flag <= 15) {\n                if (flag === 5)\n                    return ObjectBuffer.attributes.ThingAttrMultiUse;\n                if (flag === 6)\n                    return ObjectBuffer.attributes.ThingAttrForceUse;\n                return flag + 1;\n            }\n            else {\n                // Switch around some flags.\n                switch (flag) {\n                    case 16:\n                        return ObjectBuffer.attributes.ThingAttrLight;\n                    case 17:\n                        return ObjectBuffer.attributes.ThingAttrFloorChange;\n                    case 18:\n                        return ObjectBuffer.attributes.ThingAttrFullGround;\n                    case 19:\n                        return ObjectBuffer.attributes.ThingAttrElevation;\n                    case 20:\n                        return ObjectBuffer.attributes.ThingAttrDisplacement;\n                    case 22:\n                        return ObjectBuffer.attributes.ThingAttrMinimapColor;\n                    case 23:\n                        return ObjectBuffer.attributes.ThingAttrRotateable;\n                    case 24:\n                        return ObjectBuffer.attributes.ThingAttrLyingCorpse;\n                    case 25:\n                        return ObjectBuffer.attributes.ThingAttrHangable;\n                    case 26:\n                        return ObjectBuffer.attributes.ThingAttrHookSouth;\n                    case 27:\n                        return ObjectBuffer.attributes.ThingAttrHookEast;\n                    case 28:\n                        return ObjectBuffer.attributes.ThingAttrAnimateAlways;\n                }\n            }\n        }\n        return flag;\n    }\n    __readFlags(packet) {\n        const flags = _bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.clone();\n        const properties = {};\n        while (true) {\n            const flag = this.__mapVersionFlag(packet.readUInt8());\n            switch (flag) {\n                // End byte: we are finished reading the data flags.\n                case ObjectBuffer.attributes.ThingAttrLast: {\n                    return { flags, properties };\n                }\n                case ObjectBuffer.attributes.ThingAttrGround: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagGround);\n                    properties.speed = packet.readUInt16();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrGroundBorder: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagGroundBorder);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrOnBottom: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagOnBottom);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrOnTop: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagOnTop);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrContainer: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagContainer);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrStackable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagStackable);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrForceUse: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagForceUse);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrMultiUse: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagMultiUse);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrWritable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagWritable);\n                    // Length read is ignored here.\n                    const length = packet.readUInt16();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrWritableOnce: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagWritableOnce);\n                    const length = packet.readUInt16();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrFluidContainer: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagFluidContainer);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrSplash: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagSplash);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrNotWalkable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagNotWalkable);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrNotMoveable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagNotMoveable);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrBlockProjectile: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagBlockProjectile);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrNotPathable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagNotPathable);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrPickupable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagPickupable);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrHangable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagHangable);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrHookSouth: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagHookSouth);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrHookEast: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagHookEast);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrRotateable: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagRotateable);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrLight: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagLight);\n                    properties.light = packet.readLight();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrDontHide: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagDontHide);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrTranslucent: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagTranslucent);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrDisplacement: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagDisplacement);\n                    if (this.__version >= 755) {\n                        packet.readLight();\n                    }\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrElevation: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagElevation);\n                    properties.elevation = packet.readUInt16();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrLyingCorpse: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagLyingCorpse);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrAnimateAlways: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagAnimateAlways);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrMinimapColor: {\n                    flags.set(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagMinimapColor);\n                    properties.minimapColor = packet.readUInt16();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrLensHelp: {\n                    //TODO: \n                    //flags.set(PropBitFlag.DatFlagLensHelp);\n                    packet.readUInt16();\n                    break;\n                }\n                // Not implemented cases\n                case ObjectBuffer.attributes.ThingAttrFullGround: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrLook: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrCloth: {\n                    packet.readUInt16();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrMarket: {\n                    packet.skip(6);\n                    packet.readString();\n                    packet.skip(4);\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrUsable: {\n                    packet.readUInt16();\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrWrapable: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrUnwrapable: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrTopEffect: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrOpacity: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrNotPreWalkable: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrFloorChange: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrNoMoveAnimation: {\n                    break;\n                }\n                case ObjectBuffer.attributes.ThingAttrChargeable: {\n                    break;\n                }\n                default: {\n                    throw new Error(\"Could not parse flag \" + flag.toString(16) + \" of Tibia.dat\");\n                }\n            }\n        }\n    }\n}\nObjectBuffer.SIGNATURES = {\n    \"41BF619C\": 740,\n    \"439D5A33\": 760,\n    \"42A3\": 1098,\n};\nObjectBuffer.attributes = {\n    ThingAttrGround: 0,\n    ThingAttrGroundBorder: 1,\n    ThingAttrOnBottom: 2,\n    ThingAttrOnTop: 3,\n    ThingAttrContainer: 4,\n    ThingAttrStackable: 5,\n    ThingAttrForceUse: 6,\n    ThingAttrMultiUse: 7,\n    ThingAttrWritable: 8,\n    ThingAttrWritableOnce: 9,\n    ThingAttrFluidContainer: 10,\n    ThingAttrSplash: 11,\n    ThingAttrNotWalkable: 12,\n    ThingAttrNotMoveable: 13,\n    ThingAttrBlockProjectile: 14,\n    ThingAttrNotPathable: 15,\n    ThingAttrPickupable: 16,\n    ThingAttrHangable: 17,\n    ThingAttrHookSouth: 18,\n    ThingAttrHookEast: 19,\n    ThingAttrRotateable: 20,\n    ThingAttrLight: 21,\n    ThingAttrDontHide: 22,\n    ThingAttrTranslucent: 23,\n    ThingAttrDisplacement: 24,\n    ThingAttrElevation: 25,\n    ThingAttrLyingCorpse: 26,\n    ThingAttrAnimateAlways: 27,\n    ThingAttrMinimapColor: 28,\n    ThingAttrLensHelp: 29,\n    ThingAttrFullGround: 30,\n    ThingAttrLook: 31,\n    ThingAttrCloth: 32,\n    ThingAttrMarket: 33,\n    ThingAttrUsable: 34,\n    ThingAttrWrapable: 35,\n    ThingAttrUnwrapable: 36,\n    ThingAttrTopEffect: 37,\n    ThingAttrOpacity: 100,\n    ThingAttrNotPreWalkable: 101,\n    ThingAttrFloorChange: 252,\n    ThingAttrNoMoveAnimation: 253,\n    ThingAttrChargeable: 254,\n    ThingAttrLast: 255,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ObjectBuffer);\n\n\n//# sourceURL=webpack:///./client/src/object-buffer.ts?");

/***/ }),

/***/ "./client/src/outfit.ts":
/*!******************************!*\
  !*** ./client/src/outfit.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Outfit {\n    ;\n    constructor(outfit) {\n        this.id = outfit.id;\n        this.details = outfit.details;\n        this.equipment = outfit.equipment;\n        this.mount = outfit.mount;\n        this.mounted = outfit.mounted;\n        this.addonOne = outfit.addonOne;\n        this.addonTwo = outfit.addonTwo;\n    }\n    equals(other) {\n        return JSON.stringify(this.serialize()) === JSON.stringify(other.serialize());\n    }\n    hasLookDetails() {\n        return this.getDataObject().frameGroups[0].layers > 1;\n    }\n    copy() {\n        return new Outfit(this.serialize());\n    }\n    serialize() {\n        return {\n            id: this.id,\n            details: Object.assign({}, this.details),\n            equipment: Object.assign({}, this.equipment),\n            mount: this.mount,\n            mounted: this.mounted,\n            addonOne: this.addonOne,\n            addonTwo: this.addonTwo,\n        };\n    }\n    toString() {\n        return [\n            this.id,\n            `(${this.details.head}, ${this.details.body}, ${this.details.legs}, ${this.details.feet})`,\n            `(${this.equipment.head}, ${this.equipment.body}, ${this.equipment.legs}, ${this.equipment.feet}, ${this.equipment.lefthand}, ${this.equipment.righthand})`,\n            this.mounted ? this.mount : \"None\",\n            this.addonOne ? \"Yes\" : \"No\",\n            this.addonTwo ? \"Yes\" : \"No\",\n        ].join(\" \");\n    }\n    getSpriteBufferSize(object) {\n        return Math.ceil(Math.sqrt(object.frameGroups.reduce((a, b) => a + 4 * b.width * b.height * b.animationLength, 0)));\n    }\n    getDataObjectMount() {\n        return window.gameClient.dataObjects.getOutfit(this.mount);\n    }\n    getLeftHandDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.equipment.lefthand);\n    }\n    getRightHandDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.equipment.righthand);\n    }\n    getHairDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.equipment.hair);\n    }\n    getHeadDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.equipment.head);\n    }\n    getBodyDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.equipment.body);\n    }\n    getLegsDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.equipment.legs);\n    }\n    getFeetDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.equipment.feet);\n    }\n    getDataObject() {\n        return window.gameClient.dataObjects.getOutfit(this.id);\n    }\n    getColor(which) {\n        return Outfit.colors[which];\n    }\n}\nOutfit.colors = [\n    0xFFFFFF, 0xBFD4FF, 0xBFE9FF, 0xBFFFFF, 0xBFFFE9, 0xBFFFD4, 0xBFFFBF,\n    0xD4FFBF, 0xE9FFBF, 0xFFFFBF, 0xFFE9BF, 0xFFD4BF, 0xFFBFBF, 0xFFBFD4,\n    0xFFBFE9, 0xFFBFFF, 0xE9BFFF, 0xD4BFFF, 0xBFBFFF, 0xDADADA, 0x8F9FBF,\n    0x8FAFBF, 0x8FBFBF, 0x8FBFAF, 0x8FBF9F, 0x8FBF8F, 0x9FBF8F, 0xAFBF8F,\n    0xBFBF8F, 0xBFAF8F, 0xBF9F8F, 0xBF8F8F, 0xBF8F9F, 0xBF8FAF, 0xBF8FBF,\n    0xAF8FBF, 0x9F8FBF, 0x8F8FBF, 0xB6B6B6, 0x5F7FBF, 0x8FAFBF, 0x5FBFBF,\n    0x5FBF9F, 0x5FBF7F, 0x5FBF5F, 0x7FBF5F, 0x9FBF5F, 0xBFBF5F, 0xBF9F5F,\n    0xBF7F5F, 0xBF5F5F, 0xBF5F7F, 0xBF5F9F, 0xBF5FBF, 0x9F5FBF, 0x7F5FBF,\n    0x5F5FBF, 0x919191, 0x3F6ABF, 0x3F94BF, 0x3FBFBF, 0x3FBF94, 0x3FBF6A,\n    0x3FBF3F, 0x6ABF3F, 0x94BF3F, 0xBFBF3F, 0xBF943F, 0xBF6A3F, 0xBF3F3F,\n    0xBF3F6A, 0xBF3F94, 0xBF3FBF, 0x943FBF, 0x6A3FBF, 0x3F3FBF, 0x6D6D6D,\n    0x0055FF, 0x00AAFF, 0x00FFFF, 0x00FFAA, 0x00FF54, 0x00FF00, 0x54FF00,\n    0xAAFF00, 0xFFFF00, 0xFFA900, 0xFF5500, 0xFF0000, 0xFF0055, 0xFF00A9,\n    0xFF00FE, 0xAA00FF, 0x5500FF, 0x0000FF, 0x484848, 0x003FBF, 0x007FBF,\n    0x00BFBF, 0x00BF7F, 0x00BF3F, 0x00BF00, 0x3FBF00, 0x7FBF00, 0xBFBF00,\n    0xBF7F00, 0xBF3F00, 0xBF0000, 0xBF003F, 0xBF007F, 0xBF00BF, 0x7F00BF,\n    0x3F00BF, 0x0000BF, 0x242424, 0x002A7F, 0x00557F, 0x007F7F, 0x007F55,\n    0x007F2A, 0x007F00, 0x2A7F00, 0x557F00, 0x7F7F00, 0x7F5400, 0x7F2A00,\n    0x7F0000, 0x7F002A, 0x7F0054, 0x7F007F, 0x55007F, 0x2A007F, 0x00007F\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Outfit);\n\n\n//# sourceURL=webpack:///./client/src/outfit.ts?");

/***/ }),

/***/ "./client/src/outline-canvas.ts":
/*!**************************************!*\
  !*** ./client/src/outline-canvas.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OutlineCanvas)\n/* harmony export */ });\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n\nclass OutlineCanvas extends _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(id, width, height) {\n        super(id, width, height);\n        this.__currentIdentifier = 0;\n        this.context.fillStyle = \"white\";\n    }\n    createOutline(spriteIdentifier) {\n        if (spriteIdentifier === 0 || spriteIdentifier === this.__currentIdentifier) {\n            return;\n        }\n        this.__currentIdentifier = spriteIdentifier;\n        this.context.globalCompositeOperation = \"source-over\";\n        this.clear();\n        const position = window.gameClient.spriteBuffer.getSpritePosition(spriteIdentifier);\n        this.context.filter = \"blur(2px)\";\n        this.drawOutlineSprite(position);\n        this.context.filter = \"none\";\n        this.context.globalCompositeOperation = \"source-in\";\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.context.globalCompositeOperation = \"destination-out\";\n        this.drawOutlineSprite(position);\n    }\n    drawOutlineSprite(position) {\n        this.context.drawImage(window.gameClient.spriteBuffer.__spriteBufferCanvas.canvas, position.x * 32, position.y * 32, 32, 32, 1, 1, 32, 32);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/outline-canvas.ts?");

/***/ }),

/***/ "./client/src/packet-handler.ts":
/*!**************************************!*\
  !*** ./client/src/packet-handler.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _book__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./book */ \"./client/src/book.ts\");\n/* harmony import */ var _condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./condition */ \"./client/src/condition.ts\");\n/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./container */ \"./client/src/container.ts\");\n/* harmony import */ var _creature__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./creature */ \"./client/src/creature.ts\");\n/* harmony import */ var _fluid_container__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fluid-container */ \"./client/src/fluid-container.ts\");\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./item */ \"./client/src/item.ts\");\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./thing */ \"./client/src/thing.ts\");\n\n\n\n\n\n\n\n\n\nclass PacketHandler {\n    constructor() {\n        /*\n         * Class PacketHandler\n         * Containers handler functions for all incoming network packets from the gameserver\n         * This usually delegates to the gameClient but is a central place for collections\n         */\n    }\n    handlePropertyChange(packet) {\n        let creature = window.gameClient.world.getCreature(packet.guid);\n        if (!creature)\n            return;\n        console.log(`player property: ${packet.property}, value: ${packet.value}`);\n        switch (packet.property) {\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.PROPERTIES.HEALTH:\n                creature.vitals.state.health = packet.value;\n                break;\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.PROPERTIES.HEALTH_MAX:\n                creature.vitals.state.maxHealth = packet.value;\n                break;\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.PROPERTIES.MANA:\n                creature.vitals.state.mana = packet.value;\n                break;\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.PROPERTIES.ENERGY:\n                creature.vitals.state.energy = packet.value;\n                break;\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.PROPERTIES.DIRECTION:\n                creature.__setLookDirection(packet.value);\n                break;\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_5__.CONST.PROPERTIES.CAPACITY:\n                creature.vitals.capacity = packet.value;\n                break;\n        }\n    }\n    handleWorldTime(time) {\n        window.gameClient.world.clock.setPhase(time);\n    }\n    handleSetTarget(id) {\n        if (id === 0) {\n            window.gameClient.player.setTarget(null);\n            return;\n        }\n        let creature = window.gameClient.world.getCreature(id);\n        if (!creature)\n            return;\n        window.gameClient.player.setTarget(creature);\n    }\n    handleCombatLock(bool) {\n        const condition = {\n            toggle: bool,\n            guid: window.gameClient.player.id,\n            cid: _condition__WEBPACK_IMPORTED_MODULE_1__[\"default\"].COMBAT_LOCK,\n        };\n        this.handleCondition(condition);\n    }\n    handleCondition(packet) {\n        let creature = window.gameClient.world.getCreature(packet.guid);\n        if (!creature)\n            return;\n        if (packet.toggle) {\n            creature.addCondition(packet.cid);\n        }\n        else {\n            creature.removeCondition(packet.cid);\n        }\n    }\n    handleTradeOffer(packet) {\n        window.gameClient.interface.modalManager.open(\"offer-modal\", packet);\n    }\n    handlePlayerStatistics(packet) {\n        if (!window.gameClient.player)\n            return;\n        window.gameClient.player.vitals.state.capacity = packet.capacity;\n        window.gameClient.player.vitals.state.attack = packet.attack;\n        window.gameClient.player.vitals.state.armor = packet.armor;\n        window.gameClient.player.vitals.speed = packet.speed;\n    }\n    handleOpenChannel(packet) {\n        window.gameClient.interface.channelManager.handleOpenChannel(packet);\n    }\n    handleAddAchievement(packet) {\n        setTimeout(() => {\n            document.getElementById(\"achievement\").innerHTML = `${packet.title}<hr>${packet.description}`;\n            document.getElementById(\"achievement\").className = \"canvas-notification visible\";\n        }, 1000);\n        setTimeout(() => {\n            document.getElementById(\"achievement\").className = \"canvas-notification hidden\";\n        }, 2000);\n    }\n    handleSendDistanceEffect(packet) {\n        window.gameClient.renderer.addDistanceAnimation(packet);\n    }\n    handleSendMagicEffect(packet) {\n        window.gameClient.renderer.addPositionAnimation(packet);\n    }\n    handleTransformTile(packet) {\n        window.gameClient.world.handleTransformTile(packet);\n    }\n    handleAcceptLogin(packet) {\n        window.gameClient.handleAcceptLogin(packet);\n    }\n    handleRemoveFriend(name) {\n        window.gameClient.player.friendlist.remove(name);\n    }\n    handleAddFriend(name) {\n        window.gameClient.player.friendlist.add({ name: name, online: true });\n    }\n    handleCancelMessage(packet) {\n        window.gameClient.interface.notificationManager.setCancelMessage(packet);\n    }\n    handleServerData(packet) {\n        window.gameClient.setServerData(packet);\n    }\n    handleEmote(packet) {\n        let sourceCreature = window.gameClient.world.getCreature(packet.id);\n        if (!sourceCreature)\n            return;\n        window.gameClient.interface.screenElementManager.createFloatingTextElement(`<i>${packet.message}</i>`, sourceCreature.getPosition(), packet.color);\n    }\n    handleIncreaseHealth(packet) {\n        let sourceCreature = window.gameClient.world.getCreature(packet.id);\n        if (!sourceCreature)\n            return;\n        let health = Math.min(packet.amount, sourceCreature.maxHealth - sourceCreature.state.health);\n        if (health === 0)\n            return;\n        sourceCreature.increaseHealth(health);\n        window.gameClient.interface.screenElementManager.createFloatingTextElement(health.toString(), sourceCreature.getPosition(), _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.LIGHTGREEN);\n        if (window.gameClient.player === sourceCreature) {\n            window.gameClient.interface.channelManager.addConsoleMessage(`You heal for ${health} health.`, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.WHITE);\n        }\n    }\n    handleEnterZone(packet) {\n        window.gameClient.interface.notificationManager.setZoneMessage(packet.name, packet.title);\n        window.gameClient.renderer.weatherCanvas.setWeather(packet.weather);\n        window.gameClient.renderer.setAmbientColor(packet.ambient.r, packet.ambient.g, packet.ambient.b, packet.ambient.a);\n        window.gameClient.interface.soundManager.setAmbientTrace(packet.music);\n    }\n    handleLatency() {\n        window.gameClient.networkManager.state.latency = performance.now() - window.gameClient.networkManager.__latency;\n    }\n    handleChunk(chunk) {\n        if (window.gameClient.world.chunks.some((c) => c.id === chunk.id))\n            return;\n        window.gameClient.world.chunks.push(chunk);\n        window.gameClient.world.chunks.sort((a, b) => a.id - b.id);\n        window.gameClient.world.referenceTileNeighbours();\n    }\n    handleRemoveItem(packet) {\n        let tile = window.gameClient.world.getTileFromWorldPosition(packet.position);\n        if (!tile)\n            return;\n        tile.removeItem(packet.index, packet.count);\n    }\n    handleAdvanceLevel() {\n        //TODO: \n        //window.gameClient.player!.advanceLevel();\n    }\n    handleServerError(message) {\n        window.gameClient.interface.modalManager.open(\"floater-connecting\", message);\n    }\n    handleServerMessage(string) {\n        window.gameClient.interface.notificationManager.setServerMessage(string, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.RED);\n    }\n    getTileUppie(position) {\n        let tile = window.gameClient.world.getTileFromWorldPosition(position);\n        if (tile && !tile.isOccupied()) {\n            return tile;\n        }\n        if ((tile === null || tile === void 0 ? void 0 : tile.id) === 0) {\n            return window.gameClient.world.getTileFromWorldPosition(position.down());\n        }\n        if (window.gameClient.player.getTile().hasMaximumElevation()) {\n            return window.gameClient.world.getTileFromWorldPosition(position.up());\n        }\n        return tile;\n    }\n    clientSideMoveCheck(position) {\n        let tile = window.gameClient.world.getTileFromWorldPosition(position);\n        if (tile && tile.monsters.size > 0) {\n            return true;\n        }\n        if ((tile === null || tile === void 0 ? void 0 : tile.id) === 0) {\n            if (window.gameClient.player.vitals.position.isDiagonal(position)) {\n                return true;\n            }\n            let belowTile = window.gameClient.world.getTileFromWorldPosition(position.down());\n            if (belowTile && belowTile.hasMaximumElevation() && !belowTile.isOccupied()) {\n                return false;\n            }\n        }\n        if (window.gameClient.player.getTile().hasMaximumElevation()) {\n            if (window.gameClient.player.vitals.position.isDiagonal(position)) {\n                return true;\n            }\n            let upTile = window.gameClient.world.getTileFromWorldPosition(position.up());\n            let aboveTile = window.gameClient.world.getTileFromWorldPosition(window.gameClient.player.vitals.position.up());\n            if ((!aboveTile || aboveTile.id === 0) && upTile && !upTile.isOccupied()) {\n                return false;\n            }\n        }\n        return !!(tile === null || tile === void 0 ? void 0 : tile.isOccupied());\n    }\n    handlePlayerMove(position) {\n        if (this.clientSideMoveCheck(position)) {\n            window.gameClient.interface.setCancelMessage(\"You cannot walk here.\");\n            return false;\n        }\n        let tile = this.getTileUppie(position);\n        let duration = window.gameClient.player.getStepDuration(tile);\n        window.gameClient.world.handleCreatureMove(window.gameClient.player.id, position, duration);\n        return true;\n    }\n    handleDamageEvent(packet) {\n        let sourceCreature = window.gameClient.world.getCreature(packet.source);\n        let targetCreature = window.gameClient.world.getCreature(packet.target);\n        if (packet.source === 0 && targetCreature) {\n            this.__handleDamageEnvironment(targetCreature, packet.damage, packet.color);\n            return;\n        }\n        if (!sourceCreature || !targetCreature) {\n            return;\n        }\n        targetCreature.addAnimation(1);\n        if (targetCreature === window.gameClient.player && sourceCreature !== window.gameClient.player) {\n            sourceCreature.addBoxAnimation(_interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.BLACK);\n        }\n        targetCreature.increaseHealth(-packet.damage);\n        if (window.gameClient.player === targetCreature) {\n            window.gameClient.interface.channelManager.addConsoleMessage(`You lose ${packet.damage} health to a ${sourceCreature.name}.`, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.WHITE);\n        }\n        else if (window.gameClient.player === sourceCreature) {\n            window.gameClient.interface.channelManager.addConsoleMessage(`You deal ${packet.damage} damage to a ${targetCreature.name}.`, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.WHITE);\n        }\n        window.gameClient.interface.screenElementManager.createFloatingTextElement(packet.damage.toString(), targetCreature.getPosition(), packet.color);\n    }\n    handleChangeOutfit(packet) {\n        let creature = window.gameClient.world.getCreature(packet.id);\n        if (!creature)\n            return;\n        creature.serverSetOutfit(packet.outfit);\n    }\n    getLiquidText(liquidType) {\n        switch (liquidType) {\n            case 0:\n                return null;\n            case 1:\n            case 9:\n                return \"water\";\n            case 2:\n                return \"blood\";\n            case 3:\n                return \"beer\";\n            case 4:\n            case 12:\n                return \"slime\";\n            case 5:\n                return \"lemonade\";\n            case 6:\n                return \"milk\";\n            case 7:\n                return \"mana fluid\";\n            case 10:\n                return \"health fluid\";\n            case 11:\n                return \"oil\";\n            case 13:\n                return \"urine\";\n            case 14:\n                return \"coconut milk\";\n            case 15:\n                return \"wine\";\n            case 19:\n                return \"mud\";\n            case 21:\n                return \"fruit juice\";\n            case 26:\n                return \"lava\";\n            case 27:\n                return \"rum\";\n            default:\n                return \"unknown substance\";\n        }\n    }\n    handleLiquidMessage(packet) {\n        let liquid = this.getLiquidText(packet.count);\n        if (liquid === null) {\n            return `You see an empty ${packet.name}.`;\n        }\n        return `You see ${packet.article} ${packet.name} of ${liquid}.`;\n    }\n    getItemDescription(packet) {\n        let thing = new _item__WEBPACK_IMPORTED_MODULE_7__[\"default\"](packet.cid, packet.count);\n        if (thing.isFluidContainer() || thing.isSplash()) {\n            return this.handleLiquidMessage(packet);\n        }\n        if (packet.count === 0 || packet.count === 1) {\n            return `You see ${packet.article} ${packet.name}.`;\n        }\n        if (packet.name.endsWith(\"s\")) {\n            return `You see ${packet.count} ${packet.name}es.`;\n        }\n        else {\n            return `You see ${packet.count} ${packet.name}s.`;\n        }\n    }\n    handleCharacterInformation(packet) {\n        const gender = packet.gender === 0 ? \"He\" : \"She\";\n        const message = `You see ${packet.name}. ${gender} is level ${packet.level}.`;\n        window.gameClient.interface.notificationManager.setServerMessage(message, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.LIGHTGREEN);\n        window.gameClient.interface.channelManager.addConsoleMessage(message, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.LIGHTGREEN);\n    }\n    handleItemInformation(packet) {\n        let message = this.getItemDescription(packet);\n        let thing = new _thing__WEBPACK_IMPORTED_MODULE_8__[\"default\"](packet.cid);\n        if (packet.description) {\n            message += ` ${packet.description}`;\n        }\n        if (packet.distanceReadable) {\n            message += ` ${packet.distanceReadable}`;\n        }\n        if (packet.weight) {\n            const weightText = (1e-2 * packet.weight).toFixed(2);\n            if (thing.isStackable() && packet.count > 1) {\n                message += ` They weigh ${weightText}oz.`;\n            }\n            else {\n                message += ` It weighs ${weightText}oz.`;\n            }\n        }\n        if (packet.armor !== 0) {\n            message += ` (Armor: ${packet.armor})`;\n        }\n        if (packet.attack !== 0) {\n            message += ` (Attack: ${packet.attack})`;\n        }\n        if (window.gameClient.renderer.debugger.isActive()) {\n            message += ` (SID: ${packet.sid}, CID: ${packet.cid})`;\n        }\n        if (packet.x && packet.y) {\n            message += ` (X: ${packet.x}, Y: ${packet.y}, Z: ${packet.z})`;\n        }\n        window.gameClient.interface.notificationManager.setServerMessage(message, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.LIGHTGREEN);\n        window.gameClient.interface.channelManager.addConsoleMessage(message, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.LIGHTGREEN);\n    }\n    handleEntityRemove(id) {\n        let creature = window.gameClient.world.getCreature(id);\n        if (!creature || window.gameClient.isSelf(creature))\n            return;\n        let tile = window.gameClient.world.getTileFromWorldPosition(creature.getPosition());\n        if (!tile)\n            return;\n        tile.monsters.delete(creature);\n        if (window.gameClient.player.__target === creature) {\n            window.gameClient.player.setTarget(null);\n        }\n        creature.remove();\n        delete window.gameClient.world.activeCreatures[id];\n        window.gameClient.interface.windowManager.getWindow(\"battle-window\").removeCreature(id);\n    }\n    handleContainerItemRemove(packet) {\n        let container = window.gameClient.player.getContainer(packet.containerIndex);\n        if (!container)\n            return;\n        container.removeItem(packet.slotIndex, packet.count);\n    }\n    handleContainerAddItem(packet) {\n        let container = window.gameClient.player.getContainer(packet.containerId);\n        if (!container)\n            return;\n        container.addItem(new _item__WEBPACK_IMPORTED_MODULE_7__[\"default\"](packet.itemId, packet.count), packet.slot);\n    }\n    handleContainerOpen(packet) {\n        let container = new _container__WEBPACK_IMPORTED_MODULE_2__[\"default\"](packet);\n        container.createDOM(packet.equipped ? `${packet.title}[E]` : packet.title, packet.items);\n        window.gameClient.interface.windowManager.register(container.window);\n        window.gameClient.player.openContainer(container);\n    }\n    handleContainerClose(id) {\n        let container = window.gameClient.player.getContainer(id);\n        if (!container)\n            return;\n        window.gameClient.player.removeContainer(container);\n    }\n    handlePlayerDisconnect(name) {\n        window.gameClient.player.friendlist.setOnlineStatus(name, false);\n    }\n    handlePlayerConnect(name) {\n        window.gameClient.player.friendlist.setOnlineStatus(name, true);\n    }\n    handleCreatureServerMove(packet) {\n        let entity = window.gameClient.world.getCreature(packet.id);\n        if (!entity)\n            return;\n        window.gameClient.world.__handleCreatureMove(packet.id, packet.position, packet.speed);\n        if (window.gameClient.isSelf(entity)) {\n            window.gameClient.player.confirmClientWalk();\n            window.gameClient.world.checkEntityReferences();\n            window.gameClient.world.checkChunks();\n        }\n    }\n    handleReadText(packet) {\n        window.gameClient.interface.modalManager.open(\"readable-modal\", packet);\n    }\n    handleChannelMessage(packet) {\n        let channel = window.gameClient.interface.channelManager.getChannelById(packet.id);\n        if (!channel)\n            return;\n        channel.addMessage(packet.message, 0, packet.name, packet.color);\n    }\n    handleDefaultMessage(packet) {\n        let entity = window.gameClient.world.getCreature(packet.id);\n        if (!entity || !window.gameClient.player.canSeeSmall(entity))\n            return;\n        entity.say(packet);\n    }\n    handleEntityTeleport(packet) {\n        let entity = window.gameClient.world.getCreature(packet.id);\n        if (!entity)\n            return;\n        entity.setPosition(packet.position);\n        if (window.gameClient.isSelf(entity)) {\n            window.gameClient.world.handleSelfTeleport();\n        }\n    }\n    handleEntityReference(packet) {\n        if (window.gameClient.player && packet.id === window.gameClient.player.id) {\n            return window.gameClient.world.addCreature(window.gameClient.player);\n        }\n        console.log(\"handleEntityReference: \", packet);\n        window.gameClient.world.createCreature(packet.id, new _creature__WEBPACK_IMPORTED_MODULE_3__[\"default\"](packet));\n    }\n    handleCreatureTurn(packet) {\n        let creature = window.gameClient.world.getCreature(packet.id);\n        if (!creature)\n            return;\n        creature.setTurnBuffer(packet.direction);\n    }\n    handleReceivePrivateMessage(packet) {\n        let channel = window.gameClient.interface.channelManager.getChannel(packet.name);\n        if (!channel) {\n            channel = window.gameClient.interface.channelManager.getChannel(\"Default\");\n        }\n        channel.addPrivateMessage(packet.message, packet.name);\n    }\n    handleGainExperience(packet) {\n        let creature = window.gameClient.world.getCreature(packet.id);\n        if (!creature) {\n            return console.error(\"Received experience gain for unknown creature.\");\n        }\n        window.gameClient.interface.screenElementManager.createFloatingTextElement(packet.experience.toString(), creature.getPosition(), _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.WHITE);\n        if (window.gameClient.player !== creature)\n            return;\n        window.gameClient.interface.channelManager.addConsoleMessage(`You gain ${packet.experience} experience.`, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.WHITE);\n        creature.addExperience(packet.experience);\n    }\n    handleItemAdd(packet) {\n        let thing = new _thing__WEBPACK_IMPORTED_MODULE_8__[\"default\"](packet.id);\n        if (thing.hasFlag(\"DatFlagWritableOnce\") || thing.hasFlag(\"DatFlagWritable\")) {\n            return window.gameClient.world.addItem(packet.position, new _book__WEBPACK_IMPORTED_MODULE_0__[\"default\"](packet.id), packet.slot);\n        }\n        if (thing.isFluidContainer() || thing.isSplash()) {\n            return window.gameClient.world.addItem(packet.position, new _fluid_container__WEBPACK_IMPORTED_MODULE_4__[\"default\"](packet.id, packet.count), packet.slot);\n        }\n        window.gameClient.world.addItem(packet.position, new _item__WEBPACK_IMPORTED_MODULE_7__[\"default\"](packet.id, packet.count), packet.slot);\n    }\n    __handleDamageEnvironment(targetCreature, damage, color) {\n        window.gameClient.interface.screenElementManager.createFloatingTextElement(damage.toString(), targetCreature.getPosition(), color);\n        window.gameClient.interface.channelManager.addConsoleMessage(`You lose ${damage} health.`, _interface__WEBPACK_IMPORTED_MODULE_6__[\"default\"].COLORS.WHITE);\n        targetCreature.increaseHealth(-damage);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PacketHandler);\n\n\n//# sourceURL=webpack:///./client/src/packet-handler.ts?");

/***/ }),

/***/ "./client/src/packet.ts":
/*!******************************!*\
  !*** ./client/src/packet.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Packet)\n/* harmony export */ });\n\nclass Packet {\n    constructor() {\n        /*\n         * Class Packet\n         * Container for a packet (writeable or readable)\n         */\n        this.index = 0;\n    }\n    advance(amount) {\n        /*\n         * Function Packet.advance\n         * Advances the packet by a number of bytes\n         */\n        this.index += amount;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/packet.ts?");

/***/ }),

/***/ "./client/src/packetreader.ts":
/*!************************************!*\
  !*** ./client/src/packetreader.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PacketReader)\n/* harmony export */ });\n/* harmony import */ var _chunk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk */ \"./client/src/chunk.ts\");\n/* harmony import */ var _fluid_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fluid-container */ \"./client/src/fluid-container.ts\");\n/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item */ \"./client/src/item.ts\");\n/* harmony import */ var _outfit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./outfit */ \"./client/src/outfit.ts\");\n/* harmony import */ var _packet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./packet */ \"./client/src/packet.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _rgba__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./rgba */ \"./client/src/rgba.ts\");\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./thing */ \"./client/src/thing.ts\");\n\n\n\n\n\n\n\n\nclass PacketReader extends _packet__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n    ;\n    constructor(buffer) {\n        super();\n        this.index = 0;\n        this.buffer = new Uint8Array(buffer);\n    }\n    slice(start, end) {\n        /*\n         * Function PacketReader.slice\n         * Returns the slice of a packetreader class as a new packetreader class\n         */\n        return new PacketReader(this.buffer.slice(start, end));\n    }\n    readCharacterStatistics() {\n        return {\n            capacity: this.readUInt32(),\n            attack: this.readUInt8(),\n            armor: this.readUInt8(),\n            speed: this.readUInt16(),\n        };\n    }\n    readChangeOutfit() {\n        return {\n            id: this.readUInt32(),\n            outfit: this.readOutfit(),\n        };\n    }\n    __readChunkTiles() {\n        /*\n         * Function PacketReader.__readChunkTiles\n         * Reads all tile identifiers from the passed chunk\n         */\n        let tiles = [];\n        for (let i = 0; i < 8; i++) {\n            let ntiles = this.readUInt8();\n            // Read the number of tiles in a chunk\n            for (let j = 0; j < _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNumberTilesLayer(); j++) {\n                if (ntiles === 0) {\n                    tiles.push({ id: 0, flags: 0, items: [] });\n                }\n                else {\n                    tiles.push({\n                        id: this.readUInt16(),\n                        flags: this.readUInt8(),\n                        items: this.readItems(),\n                    });\n                }\n            }\n        }\n        return tiles;\n    }\n    readContainerItemAdd() {\n        return {\n            containerId: this.readUInt32(),\n            slot: this.readUInt8(),\n            itemId: this.readUInt16(),\n            count: this.readUInt8(),\n        };\n    }\n    readTileItemAdd() {\n        return {\n            id: this.readUInt16(),\n            count: this.readUInt8(),\n            position: this.readPosition(),\n            slot: this.readUInt8(),\n        };\n    }\n    readCreatureTurn() {\n        return {\n            id: this.readUInt32(),\n            direction: this.readUInt8(),\n        };\n    }\n    readDistanceEffect() {\n        return {\n            from: this.readPosition(),\n            to: this.readPosition(),\n            type: this.readUInt8(),\n        };\n    }\n    readTransformTile() {\n        return {\n            position: this.readPosition(),\n            id: this.readUInt16(),\n        };\n    }\n    readProperty() {\n        return {\n            guid: this.readUInt32(),\n            property: this.readUInt8(),\n            value: this.readUInt32(),\n        };\n    }\n    readCharacterInformation() {\n        return {\n            name: this.readString(),\n            level: this.readUInt16(),\n            gender: this.readUInt8(),\n        };\n    }\n    readToggleCondition() {\n        return {\n            guid: this.readUInt32(),\n            toggle: this.readBoolean(),\n            cid: this.readUInt16(),\n        };\n    }\n    readCastSpell() {\n        return {\n            id: this.readUInt16(),\n            cooldown: this.readUInt32(),\n        };\n    }\n    readSingleTradeOffer() {\n        return {\n            id: this.readUInt16(),\n            name: this.readString(),\n            price: this.readUInt32(),\n            type: this.readBoolean() ? \"sell\" : \"buy\",\n        };\n    }\n    readTradeOffer() {\n        let id = this.readUInt32();\n        let offers = [];\n        let length = this.readUInt8();\n        for (let i = 0; i < length; i++) {\n            offers.push(this.readSingleTradeOffer());\n        }\n        return { id, offers };\n    }\n    readReadable() {\n        return {\n            writeable: this.readBoolean(),\n            content: this.readString(),\n            name: this.readString(),\n        };\n    }\n    readAddAchievement() {\n        return {\n            title: this.readString(),\n            description: this.readString(),\n        };\n    }\n    readZoneInformation() {\n        return {\n            name: this.readString(),\n            title: this.readString(),\n            music: this.readString(),\n            weather: this.readUInt8() / 255,\n            ambient: new _rgba__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.readUInt8(), this.readUInt8(), this.readUInt8(), this.readUInt8()),\n            rain: this.readBoolean(),\n        };\n    }\n    readDefaultMessage() {\n        return {\n            id: this.readUInt32(),\n            type: this.readUInt8(),\n            message: this.readString(),\n            color: this.readUInt8(),\n        };\n    }\n    readFriend() {\n        return {\n            name: this.readString(),\n            online: this.readBoolean(),\n        };\n    }\n    readAnimationLength() {\n        return {\n            min: this.readUInt32(),\n            max: this.readUInt32(),\n        };\n    }\n    readLight() {\n        return {\n            level: this.readUInt16(),\n            color: this.readUInt16(),\n        };\n    }\n    readRemoveItem() {\n        return {\n            position: this.readPosition(),\n            index: this.readUInt8(),\n            count: this.readUInt8(),\n        };\n    }\n    readContainerItemRemove() {\n        return {\n            containerIndex: this.readUInt32(),\n            slotIndex: this.readUInt8(),\n            count: this.readUInt8(),\n        };\n    }\n    readRGB() {\n        /*\n         * Function PacketReader.readRGB\n         * Reads the R, G, B colors and puts A to 0xFF in a single 32-bit int\n         */\n        return (this.buffer[this.index++] +\n            (this.buffer[this.index++] << 8) +\n            (this.buffer[this.index++] << 16));\n    }\n    readGainExperience() {\n        return {\n            id: this.readUInt32(),\n            experience: this.readUInt16(),\n        };\n    }\n    readDamageEvent() {\n        return {\n            source: this.readUInt32(),\n            target: this.readUInt32(),\n            damage: this.readUInt16(),\n            color: this.readUInt8(),\n        };\n    }\n    readIncreaseHealth() {\n        return {\n            id: this.readUInt32(),\n            amount: this.readUInt16(),\n        };\n    }\n    readOpenChannel() {\n        return {\n            id: this.readUInt32(),\n            name: this.readString(),\n        };\n    }\n    readInt8() {\n        /*\n         * Function PacketReader.readInt8\n         * Reads a signed 8-bit integer from the packet\n         */\n        let value = this.buffer[this.index++];\n        return value << 24 >> 24; // Ensure correct sign extension\n    }\n    readOpenContainer() {\n        return {\n            cid: this.readUInt32(),\n            id: this.readUInt16(),\n            title: this.readString(),\n            items: this.readItems(),\n        };\n    }\n    readUInt8() {\n        /*\n         * Function PacketReader.readUInt8\n         * Reads an unsigned 8-bit integer from the packet\n         */\n        return this.buffer[this.index++];\n    }\n    readPosition() {\n        /*\n         * Function PacketReader.readPosition\n         * Reads a position from the packet\n         */\n        return new _position__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.readUInt16(), this.readUInt16(), this.readUInt16());\n    }\n    readCreatureTeleport() {\n        return {\n            id: this.readUInt32(),\n            position: this.readPosition(),\n        };\n    }\n    readEntityMove() {\n        const entityMove = {\n            id: this.readUInt32(),\n            position: this.readPosition(),\n            speed: this.readUInt16(),\n        };\n        return entityMove;\n    }\n    readServerData() {\n        const width = this.readUInt16();\n        const height = this.readUInt16();\n        const depth = this.readUInt8();\n        const chunkWidth = this.readUInt8();\n        const chunkHeight = this.readUInt8();\n        const chunkDepth = this.readUInt8();\n        const tick = this.readUInt8();\n        const clock = this.readUInt16();\n        const version = this.readString();\n        const clientVersion = this.readUInt16();\n        return {\n            width,\n            height,\n            depth,\n            chunk: { width: chunkWidth, height: chunkHeight, depth: chunkDepth },\n            tick,\n            clock,\n            version,\n            clientVersion,\n        };\n    }\n    readUInt16() {\n        /*\n         * Function PacketReader.readUInt16\n         * Reads an unsigned 16-bit integer from the packet\n         */\n        return this.buffer[this.index++] + (this.buffer[this.index++] << 8);\n    }\n    readUInt32() {\n        /*\n         * Function PacketReader.readUInt32\n         * Reads an unsigned 32-bit integer from the packet\n         */\n        return this.buffer[this.index++] + (this.buffer[this.index++] << 8) + (this.buffer[this.index++] << 16) + (this.buffer[this.index++] << 24);\n    }\n    readThing(id, count) {\n        let thing = new _thing__WEBPACK_IMPORTED_MODULE_7__[\"default\"](id);\n        if (thing.isFluidContainer() || thing.isSplash()) {\n            return new _fluid_container__WEBPACK_IMPORTED_MODULE_1__[\"default\"](id, count);\n        }\n        return new _item__WEBPACK_IMPORTED_MODULE_2__[\"default\"](id, count);\n    }\n    readItem() {\n        /*\n         * Function PacketReader.readItem\n         * Reads a single item from the buffer\n         */\n        let item = this.readUInt16();\n        let count = this.readUInt8();\n        if (item === 0) {\n            return null;\n        }\n        return this.readThing(item, count);\n    }\n    readItems() {\n        /*\n         * Function PacketReader.readItems\n         * Reads a consecutive number of items\n         */\n        let size = this.readUInt8();\n        let items = [];\n        for (let i = 0; i < size; i++) {\n            let item = this.readItem();\n            if (item)\n                items.push(item);\n        }\n        return items;\n    }\n    readString() {\n        /*\n         * Function PacketReader.readString\n         * Reads a string from the packet\n         */\n        let length = this.readUInt16();\n        if (length === 0) {\n            return \"\";\n        }\n        let string = new TextDecoder(\"utf-8\").decode(this.buffer.slice(this.index, this.index + length));\n        this.index += length;\n        return string;\n    }\n    readBoolean() {\n        /*\n         * Function PacketReader.readBoolean\n         * Reads a boolean from the packet; an uint8 either 0 or 1\n         */\n        return this.readUInt8() === 1;\n    }\n    readOutfit() {\n        return new _outfit__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n            id: this.readUInt16(),\n            details: this.readOutfitDetails(),\n            equipment: this.readOutfitEquipment(),\n            mount: this.readUInt16(),\n            mounted: this.readBoolean(),\n            addonOne: this.readBoolean(),\n            addonTwo: this.readBoolean(),\n        });\n    }\n    readOutfitEquipment() {\n        return {\n            hair: this.readUInt16(),\n            head: this.readUInt16(),\n            body: this.readUInt16(),\n            legs: this.readUInt16(),\n            feet: this.readUInt16(),\n            lefthand: this.readUInt16(),\n            righthand: this.readUInt16(),\n        };\n    }\n    readOutfitDetails() {\n        return {\n            head: this.readUInt8(),\n            body: this.readUInt8(),\n            legs: this.readUInt8(),\n            feet: this.readUInt8(),\n        };\n    }\n    readCreatureType() {\n        let type = this.readUInt8();\n        switch (type) {\n            case 0:\n                return \"Player\";\n            case 1:\n                return \"Monster\";\n            case 2:\n                return \"NPC\";\n            default:\n                throw new Error(\"Unknown creature type\");\n        }\n    }\n    readCreatureInfo() {\n        return {\n            id: this.readUInt32(),\n            type: this.readCreatureType(),\n            position: this.readPosition(),\n            direction: this.readUInt8(),\n            outfit: this.readOutfit(),\n            health: this.readUInt32(),\n            maxHealth: this.readUInt32(),\n            speed: this.readUInt16(),\n            name: this.readString(),\n            conditions: this.readConditions(),\n        };\n    }\n    readConditions() {\n        let size = this.readUInt8();\n        let conditions = [];\n        for (let i = 0; i < size; i++) {\n            conditions.push(this.readUInt8());\n        }\n        return conditions;\n    }\n    readChunkData() {\n        let id = this.readUInt32();\n        let position = this.readPosition();\n        let tiles = this.__readChunkTiles();\n        return new _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"](id, position, tiles);\n    }\n    readPrivateMessage() {\n        return {\n            name: this.readString(),\n            message: this.readString(),\n        };\n    }\n    readChannelMessage() {\n        /*\n         * Function PacketReader.readChannelMessage\n         * Reads a channel message\n         */\n        return {\n            id: this.readUInt32(),\n            name: this.readString(),\n            message: this.readString(),\n            color: this.readUInt8(),\n        };\n    }\n    readItemInformation() {\n        /*\n         * Function PacketReader.readItemInformation\n         * Reads item information from a packet\n         */\n        const itemInfo = {\n            sid: this.readUInt16(),\n            cid: this.readUInt16(),\n            weight: this.readUInt32(),\n            attack: this.readUInt8(),\n            armor: this.readUInt8(),\n            distanceReadable: this.readString(),\n            article: this.readString(),\n            name: this.readString(),\n            description: this.readString(),\n            count: this.readUInt8(),\n            x: this.readUInt16(),\n            y: this.readUInt16(),\n            z: this.readUInt16(),\n        };\n        console.log(\"Item info:\", itemInfo);\n        return itemInfo;\n    }\n    readEquipment() {\n        /*\n         * Function PacketReader.readEquipment\n         * Reads the equipment from the packet which contains ten items\n         */\n        let items = [];\n        for (let i = 0; i < 10; i++) {\n            let item = this.readItem();\n            if (item)\n                items.push(item);\n        }\n        return items;\n    }\n    readMagicEffect() {\n        return {\n            position: this.readPosition(),\n            type: this.readUInt8()\n        };\n    }\n    readSkills() {\n        /*\n         * Function PacketReader.readSkills\n         * Reads the skill points for each skill\n         */\n        return {\n            magic: this.readUInt32(),\n            fist: this.readUInt32(),\n            club: this.readUInt32(),\n            sword: this.readUInt32(),\n            axe: this.readUInt32(),\n            distance: this.readUInt32(),\n            shielding: this.readUInt32(),\n            fishing: this.readUInt32(),\n            experience: this.readUInt32(),\n        };\n    }\n    readPlayerInfo() {\n        return {\n            id: this.readUInt32(),\n            skills: this.readSkills(),\n            attack: this.readUInt8(),\n            equipment: this.readEquipment(),\n            mounts: this.readOutfits(),\n            outfits: this.readOutfits(),\n            spellbook: this.readArray(),\n            friendlist: this.readFriendlist(),\n            outfit: this.readOutfit(),\n            vitals: {\n                name: this.readString(),\n                position: this.readPosition(),\n                direction: this.readUInt8(),\n                health: this.readUInt16(),\n                maxHealth: this.readUInt16(),\n                mana: this.readUInt16(),\n                maxMana: this.readUInt16(),\n                energy: this.readUInt16(),\n                maxEnergy: this.readUInt16(),\n                capacity: this.readUInt32(),\n                maxCapacity: this.readUInt32(),\n                speed: this.readUInt16(),\n                attackSlowness: this.readUInt8(),\n            },\n            conditions: this.readConditions(),\n        };\n    }\n    readFriendlist() {\n        let length = this.readUInt8();\n        let friendlist = [];\n        for (let i = 0; i < length; i++) {\n            friendlist.push(this.readFriend());\n        }\n        return friendlist;\n    }\n    readArray() {\n        let length = this.readUInt8();\n        let array = [];\n        for (let i = 0; i < length; i++) {\n            array.push(this.readUInt16());\n        }\n        return array;\n    }\n    readOutfits() {\n        /*\n         * Function PacketReader.readOutfits\n         * Reads all the outfits from a packet\n         */\n        let length = this.readUInt8();\n        let outfits = [];\n        for (let i = 0; i < length; i++) {\n            outfits.push(this.__readSingleOutfit());\n        }\n        return outfits;\n    }\n    discard() {\n        this.index = this.buffer.length;\n    }\n    readable() {\n        /*\n         * Function PacketReader.readable\n         * Returns false if the packet was exhausted\n         */\n        return this.index < this.buffer.length;\n    }\n    skip(n) {\n        /*\n         * Function PacketReader.skip\n         * Skips a number of bytes from the packet\n         */\n        this.index += n;\n    }\n    __readSingleSpell() {\n        return {\n            id: this.readUInt8(),\n            name: this.readString(),\n            description: this.readString(),\n            icon: this.readPosition(),\n        };\n    }\n    __readSingleOutfit() {\n        /*\n         * Function PacketReader.readSingleOutfit\n         * Reads a single outfit from the packet\n         */\n        return {\n            id: this.readUInt16(),\n            name: this.readString(),\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/packetreader.ts?");

/***/ }),

/***/ "./client/src/packetwriter.ts":
/*!************************************!*\
  !*** ./client/src/packetwriter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PacketWriter)\n/* harmony export */ });\n/* harmony import */ var _packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./packet */ \"./client/src/packet.ts\");\n\nclass PacketWriter extends _packet__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(opcode, length) {\n        if (opcode === undefined) {\n            throw new Error(\"Opcode is undefined\");\n        }\n        super();\n        // Create a packet of the right size (1 extra byte for the opcode).\n        this.buffer = new Uint8Array(1 + length);\n        // Write the opcode.\n        this.writeUInt8(opcode);\n    }\n    __writeGenericMove(object) {\n        // Generic packet to write a specific location (position, container) and index.\n        if (object.which.constructor.name === \"Tile\") {\n            this.writeUInt8(1);\n            this.writePosition(object.which.getPosition());\n        }\n        else {\n            this.writeUInt8(0);\n            this.writeUInt16(0);\n            this.writeUInt32(object.which.__containerId);\n        }\n        this.writeUInt8(object.index);\n    }\n    getBuffer() {\n        // If completely full, return the entire buffer.\n        if (this.index === this.buffer.length) {\n            return this.buffer;\n        }\n        // Otherwise, return only the written part.\n        return this.buffer.subarray(0, this.index);\n    }\n    encodeString(str) {\n        // Truncate the string if too long.\n        if (str.length > 0xFF) {\n            str = str.substring(0, 0xFF);\n        }\n        const stringEncoded = new TextEncoder().encode(str);\n        const stringLength = stringEncoded.length + 1;\n        return { stringEncoded, stringLength };\n    }\n    writeBuffer(buffer) {\n        // Write the length of the buffer and then its bytes.\n        this.writeUInt8(buffer.length);\n        this.set(buffer);\n    }\n    set(buffer) {\n        // Writes the entire buffer to the internal buffer.\n        this.buffer.set(buffer, this.index);\n        this.advance(buffer.length);\n    }\n    writeUInt8(value) {\n        this.buffer[this.index++] = value;\n    }\n    writeUInt16(value) {\n        // Write in little-endian order.\n        this.buffer[this.index++] = value & 0xff;\n        this.buffer[this.index++] = (value >> 8) & 0xff;\n    }\n    writeUInt32(value) {\n        this.buffer[this.index++] = value & 0xff;\n        this.buffer[this.index++] = (value >> 8) & 0xff;\n        this.buffer[this.index++] = (value >> 16) & 0xff;\n        this.buffer[this.index++] = (value >> 24) & 0xff;\n    }\n    writeBoolean(value) {\n        // Writes a boolean as an UInt8 (1 = true, 0 = false).\n        this.writeUInt8(value ? 1 : 0);\n    }\n    writePosition(position) {\n        // Writes a position to the buffer.\n        this.writeUInt16(position.x);\n        this.writeUInt16(position.y);\n        this.writeUInt16(position.z);\n    }\n    // Helper method to advance the internal index.\n    advance(length) {\n        this.index += length;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/packetwriter.ts?");

/***/ }),

/***/ "./client/src/pathfinder.ts":
/*!**********************************!*\
  !*** ./client/src/pathfinder.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Pathfinder)\n/* harmony export */ });\n/* harmony import */ var _binary_heap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./binary-heap */ \"./client/src/binary-heap.ts\");\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keyboard */ \"./client/src/keyboard.ts\");\n\n\n\nclass Pathfinder {\n    constructor() {\n        // Cache to keep the tiles to walk on\n        this.__pathfindCache = [];\n        this.__dirtyNodes = [];\n    }\n    search(from, to) {\n        // Clean up previously modified nodes\n        this.__dirtyNodes.forEach((node) => node.cleanPathfinding());\n        this.__dirtyNodes = [from];\n        // Initialize heuristic for the starting node\n        from.__h = this.heuristic(from, to);\n        const openHeap = new _binary_heap__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        openHeap.push(from);\n        while (openHeap.size() > 0) {\n            // Grab the lowest f(x) node from the heap.\n            const currentNode = openHeap.pop(); // non-null assertion operator\n            // End case – result has been found, return the traced path.\n            if (currentNode === to) {\n                return this.pathTo(currentNode);\n            }\n            // Mark the node as closed.\n            currentNode.__closed = true;\n            // Process each neighbor of the current node.\n            for (let i = 0; i < currentNode.neighbours.length; i++) {\n                const neighbourNode = currentNode.neighbours[i];\n                // Skip nodes that are already closed or occupied.\n                if (neighbourNode.__closed || neighbourNode.isOccupied()) {\n                    continue;\n                }\n                // Diagonal movement penalty.\n                const penalty = currentNode.__position.isDiagonal(neighbourNode.__position)\n                    ? 2 * Math.SQRT2\n                    : 1;\n                // Cost to get to this neighbor.\n                const gScore = currentNode.__g + penalty * neighbourNode.getCost(currentNode);\n                const visited = neighbourNode.__visited;\n                if (!visited || gScore < neighbourNode.__g) {\n                    // Found a better path to the neighbor.\n                    neighbourNode.__visited = true;\n                    neighbourNode.__parentNode = currentNode;\n                    neighbourNode.__h = neighbourNode.__h || this.heuristic(neighbourNode, to);\n                    neighbourNode.__g = gScore;\n                    neighbourNode.__f = neighbourNode.__g + neighbourNode.__h;\n                    this.__dirtyNodes.push(neighbourNode);\n                    if (!visited) {\n                        openHeap.push(neighbourNode);\n                    }\n                    else {\n                        openHeap.rescoreElement(neighbourNode);\n                    }\n                }\n            }\n        }\n        // No path was found; return an empty array.\n        return [];\n    }\n    heuristic(from, to) {\n        // Manhattan distance heuristic for pathfinding.\n        return (Math.abs(from.__position.x - to.__position.x) +\n            Math.abs(from.__position.y - to.__position.y));\n    }\n    pathTo(tile) {\n        // Trace the path backwards from the given tile.\n        const path = [];\n        while (tile.__parentNode) {\n            path.unshift(tile);\n            tile = tile.__parentNode;\n        }\n        return path;\n    }\n    findPath(begin, stop) {\n        let start = window.gameClient.world.getTileFromWorldPosition(begin);\n        if (start === null) {\n            window.gameClient.interface.setCancelMessage(\"Start position is invalid.\");\n            return;\n        }\n        const end = window.gameClient.world.getTileFromWorldPosition(stop);\n        if (end === null) {\n            window.gameClient.interface.setCancelMessage(\"End position is invalid.\");\n            return;\n        }\n        const path = this.search(start, end);\n        if (path.length === 0) {\n            window.gameClient.interface.setCancelMessage(\"There is no way.\");\n            return;\n        }\n        // Determine the relative movement sequence to take.\n        const movementSequence = path.map((node) => {\n            const tmp = start === null || start === void 0 ? void 0 : start.__position.getLookDirection(node.__position);\n            start = window.gameClient.world.getTileFromWorldPosition(node.__position);\n            return tmp;\n        });\n        this.setPathfindCache(movementSequence);\n    }\n    setPathfindCache(path) {\n        if (path === null) {\n            this.__pathfindCache = [];\n        }\n        else {\n            this.__pathfindCache = path;\n            this.handlePathfind();\n        }\n    }\n    getNextMove() {\n        if (this.__pathfindCache.length === 0) {\n            return null;\n        }\n        return this.__pathfindCache.shift();\n    }\n    handlePathfind() {\n        // Delegate the next pathfinding move to the keyboard handler.\n        switch (this.getNextMove()) {\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_1__.CONST.DIRECTION.NORTH:\n                return window.gameClient.keyboard.handleCharacterMovement(_keyboard__WEBPACK_IMPORTED_MODULE_2__[\"default\"].KEYS.UP_ARROW);\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_1__.CONST.DIRECTION.EAST:\n                return window.gameClient.keyboard.handleCharacterMovement(_keyboard__WEBPACK_IMPORTED_MODULE_2__[\"default\"].KEYS.RIGHT_ARROW);\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_1__.CONST.DIRECTION.SOUTH:\n                return window.gameClient.keyboard.handleCharacterMovement(_keyboard__WEBPACK_IMPORTED_MODULE_2__[\"default\"].KEYS.DOWN_ARROW);\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_1__.CONST.DIRECTION.WEST:\n                return window.gameClient.keyboard.handleCharacterMovement(_keyboard__WEBPACK_IMPORTED_MODULE_2__[\"default\"].KEYS.LEFT_ARROW);\n            // case CONST.DIRECTION.NORTH_EAST:\n            //   return window.gameClient.keyboard.handleCharacterMovement(Keyboard.KEYS.KEYPAD_9);\n            // case CONST.DIRECTION.SOUTH_EAST:\n            //   return window.gameClient.keyboard.handleCharacterMovement(Keyboard.KEYS.KEYPAD_3);\n            // case CONST.DIRECTION.SOUTH_WEST:\n            //   return window.gameClient.keyboard.handleCharacterMovement(Keyboard.KEYS.KEYPAD_1);\n            // case CONST.DIRECTION.NORTH_WEST:\n            //   return window.gameClient.keyboard.handleCharacterMovement(Keyboard.KEYS.KEYPAD_7);\n            default:\n                return;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/pathfinder.ts?");

/***/ }),

/***/ "./client/src/player/equipment/equipment.ts":
/*!**************************************************!*\
  !*** ./client/src/player/equipment/equipment.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Equipment)\n/* harmony export */ });\n/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../container */ \"./client/src/container.ts\");\n/* harmony import */ var _slot__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../slot */ \"./client/src/slot.ts\");\n\n\nclass Equipment extends _container__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(items) {\n        // Call the parent constructor with an object containing id, cid, and items with a length of 10.\n        super({ id: 0, cid: 0, items: new Array(10) });\n        // The equipment has ten slots for items.\n        this.slots = [\n            this.referenceSlotDOM(0, \"head-slot\"),\n            this.referenceSlotDOM(1, \"armor-slot\"),\n            this.referenceSlotDOM(2, \"legs-slot\"),\n            this.referenceSlotDOM(3, \"boots-slot\"),\n            this.referenceSlotDOM(4, \"right-slot\"),\n            this.referenceSlotDOM(5, \"left-slot\"),\n            this.referenceSlotDOM(6, \"backpack-slot\"),\n            this.referenceSlotDOM(7, \"shoulder-slot\"),\n            this.referenceSlotDOM(8, \"ring-slot\"),\n            this.referenceSlotDOM(9, \"quiver-slot\")\n        ];\n        this.BACKGROUNDS = [\n            \"./png/head.png\",\n            \"./png/armor.png\",\n            \"./png/legs.png\",\n            \"./png/boots.png\",\n            \"./png/right.png\",\n            \"./png/left.png\",\n            \"./png/backpack.png\",\n            \"./png/item.png\",\n            \"./png/item.png\",\n            \"./png/item.png\"\n        ];\n        this.setItems(items);\n    }\n    removeItem(slot, count) {\n        // If the item is not stackable or count is zero, clear the slot.\n        if (!this.slots[slot].item.isStackable() || count === 0) {\n            this.slots[slot].element.style.backgroundImage = `url('${this.BACKGROUNDS[slot]}')`;\n            return this.clearSlot(slot);\n        }\n        // Subtract the count.\n        this.slots[slot].item.count -= count;\n        // If the remaining count is zero, clear the slot.\n        if (this.slots[slot].item.count === 0) {\n            this.slots[slot].element.style.backgroundImage = `url('${this.BACKGROUNDS[slot]}')`;\n            return this.clearSlot(slot);\n        }\n        // Render the slot.\n        this.getSlot(slot).render();\n    }\n    setItems(items) {\n        // Ensure the provided items array has the same length as slots.\n        if (items.length !== this.slots.length) {\n            return;\n        }\n        items.forEach((item, index) => {\n            if (item !== null) {\n                this.addItem(item, index);\n            }\n        });\n    }\n    referenceSlotDOM(index, id) {\n        // Create a new Slot and assign its element.\n        const slot = new _slot__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        //slot.setElement(document.getElementById(id) as HTMLElement);\n        return slot;\n    }\n    addItem(item, slot) {\n        this.equipSlot(slot, item);\n        this.render();\n    }\n    equipSlot(slot, item) {\n        this.slots[slot].setItem(item);\n        // Update the background image to indicate an item is present.\n        this.slots[slot].element.style.backgroundImage = \"url('png/item.png')\";\n    }\n    render() {\n        // Render each slot.\n        //this.slots.forEach(slot => slot.render());\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/player/equipment/equipment.ts?");

/***/ }),

/***/ "./client/src/player/friendList/friendlist.ts":
/*!****************************************************!*\
  !*** ./client/src/player/friendList/friendlist.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Friendlist)\n/* harmony export */ });\nclass Friendlist {\n    constructor(friends) {\n        this.__friends = new Map();\n        this.__sortFunction = this.__nameSort;\n        this.__showOffline = true;\n        this.__addFriends(friends);\n    }\n    __addFriends(friends) {\n        friends.forEach(this.__add, this);\n        this.updateDOM();\n    }\n    has(friend) {\n        return this.__friends.has(friend);\n    }\n    __add(friend) {\n        this.__friends.set(friend.name, friend.online);\n    }\n    add(friend) {\n        if (this.has(friend.name)) {\n            console.error(`Friend ${friend.name} is already in the friend list.`);\n            return;\n        }\n        this.__add(friend);\n        this.updateDOM();\n    }\n    setOnlineStatus(name, online) {\n        if (!this.has(name)) {\n            return;\n        }\n        this.__friends.set(name, online);\n        this.updateDOM();\n    }\n    sortBy(which) {\n        switch (which) {\n            case \"normal\":\n                this.__sortFunction = this.__nameSort;\n                break;\n            case \"reversed\":\n                this.__sortFunction = this.__reversedNameSort;\n                break;\n        }\n        this.updateDOM();\n    }\n    remove(name) {\n        if (!this.has(name)) {\n            console.error(`Friend ${name} is not in your friend list.`);\n            return;\n        }\n        this.__friends.delete(name);\n        this.updateDOM();\n    }\n    updateDOM() {\n        const friendArray = Array.from(this.__friends, this.__deconstructMap.bind(this))\n            .filter(this.__showOfflineFilter.bind(this))\n            .sort(this.__sortFunction);\n        window.gameClient.interface.windowManager.getWindow(\"friend-window\").generateContent(friendArray);\n    }\n    toggleShowOffline() {\n        this.__showOffline = !this.__showOffline;\n        this.updateDOM();\n    }\n    __deconstructMap([name, online]) {\n        return { name, online };\n    }\n    __showOfflineFilter(friend) {\n        return friend.online || this.__showOffline;\n    }\n    __reversedNameSort(a, b) {\n        // Sort by online status (descending) then alphabetically (ascending)\n        return (Number(b.online) - Number(a.online)) ||\n            a.name.toLowerCase().localeCompare(b.name.toLowerCase());\n    }\n    __nameSort(a, b) {\n        // Sort by online status (descending) then reverse alphabetically\n        return (Number(b.online) - Number(a.online)) ||\n            -a.name.toLowerCase().localeCompare(b.name.toLowerCase());\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/player/friendList/friendlist.ts?");

/***/ }),

/***/ "./client/src/player/player.ts":
/*!*************************************!*\
  !*** ./client/src/player/player.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _condition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../condition */ \"./client/src/condition.ts\");\n/* harmony import */ var _creature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../creature */ \"./client/src/creature.ts\");\n/* harmony import */ var _equipment_equipment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./equipment/equipment */ \"./client/src/player/equipment/equipment.ts\");\n/* harmony import */ var _friendList_friendlist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./friendList/friendlist */ \"./client/src/player/friendList/friendlist.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocol */ \"./client/src/protocol.ts\");\n/* harmony import */ var _skills_skills__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./skills/skills */ \"./client/src/player/skills/skills.ts\");\n/* harmony import */ var _spellbook_spellbook__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./spellbook/spellbook */ \"./client/src/player/spellbook/spellbook.ts\");\n\n\n\n\n\n\n\nclass Player extends _creature__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(data) {\n        super(data);\n        // Private state for the player\n        this.__movementEvent = null;\n        this.__target = null;\n        this.__movementBuffer = null;\n        this.__openedContainers = new Set();\n        this.__serverWalkConfirmation = true;\n        this.skills = new _skills_skills__WEBPACK_IMPORTED_MODULE_5__[\"default\"](data.skills);\n        this.equipment = new _equipment_equipment__WEBPACK_IMPORTED_MODULE_2__[\"default\"](data.equipment);\n        this.spellbook = new _spellbook_spellbook__WEBPACK_IMPORTED_MODULE_6__[\"default\"](data.spellbook);\n        this.friendlist = new _friendList_friendlist__WEBPACK_IMPORTED_MODULE_3__[\"default\"](data.friendlist);\n        this.mounts = data.mounts;\n        this.outfits = data.outfits;\n        // Initialize character bars\n        this.characterElement.addManaBar((this.vitals.state.mana / this.vitals.state.maxMana) * 100 + \"%\");\n        this.characterElement.addEnergyBar((this.vitals.state.energy / this.vitals.state.maxEnergy) * 100 + \"%\");\n    }\n    getSpeed() {\n        let base = this.vitals.speed;\n        if (this.hasCondition(_condition__WEBPACK_IMPORTED_MODULE_0__[\"default\"].HASTE)) {\n            base *= 1.3;\n        }\n        return base;\n    }\n    getStepDuration(tile) {\n        const A = 857.36;\n        const B = 261.29;\n        const C = -4795.009;\n        let calculatedStepSpeed = Math.max(1, Math.round(A * Math.log(this.getSpeed() + B) + C));\n        let groundSpeed = tile.getFriction();\n        return Math.ceil(Math.floor(1000 * groundSpeed / calculatedStepSpeed) / window.gameClient.getTickInterval());\n    }\n    getTile() {\n        return window.gameClient.world.getTileFromWorldPosition(this.vitals.position);\n    }\n    getMaxFloor() {\n        return window.gameClient.world.getChunkFromWorldPosition(this.getPosition()).getFirstFloorFromBottom(this.getPosition());\n    }\n    setCapacity(value) {\n        const capacityElement = document.getElementById(\"player-capacity\");\n        if (capacityElement) {\n            capacityElement.innerHTML = `Cap: <br> ${Math.round(value / 100)}`;\n        }\n    }\n    setLevelSkillValue(which, value) {\n        window.gameClient.interface.modalManager.get(\"skill-modal\").setSkillValue(which, value, value);\n    }\n    setAmbientSound() {\n        if (this.isUnderground()) {\n            window.gameClient.interface.soundManager.setAmbientTrace(\"cave\");\n            window.gameClient.interface.soundManager.setVolume(\"rain\", 0);\n        }\n        else {\n            window.gameClient.interface.soundManager.setAmbientTrace(\"forest\");\n            if (window.gameClient.renderer.weatherCanvas.isRaining()) {\n                window.gameClient.interface.soundManager.setVolume(\"rain\", 1);\n            }\n        }\n    }\n    isUnderground() {\n        return this.getPosition().z < 8;\n    }\n    setMovementBuffer(key) {\n        this.__movementBuffer = key;\n    }\n    extendMovementBuffer(key) {\n        const LENIENCY = 0.75;\n        if (this.getMovingFraction() < LENIENCY) {\n            this.setMovementBuffer(key);\n        }\n    }\n    confirmClientWalk() {\n        if (this.__serverWalkConfirmation) {\n            window.gameClient.renderer.updateTileCache();\n        }\n        this.__serverWalkConfirmation = true;\n    }\n    isCreatureTarget(creature) {\n        return this.__target === creature;\n    }\n    addExperience(experience) {\n        return;\n    }\n    isInProtectionZone() {\n        return this.getTile().isProtectionZone();\n    }\n    setTarget(creature) {\n        this.__target = creature;\n        window.gameClient.interface.windowManager.getWindow(\"battle-window\").setTarget(creature);\n    }\n    openContainer(container) {\n        this.__openedContainers.add(container);\n    }\n    getItem(containerId, slotId) {\n        let container = this.getContainer(containerId);\n        if (container === null)\n            return null;\n        return container.getSlotItem(slotId);\n    }\n    getContainer(id) {\n        if (id === 0x00)\n            return this.equipment;\n        let containers = Array.from(this.__openedContainers);\n        for (let i = 0; i < containers.length; i++) {\n            if (containers[i].__containerId === id) {\n                return containers[i];\n            }\n        }\n        return null;\n    }\n    closeAllContainers() {\n        this.__openedContainers.forEach((container) => {\n            this.removeContainer(container);\n        });\n    }\n    removeContainer(container) {\n        this.__openedContainers.delete(container);\n        container.window.remove();\n    }\n    closeContainer(container) {\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_4__.ContainerClosePacket(container.____containerId));\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/player/player.ts?");

/***/ }),

/***/ "./client/src/player/skills/skills.ts":
/*!********************************************!*\
  !*** ./client/src/player/skills/skills.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Skills)\n/* harmony export */ });\nclass Skills {\n    constructor(skills) {\n        this.__skills = skills;\n        Object.entries(this.__skills).forEach(([key, value]) => {\n            //(window.gameClient.interface.windowManager.getWindow(\"skill-window\") as SkillWindow).setSkillValue(key, value, Math.random() * 100);\n            window.gameClient.interface.modalManager.get(\"skill-modal\").setSkillValue(key, value, Math.random() * 100);\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/player/skills/skills.ts?");

/***/ }),

/***/ "./client/src/player/spellbook/spellbook.ts":
/*!**************************************************!*\
  !*** ./client/src/player/spellbook/spellbook.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Spellbook)\n/* harmony export */ });\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../protocol */ \"./client/src/protocol.ts\");\n\nclass Spellbook {\n    constructor(spells) {\n        this.GLOBAL_COOLDOWN = 0xFFFF;\n        this.GLOBAL_COOLDOWN_DURATION = 20;\n        this.spells = new Set(spells);\n        this.cooldowns = new Map();\n        // Create the spell list in the modal.\n        window.gameClient.interface.modalManager.get(\"spellbook-modal\").createSpellList(Array.from(this.spells));\n        window.gameClient.interface.hotbarManager.__loadConfiguration();\n    }\n    addSpell(sid) {\n        this.spells.add(sid);\n        window.gameClient.interface.modalManager.get(\"spellbook-modal\").createSpellList(Array.from(this.spells));\n    }\n    removeSpell(sid) {\n        this.spells.delete(sid);\n        window.gameClient.interface.modalManager.get(\"spellbook-modal\").createSpellList(Array.from(this.spells));\n    }\n    castSpell(sid) {\n        if (this.cooldowns.has(this.GLOBAL_COOLDOWN) || this.cooldowns.has(sid)) {\n            return this.__cooldownCallback();\n        }\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_0__.SpellCastPacket(sid));\n    }\n    serverCastSpell(packet) {\n        this.__lockSpell(packet.id, packet.cooldown);\n    }\n    getCooldownSeconds(sid) {\n        const gcdf = this.cooldowns.has(this.GLOBAL_COOLDOWN)\n            ? this.cooldowns.get(this.GLOBAL_COOLDOWN).remainingSeconds()\n            : 0;\n        if (!this.cooldowns.has(sid)) {\n            return gcdf;\n        }\n        return Math.max(gcdf, this.cooldowns.get(sid).remainingSeconds());\n    }\n    getCooldownFraction(sid) {\n        const gcdf = this.cooldowns.has(this.GLOBAL_COOLDOWN)\n            ? (1 - this.cooldowns.get(this.GLOBAL_COOLDOWN).remainingFraction())\n            : 1;\n        if (!this.cooldowns.has(sid)) {\n            return gcdf;\n        }\n        return Math.min(gcdf, 1 - this.cooldowns.get(sid).remainingFraction());\n    }\n    __cooldownCallback() {\n        window.gameClient.player.blockHit();\n        window.gameClient.interface.setCancelMessage(\"You cannot cast this spell yet.\");\n    }\n    __lockSpell(id, time) {\n        this.cooldowns.set(id, window.gameClient.eventQueue.addEvent(this.__unlockSpell.bind(this, id), time));\n        this.cooldowns.set(this.GLOBAL_COOLDOWN, window.gameClient.eventQueue.addEvent(this.__unlockSpell.bind(this, this.GLOBAL_COOLDOWN), this.GLOBAL_COOLDOWN_DURATION));\n    }\n    __unlockSpell(id) {\n        this.cooldowns.delete(id);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/player/spellbook/spellbook.ts?");

/***/ }),

/***/ "./client/src/player/vitals/vitals.ts":
/*!********************************************!*\
  !*** ./client/src/player/vitals/vitals.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Vitals: () => (/* binding */ Vitals)\n/* harmony export */ });\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../state */ \"./client/src/state.ts\");\n\nclass Vitals {\n    constructor(data) {\n        this.state = new _state__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.name = data.name;\n        this.position = data.position;\n        this.direction = data.direction;\n        this.attackSlowness = data.attackSlowness;\n        this.speedValue = data.speedValue;\n        this.maxCapacity = data.maxCapacity;\n        this.speed = data.speed;\n        this.registerStatListener(\"health\", \"maxHealth\", this.updateHealthBar);\n        this.registerStatListener(\"mana\", \"maxMana\", this.updateManaBar);\n        this.registerStatListener(\"energy\", \"maxEnergy\", this.updateEnergyBar);\n        // Set values AFTER listeners\n        this.state.health = data.health;\n        this.state.maxHealth = data.maxHealth;\n        this.state.mana = data.mana;\n        this.state.maxMana = data.maxMana;\n        this.state.energy = data.energy;\n        this.state.maxEnergy = data.maxEnergy;\n        this.state.capacity = data.capacity;\n        this.setCharactherModal(data);\n    }\n    setCharactherModal(data) {\n        window.gameClient.interface.modalManager.get(\"skill-modal\")\n            .setCharactherInfo(data);\n    }\n    registerStatListener(statKey, maxStatKey, updateFn) {\n        this.state.add(statKey, updateFn.bind(this));\n        this.state.add(maxStatKey, updateFn.bind(this));\n    }\n    updateHealthBar() {\n        console.log('updateHealthBar', this.state.health, this.state.maxHealth);\n        const player = window.gameClient.player;\n        if (player && player.vitals.name === this.name) {\n            const fraction = player.getHealthFraction();\n            player.characterElement.setHealthFraction(fraction);\n        }\n    }\n    updateManaBar() {\n        var _a, _b;\n        const player = window.gameClient.player;\n        if (player && player.vitals.name === this.name) {\n            const current = (_a = this.state.mana) !== null && _a !== void 0 ? _a : 0;\n            const max = (_b = this.state.maxMana) !== null && _b !== void 0 ? _b : 1;\n            player.characterElement.setDefaultMana(`${(current / max) * 100}%`);\n        }\n    }\n    updateEnergyBar() {\n        var _a, _b;\n        const player = window.gameClient.player;\n        if (player && player.vitals.name === this.name) {\n            const current = (_a = this.state.energy) !== null && _a !== void 0 ? _a : 0;\n            const max = (_b = this.state.maxEnergy) !== null && _b !== void 0 ? _b : 1;\n            player.characterElement.setDefaultEnergy(`${(current / max) * 100}%`);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/player/vitals/vitals.ts?");

/***/ }),

/***/ "./client/src/position.ts":
/*!********************************!*\
  !*** ./client/src/position.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n\nclass Position {\n    constructor(x, y, z) {\n        /*\n         * Class Position\n         * Wrapper for a generic 3D vector that represents a position or coordinates\n         */\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    subtract(position) {\n        return new Position(this.x - position.x, this.y - position.y, this.z - position.z);\n    }\n    add(position) {\n        return new Position(this.x + position.x, this.y + position.y, this.z + position.z);\n    }\n    above() {\n        return new Position(this.x, this.y, this.z + 1);\n    }\n    unprojected() {\n        let z = this.z % 8;\n        return new Position(this.x + z, this.y + z, z);\n    }\n    projected() {\n        let z = this.z % 8;\n        return new Position(this.x - z, this.y - z, z);\n    }\n    fromOpcode(opcode) {\n        switch (opcode) {\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTH:\n                return this.north();\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.EAST:\n                return this.east();\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTH:\n                return this.south();\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.WEST:\n                return this.west();\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTHEAST:\n                return this.northeast();\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTHEAST:\n                return this.southeast();\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTHWEST:\n                return this.southwest();\n            case _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTHWEST:\n                return this.northwest();\n            default:\n                return undefined;\n        }\n    }\n    copy() {\n        return new Position(this.x, this.y, this.z);\n    }\n    west() {\n        return new Position(this.x - 1, this.y, this.z);\n    }\n    north() {\n        return new Position(this.x, this.y - 1, this.z);\n    }\n    east() {\n        return new Position(this.x + 1, this.y, this.z);\n    }\n    south() {\n        return new Position(this.x, this.y + 1, this.z);\n    }\n    northwest() {\n        return new Position(this.x - 1, this.y - 1, this.z);\n    }\n    northeast() {\n        return new Position(this.x + 1, this.y - 1, this.z);\n    }\n    southeast() {\n        return new Position(this.x + 1, this.y + 1, this.z);\n    }\n    southwest() {\n        return new Position(this.x - 1, this.y + 1, this.z);\n    }\n    up() {\n        return new Position(this.x, this.y, this.z + 1);\n    }\n    down() {\n        return new Position(this.x, this.y, this.z - 1);\n    }\n    random() {\n        let random = Math.floor(Math.random() * 4);\n        switch (random) {\n            case 0:\n                return this.west();\n            case 1:\n                return this.north();\n            case 2:\n                return this.east();\n            case 3:\n                return this.south();\n            default:\n                return this.copy();\n        }\n    }\n    getLookDirection(position) {\n        if (this.z !== position.z) {\n            return null;\n        }\n        let diff = position.subtract(this);\n        if (diff.x === 0) {\n            switch (diff.y) {\n                case -1:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTH;\n                case 0:\n                    return null;\n                case 1:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTH;\n            }\n        }\n        if (diff.x === -1) {\n            switch (diff.y) {\n                case -1:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTHWEST;\n                case 0:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.WEST;\n                case 1:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTHWEST;\n            }\n        }\n        if (diff.x === 1) {\n            switch (diff.y) {\n                case -1:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.NORTHEAST;\n                case 0:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.EAST;\n                case 1:\n                    return _helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.DIRECTION.SOUTHEAST;\n            }\n        }\n        return null;\n    }\n    isDiagonal(position) {\n        return Math.abs(this.x - position.x) === 1 && Math.abs(this.y - position.y) === 1;\n    }\n    toString() {\n        return `${this.x}, ${this.y}, ${this.z}`;\n    }\n    serialize() {\n        return { x: this.x, y: this.y, z: this.z };\n    }\n    equals(position) {\n        return this.x === position.x && this.y === position.y && this.z === position.z;\n    }\n    inRange(position, range) {\n        return (this.z === position.z &&\n            Math.sqrt(Math.pow(this.x - position.x, 2) + Math.pow(this.y - position.y, 2)) < range);\n    }\n    besides(position) {\n        if (this.z !== position.z) {\n            return false;\n        }\n        return Math.max(Math.abs(this.x - position.x), Math.abs(this.y - position.y)) <= 1;\n    }\n}\nPosition.NULL = new Position(0, 0, 0);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Position);\n\n\n//# sourceURL=webpack:///./client/src/position.ts?");

/***/ }),

/***/ "./client/src/private-channel.ts":
/*!***************************************!*\
  !*** ./client/src/private-channel.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PrivateChannel)\n/* harmony export */ });\n/* harmony import */ var _channel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel */ \"./client/src/channel.ts\");\n\nclass PrivateChannel extends _channel__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(name) {\n        super(name, null);\n    }\n    __getEmptyMessage() {\n        return `<div class=\"channel-empty\">No messages in channel with ${this.name}.</div>`;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/private-channel.ts?");

/***/ }),

/***/ "./client/src/protocol.ts":
/*!********************************!*\
  !*** ./client/src/protocol.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChannelJoinPacket: () => (/* binding */ ChannelJoinPacket),\n/* harmony export */   ChannelLeavePacket: () => (/* binding */ ChannelLeavePacket),\n/* harmony export */   ChannelMessagePacket: () => (/* binding */ ChannelMessagePacket),\n/* harmony export */   ChannelPrivatePacket: () => (/* binding */ ChannelPrivatePacket),\n/* harmony export */   ContainerClosePacket: () => (/* binding */ ContainerClosePacket),\n/* harmony export */   FriendAddPacket: () => (/* binding */ FriendAddPacket),\n/* harmony export */   FriendRemovePacket: () => (/* binding */ FriendRemovePacket),\n/* harmony export */   ItemLookPacket: () => (/* binding */ ItemLookPacket),\n/* harmony export */   ItemMovePacket: () => (/* binding */ ItemMovePacket),\n/* harmony export */   ItemUsePacket: () => (/* binding */ ItemUsePacket),\n/* harmony export */   ItemUseWithPacket: () => (/* binding */ ItemUseWithPacket),\n/* harmony export */   KeyringOpenPacket: () => (/* binding */ KeyringOpenPacket),\n/* harmony export */   LatencyPacket: () => (/* binding */ LatencyPacket),\n/* harmony export */   LogoutPacket: () => (/* binding */ LogoutPacket),\n/* harmony export */   MovementPacket: () => (/* binding */ MovementPacket),\n/* harmony export */   OfferBuyPacket: () => (/* binding */ OfferBuyPacket),\n/* harmony export */   OutfitChangePacket: () => (/* binding */ OutfitChangePacket),\n/* harmony export */   PlayerTurnPacket: () => (/* binding */ PlayerTurnPacket),\n/* harmony export */   SpellCastPacket: () => (/* binding */ SpellCastPacket),\n/* harmony export */   TargetPacket: () => (/* binding */ TargetPacket)\n/* harmony export */ });\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n/* harmony import */ var _packetwriter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packetwriter */ \"./client/src/packetwriter.ts\");\n\n\nclass OutfitChangePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(outfit) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.OUTFIT, 11);\n        this.writeUInt16(outfit.id);\n        this.writeUInt8(outfit.details.head);\n        this.writeUInt8(outfit.details.body);\n        this.writeUInt8(outfit.details.legs);\n        this.writeUInt8(outfit.details.feet);\n        this.writeUInt16(outfit.mount);\n        this.writeBoolean(outfit.mounted);\n        this.writeBoolean(outfit.addonOne);\n        this.writeBoolean(outfit.addonTwo);\n    }\n}\nclass ContainerClosePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.CONTAINER_CLOSE, 4);\n        this.writeUInt32(id);\n    }\n}\nclass ChannelMessagePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id, loudness, message) {\n        const { stringEncoded, stringLength } = new _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0).encodeString(message);\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.CHANNEL_MESSAGE, stringLength + 2);\n        this.writeUInt8(id);\n        this.writeUInt8(loudness);\n        this.writeBuffer(stringEncoded);\n    }\n}\nclass ChannelJoinPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.CHANNEL_JOIN, 1);\n        this.writeUInt8(id);\n    }\n}\nclass ChannelLeavePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.CHANNEL_LEAVE, 1);\n        this.writeUInt8(id);\n    }\n}\nclass ChannelPrivatePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(name, message) {\n        const encodedName = new _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0).encodeString(name);\n        const encodedMessage = new _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0).encodeString(message);\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.CHANNEL_PRIVATE_MESSAGE, encodedName.stringLength + encodedMessage.stringLength);\n        this.writeBuffer(encodedName.stringEncoded);\n        this.writeBuffer(encodedMessage.stringEncoded);\n    }\n}\nclass MovementPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(direction) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.MOVE, 1);\n        this.writeUInt8(direction);\n    }\n}\nclass PlayerTurnPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(direction) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.TURN, 1);\n        this.writeUInt8(direction);\n    }\n}\nclass ItemMovePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(fromThing, toThing, count) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.THING_MOVE, 17);\n        this.__writeGenericMove(fromThing);\n        this.__writeGenericMove(toThing);\n        this.writeUInt8(count);\n    }\n}\nclass ItemLookPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(thing) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.THING_LOOK, 8);\n        this.__writeGenericMove(thing);\n    }\n}\nclass ItemUsePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(thing) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.THING_USE, 8);\n        this.__writeGenericMove(thing);\n    }\n}\nclass ItemUseWithPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(fromThing, toThing) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.THING_USE_WITH, 16);\n        this.__writeGenericMove(fromThing);\n        this.__writeGenericMove(toThing);\n    }\n}\nclass TargetPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.TARGET, 4);\n        this.writeUInt32(id);\n    }\n}\nclass LogoutPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.LOGOUT, 0);\n    }\n}\nclass KeyringOpenPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.OPEN_KEYRING, 0);\n    }\n}\nclass FriendRemovePacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(string) {\n        const { stringEncoded, stringLength } = new _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0).encodeString(string);\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.FRIEND_REMOVE, stringLength);\n        this.writeBuffer(stringEncoded);\n    }\n}\nclass FriendAddPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(string) {\n        const { stringEncoded, stringLength } = new _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0).encodeString(string);\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.FRIEND_ADD, stringLength);\n        this.writeBuffer(stringEncoded);\n    }\n}\nclass OfferBuyPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id, offer, count) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.BUY_OFFER, 6);\n        this.writeUInt32(id);\n        this.writeUInt8(offer);\n        this.writeUInt8(count);\n    }\n}\nclass SpellCastPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(id) {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.CAST_SPELL, 2);\n        this.writeUInt16(id);\n    }\n}\nclass LatencyPacket extends _packetwriter__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super(_helper_appContext__WEBPACK_IMPORTED_MODULE_0__.CONST.PROTOCOL.CLIENT.LATENCY, 0);\n    }\n}\n\n\n\n//# sourceURL=webpack:///./client/src/protocol.ts?");

/***/ }),

/***/ "./client/src/renderer.ts":
/*!********************************!*\
  !*** ./client/src/renderer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var _animationLooped__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animationLooped */ \"./client/src/animationLooped.ts\");\n/* harmony import */ var _bitflag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bitflag */ \"./client/src/bitflag.ts\");\n/* harmony import */ var _box_animation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./box-animation */ \"./client/src/box-animation.ts\");\n/* harmony import */ var _condition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./condition */ \"./client/src/condition.ts\");\n/* harmony import */ var _creature__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./creature */ \"./client/src/creature.ts\");\n/* harmony import */ var _distance_animation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./distance-animation */ \"./client/src/distance-animation.ts\");\n/* harmony import */ var _helper_appContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helper/appContext */ \"./client/src/helper/appContext.ts\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tile */ \"./client/src/tile.ts\");\n/* harmony import */ var _animation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./animation */ \"./client/src/animation.ts\");\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _light_canvas__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./light-canvas */ \"./client/src/light-canvas.ts\");\n/* harmony import */ var _weather_canvas__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./weather-canvas */ \"./client/src/weather-canvas.ts\");\n/* harmony import */ var _outline_canvas__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./outline-canvas */ \"./client/src/outline-canvas.ts\");\n/* harmony import */ var _debugger__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./debugger */ \"./client/src/debugger.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Renderer {\n    constructor() {\n        this.__animationLayers = new Array();\n        // Create main canvases using values from Interface.\n        this.screen = new _canvas__WEBPACK_IMPORTED_MODULE_11__[\"default\"](\"screen\", _interface__WEBPACK_IMPORTED_MODULE_7__[\"default\"].SCREEN_WIDTH_MIN, _interface__WEBPACK_IMPORTED_MODULE_7__[\"default\"].SCREEN_HEIGHT_MIN);\n        this.lightscreen = new _light_canvas__WEBPACK_IMPORTED_MODULE_12__[\"default\"](null, _interface__WEBPACK_IMPORTED_MODULE_7__[\"default\"].SCREEN_WIDTH_MIN, _interface__WEBPACK_IMPORTED_MODULE_7__[\"default\"].SCREEN_HEIGHT_MIN);\n        this.weatherCanvas = new _weather_canvas__WEBPACK_IMPORTED_MODULE_13__[\"default\"](this.screen);\n        this.outlineCanvas = new _outline_canvas__WEBPACK_IMPORTED_MODULE_14__[\"default\"](null, 130, 130);\n        //this.minimap = new Minimap(); // TODO: CHECK IF THIS IS NECESSARY: gameClient.world.width, gameClient.world.height\n        this.debugger = new _debugger__WEBPACK_IMPORTED_MODULE_15__[\"default\"]();\n        // Initialize state variables.\n        this.__start = performance.now();\n        this.__nMiliseconds = 0;\n        this.totalDrawTime = 0;\n        this.drawCalls = 0;\n        this.numberOfTiles = 0;\n        this.__tileCache = [];\n        // Create animation layers.\n        this.__createAnimationLayers();\n    }\n    render() {\n        // Main entry point called every frame.\n        this.__increment();\n        this.__renderWorld();\n        this.__renderOther();\n    }\n    getTileCache() {\n        // Returns the current cache of tiles to be rendered.\n        return this.__tileCache;\n    }\n    updateTileCache() {\n        // Update the tile cache based on the player's maximum visible floor.\n        this.__tileCache = [];\n        this.numberOfTiles = 0;\n        const max = window.gameClient.player.getMaxFloor();\n        for (let i = 0; i < max; i++) {\n            const tiles = this.__getFloorTilesTiles(i);\n            this.__tileCache.push(tiles);\n            this.numberOfTiles += tiles.length;\n        }\n    }\n    takeScreenshot(event) {\n        // Takes a screenshot of the game screen and downloads it.\n        event.preventDefault();\n        // Create download element.\n        const element = document.createElement(\"a\");\n        element.download = `screenshot-${new Date().toISOString()}.png`;\n        // Render character plates.\n        Object.values(window.gameClient.world.activeCreatures).forEach((activeCreature) => {\n            const style = window.getComputedStyle(activeCreature.characterElement.element.querySelector(\"span\"));\n            const position = this.getCreatureScreenPosition(activeCreature);\n            this.screen.renderText(activeCreature.name, 32 * position.x, 32 * position.y, style.color, style.font);\n        }, this);\n        // Render text elements.\n        window.gameClient.interface.screenElementManager.activeTextElements.forEach((element) => {\n            const style = window.getComputedStyle(element.element.querySelector(\"span\"));\n            const position = this.getStaticScreenPosition(element.__position);\n            this.screen.renderText(element.__message, 32 * position.x, 32 * position.y, style.color, style.font);\n        }, this);\n        // Trigger download.\n        element.href = this.screen.canvas.toDataURL();\n        element.click();\n        element.remove();\n    }\n    setAmbientColor(r, g, b, a) {\n        // Delegates to the lightscreen and sets the ambient color of the world to rgba\n        this.lightscreen.setAmbientColor(r, g, b, a);\n    }\n    setWeather(bool) {\n        // Sets the weather to either on/off\n        this.weatherCanvas.setWeather(Number(bool));\n    }\n    addDistanceAnimation(packet) {\n        // Adds a distance animation\n        const animationId = window.gameClient.dataObjects.getDistanceAnimationId(packet.type);\n        if (animationId === null) {\n            return;\n        }\n        const animation = new _distance_animation__WEBPACK_IMPORTED_MODULE_5__[\"default\"](animationId, packet.from, packet.to);\n        this.__animationLayers[packet.from.z % 8].add(animation);\n    }\n    addPositionAnimation(packet) {\n        // Adds an animation on the given tile position\n        const tile = window.gameClient.world.getTileFromWorldPosition(packet.position);\n        if (tile === null) {\n            return;\n        }\n        const animationId = window.gameClient.dataObjects.getAnimationId(packet.type);\n        if (animationId === null) {\n            return;\n        }\n        return tile.addAnimation(new _animation__WEBPACK_IMPORTED_MODULE_10__[\"default\"](animationId));\n    }\n    getStaticScreenPosition(position) {\n        // Return the static position of a particular world position\n        const projectedPlayer = window.gameClient.player.getPosition().projected();\n        const projectedThing = position.projected();\n        const x = ((_interface__WEBPACK_IMPORTED_MODULE_7__[\"default\"].TILE_WIDTH - 1) / 2) + window.gameClient.player.getMoveOffset().x + projectedThing.x - projectedPlayer.x;\n        const y = ((_interface__WEBPACK_IMPORTED_MODULE_7__[\"default\"].TILE_HEIGHT - 1) / 2) + window.gameClient.player.getMoveOffset().y + projectedThing.y - projectedPlayer.y;\n        return new _position__WEBPACK_IMPORTED_MODULE_8__[\"default\"](x, y, 0);\n    }\n    getCreatureScreenPosition(creature) {\n        // Returns the creature position which is a static position plus the creature move offset\n        const staticPosition = this.getStaticScreenPosition(creature.getPosition());\n        const creatureMoveOffset = creature.getMoveOffset();\n        return new _position__WEBPACK_IMPORTED_MODULE_8__[\"default\"](staticPosition.x - creatureMoveOffset.x, staticPosition.y - creatureMoveOffset.y, 0);\n    }\n    __increment() {\n        // Increments the renderer by a number of milliseconds\n        this.debugger.__nFrames++;\n        this.__nMiliseconds = performance.now() - this.__start;\n    }\n    __getFloorTilesTiles(floor) {\n        // Returns the tiles in the viewport sorted by distinctive layers\n        const tiles = [];\n        window.gameClient.world.chunks.forEach((chunk) => {\n            chunk.getFloorTiles(floor).forEach((tile) => {\n                if (!window.gameClient.player.canSee(tile)) {\n                    return;\n                }\n                if (tile.id === 0 && tile.items.length === 0) { //TODO : && tile.neighbours.length === 1\n                    return;\n                }\n                tiles.push(tile);\n            });\n        });\n        return tiles;\n    }\n    __renderWorld() {\n        const start = performance.now();\n        // Clear the full game canvas\n        this.screen.clear();\n        // Render all of the cached tiles: only needs to be updated when the character moves\n        this.getTileCache().forEach(this.__renderFloor, this);\n        // If requested render the weather canvas\n        if (window.gameClient.interface.settings.isWeatherEnabled()) {\n            this.weatherCanvas.drawWeather();\n        }\n        // Finally draw the lightscreen to the canvas and reset it\n        if (window.gameClient.interface.settings.isLightingEnabled()) {\n            if (window.gameClient.player.hasCondition(_condition__WEBPACK_IMPORTED_MODULE_3__[\"default\"].LIGHT)) {\n                this.lightscreen.renderLightBubble(7, 5, 5, 23);\n            }\n            else {\n                this.lightscreen.renderLightBubble(7, 5, 2, 23);\n            }\n            this.screen.context.drawImage(this.lightscreen.canvas, 0, 0);\n            this.lightscreen.setup();\n        }\n        this.totalDrawTime += performance.now() - start;\n    }\n    __renderFloor(tiles, index) {\n        // Render all the tiles on the floor\n        tiles.forEach(this.__renderFullTile, this);\n        // Render the animations on this layer\n        this.__animationLayers[index].forEach((animation) => {\n            this.__renderDistanceAnimation(animation, this.__animationLayers[index]);\n        }, this);\n    }\n    __renderFullTile(tile) {\n        // Renders a full tile in the proper order (tile -> objects -> animations)\n        this.__renderTile(tile);\n        this.__renderTileObjects(tile);\n        this.__renderTileAnimations(tile);\n    }\n    __renderDistanceAnimation(animation, thing) {\n        // Renders a distance animation on a tile\n        if (animation.expired()) {\n            thing.delete(animation);\n        }\n        const position = this.getStaticScreenPosition(animation.getPosition());\n        this.screen.drawDistanceAnimation(animation, position);\n    }\n    __renderAnimation(animation, thing) {\n        // Renders an animation to the screen\n        if (animation.expired()) {\n            thing.deleteAnimation(animation);\n        }\n        // There is a flag that identifies light coming from the tile\n        if (!(animation instanceof _box_animation__WEBPACK_IMPORTED_MODULE_2__[\"default\"])) {\n            if (window.gameClient.interface.settings.isLightingEnabled() && animation.isLight()) {\n                const position = this.getStaticScreenPosition(thing.getPosition());\n                this.__renderLight(thing, position, animation, false);\n            }\n        }\n        // Determine the rendering position\n        if (animation instanceof _box_animation__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            this.screen.drawInnerCombatRect(animation, this.getCreatureScreenPosition(thing));\n        }\n        else if (thing instanceof _tile__WEBPACK_IMPORTED_MODULE_9__[\"default\"]) {\n            this.screen.drawSprite(animation, this.getStaticScreenPosition(thing.getPosition()), 32);\n        }\n        else if (thing instanceof _creature__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            this.screen.drawSprite(animation, this.getCreatureScreenPosition(thing), 32);\n        }\n        this.screen.context.globalAlpha = 1;\n    }\n    __renderTileAnimations(tile) {\n        // Renders the animations that are present on the tile\n        tile.__animations.forEach((animation) => {\n            this.__renderAnimation(animation, tile);\n        }, this);\n    }\n    __renderLightThing(position, thing, intensity) {\n        // Renders light bubble for a particular tile or item\n        const info = thing.getDataObject().properties.light;\n        const phase = 0;\n        const size = info.level + 0.2 * info.level * Math.sin(phase + window.gameClient.renderer.debugger.__nFrames / (8 * 2 * Math.PI));\n        this.lightscreen.renderLightBubble(position.x, position.y, size, info.color);\n    }\n    __renderLight(tile, position, thing, intensity) {\n        // Renders the light at a position\n        const floor = window.gameClient.world\n            .getChunkFromWorldPosition(tile.getPosition())\n            .getFirstFloorFromBottomProjected(tile.getPosition());\n        // Confirm light is visible and should be rendered\n        if (floor === null || floor >= window.gameClient.player.getMaxFloor()) {\n            this.__renderLightThing(position, thing, intensity);\n        }\n    }\n    __renderTileObjects(tile) {\n        // Renders all objects & creatures on a tile\n        const position = this.getStaticScreenPosition(tile.getPosition());\n        // Reference the items to be rendered\n        const items = tile.items;\n        // Render the items on the tile\n        items.forEach((item, i) => {\n            // Immediately skip objects with on-top property: these are rendered later\n            if (item.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_1__.PropBitFlag.DatFlagOnTop)) {\n                return;\n            }\n            // Should render item light?\n            if (window.gameClient.interface.settings.isLightingEnabled() && item.isLight()) {\n                this.__renderLight(tile, position, item, undefined);\n            }\n            // Handle the current elevation of the tile\n            const renderPosition = new _position__WEBPACK_IMPORTED_MODULE_8__[\"default\"](position.x - tile.__renderElevation, position.y - tile.__renderElevation, 0);\n            // Draw the sprite at the right position\n            this.screen.drawSprite(item, renderPosition, 32);\n            if (item.isPickupable() && i === items.length - 1 && tile === window.gameClient.mouse.getCurrentTileHover()) {\n                this.screen.drawSpriteOverlay(item, renderPosition, 32);\n            }\n            // Add the elevation of the item\n            if (item.isElevation()) {\n                tile.addElevation(item.getDataObject().properties.elevation);\n            }\n        }, this);\n        // Render the entities on the tile\n        tile.monsters.forEach((creature) => {\n            this.__renderCreature(tile, creature, false);\n        }, this);\n        // Render all the entities on this tile that were deferred\n        this.__renderDeferred(tile);\n        // Render the items that always belong on top (e.g., doors)\n        this.__renderAlwaysOnTopItems(items, position);\n    }\n    __renderAlwaysOnTopItems(items, position) {\n        // Renders the items that are always on top of the other items\n        items.forEach((item) => {\n            if (!item.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_1__.PropBitFlag.DatFlagOnTop)) {\n                return;\n            }\n            this.screen.drawSprite(item, position, 32);\n        }, this);\n    }\n    __renderTile(tile) {\n        // Rendering function for a particular tile\n        if (tile.id === 0) {\n            return;\n        }\n        // Reset the elevation of the tile\n        tile.setElevation(0);\n        // Get the position of the tile on the game screen\n        const position = this.getStaticScreenPosition(tile.getPosition());\n        // Render light if enabled and applicable\n        if (window.gameClient.interface.settings.isLightingEnabled() && tile.isLight()) {\n            this.__renderLight(tile, position, tile, undefined);\n        }\n        // Draw the sprite to the screen\n        this.screen.drawSprite(tile, position, 64);\n    }\n    __renderDeferred(tile) {\n        // Renders the deferred entities on the tile\n        if (tile.__deferredCreatures.size === 0) {\n            return;\n        }\n        tile.__deferredCreatures.forEach((creature) => {\n            const tileFromWorld = window.gameClient.world.getTileFromWorldPosition(creature.vitals.position);\n            this.__renderCreature(tileFromWorld, creature, true);\n        }, this);\n        tile.__deferredCreatures.clear();\n    }\n    __renderCreature(tile, creature, deferred) {\n        // Render the available creatures to the screen\n        if (!window.gameClient.player.canSee(creature)) {\n            return;\n        }\n        const position = this.getCreatureScreenPosition(creature);\n        const renderPosition = new _position__WEBPACK_IMPORTED_MODULE_8__[\"default\"](position.x - tile.__renderElevation, position.y - tile.__renderElevation, position.z);\n        // Should the rendering of the creature be deferred to another tile?\n        if (this.__shouldDefer(tile, creature) && !deferred) {\n            return this.__defer(tile, creature);\n        }\n        // Render animations below the creature\n        this.__renderCreatureAnimationsBelow(creature);\n        // Render the target box around the creature if applicable\n        if (window.gameClient.player.isCreatureTarget(creature)) {\n            this.screen.drawOuterCombatRect(this.getCreatureScreenPosition(creature), _interface__WEBPACK_IMPORTED_MODULE_7__[\"default\"].COLORS.RED);\n        }\n        if (creature.hasCondition(_condition__WEBPACK_IMPORTED_MODULE_3__[\"default\"].INVISIBLE)) {\n            this.__renderAnimation(_animationLooped__WEBPACK_IMPORTED_MODULE_0__[\"default\"].MAGIC_BLUE, creature);\n        }\n        else {\n            // Otherwise render the character to the screen\n            this.screen.drawCharacter(creature, renderPosition, 32, 0.25);\n        }\n        creature.__renderElevation = 0;\n        // Render animations above the creature\n        this.__renderCreatureAnimationsAbove(creature);\n    }\n    __defer(tile, creature) {\n        // Defers rendering of a creature to a new tile\n        const deferTile = this.__getDeferTile(tile, creature);\n        if (deferTile !== null) {\n            deferTile.__deferredCreatures.add(creature);\n        }\n    }\n    __getDeferTile(tile, creature) {\n        // Get the tile we need to defer the rendering of the creature to\n        if (creature.__lookDirection === _helper_appContext__WEBPACK_IMPORTED_MODULE_6__.CONST.DIRECTION.NORTHEAST) {\n            return window.gameClient.world.getTileFromWorldPosition(creature.getPosition().south());\n        }\n        else if (creature.__lookDirection === _helper_appContext__WEBPACK_IMPORTED_MODULE_6__.CONST.DIRECTION.SOUTHWEST) {\n            return window.gameClient.world.getTileFromWorldPosition(creature.getPosition().east());\n        }\n        else {\n            return window.gameClient.world.getTileFromWorldPosition(creature.__previousPosition);\n        }\n    }\n    __shouldDefer(tile, creature) {\n        // Renders true if the drawing of a creature should be deferred to another tile\n        if (creature.__teleported) {\n            return false;\n        }\n        if (!creature.isMoving()) {\n            return false;\n        }\n        if (creature.getPosition().z !== creature.__previousPosition.z) {\n            return false;\n        }\n        if ((creature.__lookDirection === _helper_appContext__WEBPACK_IMPORTED_MODULE_6__.CONST.DIRECTION.NORTH ||\n            creature.__lookDirection === _helper_appContext__WEBPACK_IMPORTED_MODULE_6__.CONST.DIRECTION.WEST ||\n            creature.__lookDirection === _helper_appContext__WEBPACK_IMPORTED_MODULE_6__.CONST.DIRECTION.NORTHWEST)) {\n            if (!creature.__previousPosition.equals(tile.getPosition())) {\n                return true;\n            }\n        }\n        if (creature.__lookDirection === _helper_appContext__WEBPACK_IMPORTED_MODULE_6__.CONST.DIRECTION.NORTHEAST) {\n            if (!creature.__previousPosition.equals(tile.getPosition().west())) {\n                return true;\n            }\n        }\n        if (creature.__lookDirection === _helper_appContext__WEBPACK_IMPORTED_MODULE_6__.CONST.DIRECTION.SOUTHWEST) {\n            if (!creature.__previousPosition.equals(tile.getPosition().north())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    __renderCreatureAnimationsAbove(creature) {\n        // Renders animations above the creature\n        creature.__animations.forEach((animation) => {\n            if (animation.constructor.name !== \"BoxAnimation\") {\n                this.__renderAnimation(animation, creature);\n            }\n        }, this);\n    }\n    __renderCreatureAnimationsBelow(creature) {\n        // Renders animations below the creature\n        creature.__animations.forEach((animation) => {\n            if (animation.constructor.name === \"BoxAnimation\") {\n                this.__renderAnimation(animation, creature);\n            }\n        }, this);\n    }\n    __renderOther() {\n        // Renders other information to the screen\n        window.gameClient.player.equipment.render();\n        window.gameClient.interface.modalManager.render();\n        this.__renderContainers();\n        window.gameClient.world.clock.updateClockDOM();\n        window.gameClient.interface.screenElementManager.render();\n        window.gameClient.interface.hotbarManager.render();\n        this.debugger.renderStatistics();\n    }\n    __renderContainers() {\n        // Handles a tab-out event of the game window\n        window.gameClient.player.__openedContainers.forEach((container) => container.__renderAnimated());\n    }\n    __handleVisibiliyChange(event) {\n        // Handles a tab-out event of the game window\n        if (!document.hidden) {\n            return;\n        }\n        Object.values(window.gameClient.world.activeCreatures).forEach((creature) => {\n            creature.__movementEvent = null;\n        });\n    }\n    __drawCastbar(creature) {\n        // Draws a castbar on top of the creature\n        let position = this.getCreatureScreenPosition(creature);\n        position.y += 6 / 32;\n        let fraction = creature.getCastFraction();\n        let color = \"white\";\n        if (fraction === 1) {\n            creature.endCast();\n        }\n        if (creature.__spell.channel !== null) {\n            fraction = 1 - fraction;\n        }\n        // TODO: check this\n        //this.screen.drawBar(32, 4, position, fraction, color);\n    }\n    __createAnimationLayers() {\n        // Creates a set for all animations for a particular layer\n        for (let i = 0; i < 8; i++) {\n            this.__animationLayers.push(new Set());\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/renderer.ts?");

/***/ }),

/***/ "./client/src/rgba.ts":
/*!****************************!*\
  !*** ./client/src/rgba.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RGBA)\n/* harmony export */ });\nclass RGBA {\n    constructor(r, g, b, a) {\n        /*\n         * Class RGBA\n         * Container for colors\n         */\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    copy() {\n        /*\n         * Function RGBA.copy\n         * Returns a copy (new memory) of the current RGBA instance\n         */\n        return new RGBA(this.r, this.g, this.b, this.a);\n    }\n    toString() {\n        /*\n         * Function RGBA.toString\n         * Returns HTML/CSS string representation of the color\n         */\n        return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a / 0xff})`;\n    }\n    interpolate(color, fraction) {\n        /*\n         * Function RGBA.interpolate\n         * Interpolates self to the requested color by a fraction\n         */\n        return new RGBA(Math.round(this.r + fraction * (color.r - this.r)), Math.round(this.g + fraction * (color.g - this.g)), Math.round(this.b + fraction * (color.b - this.b)), Math.round(this.a + fraction * (color.a - this.a)));\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/rgba.ts?");

/***/ }),

/***/ "./client/src/screen-element-character.ts":
/*!************************************************!*\
  !*** ./client/src/screen-element-character.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CharacterElement)\n/* harmony export */ });\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _screen_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./screen-element */ \"./client/src/screen-element.ts\");\n\n\nclass CharacterElement extends _screen_element__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(creature) {\n        super(\"character-element-prototype\");\n        this.__creature = creature;\n        this.setName(creature.vitals.name);\n    }\n    setDefault() {\n        this.setHealthFraction(this.__creature.getHealthFraction());\n    }\n    setDefaultEnergy(value) {\n        if (this.energyBar) {\n            const energyBar = this.element.querySelector(\".value-energy\");\n            if (energyBar) {\n                energyBar.style.width = value;\n            }\n        }\n    }\n    setDefaultMana(value) {\n        console.log('setDefaultMana', value);\n        if (this.manaBar) {\n            const manaBar = this.element.querySelector(\".value-mana\");\n            if (manaBar) {\n                manaBar.style.width = value;\n            }\n        }\n    }\n    setGrey() {\n        this.setHealthColor(_interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.LIGHTGREY);\n        this.setManaColor(_interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.LIGHTGREY);\n    }\n    setHealthFraction(fraction) {\n        const color = fraction > 0.50 ? _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.LIGHTGREEN :\n            fraction > 0.25 ? _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.ORANGE :\n                fraction > 0.10 ? _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.RED :\n                    _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.DARKRED;\n        const healthBar = this.element.querySelector(\".value-health\");\n        if (healthBar) {\n            // Assuming fraction is a value between 0 and 1.\n            healthBar.style.width = (fraction * 100).toString() + \"%\";\n        }\n        this.setHealthColor(color);\n    }\n    setHealthColor(color) {\n        const healthBar = this.element.querySelector(\".value-health\");\n        if (healthBar) {\n            healthBar.style.backgroundColor = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype.getHexColor(color);\n        }\n        this.setNameColor(color);\n    }\n    setManaColor(color) {\n        const manaBar = this.element.querySelector(\".value-mana\");\n        if (manaBar) {\n            manaBar.style.backgroundColor = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype.getHexColor(color);\n        }\n    }\n    setNameColor(color) {\n        const nameSpan = this.element.querySelector(\"span\");\n        if (nameSpan) {\n            nameSpan.style.color = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype.getHexColor(color);\n        }\n    }\n    setName(name) {\n        const nameSpan = this.element.querySelector(\"span\");\n        if (nameSpan) {\n            nameSpan.innerHTML = name;\n        }\n    }\n    setTextPosition() {\n        const creatureTilePos = window.gameClient.renderer.getCreatureScreenPosition(this.__creature);\n        const canvas = window.gameClient.renderer.screen.canvas;\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = rect.width / canvas.width;\n        const scaleY = rect.height / canvas.height;\n        const spriteSizeX = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TILE_SIZE * scaleX;\n        const spriteSizeY = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TILE_SIZE * scaleY;\n        const screenCenterX = (_interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TILE_WIDTH - 1) / 2;\n        const screenCenterY = (_interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TILE_HEIGHT - 1) / 2;\n        // 🧠 now correct offset using independent X and Y scaling:\n        const offsetX = (creatureTilePos.x - screenCenterX) * spriteSizeX + rect.left + rect.width / 2;\n        const offsetY = (creatureTilePos.y - screenCenterY) * spriteSizeY + rect.top + rect.height / 2;\n        this.element.style.transform = `translate(\r\n      ${offsetX - this.element.offsetWidth / 2 - 20}px,\r\n      ${offsetY - spriteSizeY * 1.2}px\r\n    )`;\n    }\n    addManaBar(value) {\n        if (!this.manaBar) {\n            this.manaBar = this.addBar(\"mana\");\n        }\n        this.setDefaultMana(value);\n    }\n    addEnergyBar(value) {\n        if (!this.energyBar) {\n            this.energyBar = this.addBar(\"energy\");\n        }\n        this.setDefaultEnergy(value);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/screen-element-character.ts?");

/***/ }),

/***/ "./client/src/screen-element-floating.ts":
/*!***********************************************!*\
  !*** ./client/src/screen-element-floating.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FloatingElement)\n/* harmony export */ });\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _screen_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./screen-element */ \"./client/src/screen-element.ts\");\n\n\nclass FloatingElement extends _screen_element__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(message, position, color) {\n        // Call the parent constructor with the prototype identifier and gameClient.\n        super(\"floating-element-prototype\");\n        this.__position = position;\n        this.setColor(color);\n        this.setMessage(message);\n        this.__start = performance.now();\n    }\n    /**\n     * Returns the duration (in milliseconds or any unit) the element should appear.\n     */\n    getDuration() {\n        return 15;\n    }\n    /**\n     * Returns the age (time elapsed) of the element.\n     */\n    getAge() {\n        return performance.now() - this.__start;\n    }\n    /**\n     * Updates the text position based on the element's age and position.\n     */\n    setTextPosition() {\n        // Get a static screen position from the renderer using the element's position.\n        const staticPos = window.gameClient.renderer.getStaticScreenPosition(this.__position);\n        // Calculate the absolute offset (assume __getAbsoluteOffset is inherited).\n        const offset = this.__getAbsoluteOffset(staticPos);\n        const age = this.getAge();\n        // Animate the text element upwards as it ages.\n        offset.top -= Math.floor(0.05 * age);\n        // Update opacity after 500ms.\n        if (age > 500) {\n            this.element.style.opacity = String(1 - ((age - 500) / 250));\n        }\n        // Update the element's position on screen (assume __updateTextPosition is inherited).\n        this.__updateTextPosition(offset);\n    }\n    /**\n     * Sets the text message of the floating element.\n     */\n    setMessage(message) {\n        const span = this.element.querySelector(\"span\");\n        if (span) {\n            span.innerHTML = message;\n        }\n    }\n    /**\n     * Sets the text color of the floating element.\n     */\n    setColor(color) {\n        const span = this.element.querySelector(\"span\");\n        if (span) {\n            span.style.color = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype.getHexColor(color);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/screen-element-floating.ts?");

/***/ }),

/***/ "./client/src/screen-element-manager.ts":
/*!**********************************************!*\
  !*** ./client/src/screen-element-manager.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ScreenElementManager)\n/* harmony export */ });\n/* harmony import */ var _screen_element_floating__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./screen-element-floating */ \"./client/src/screen-element-floating.ts\");\n/* harmony import */ var _screen_element_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./screen-element-message */ \"./client/src/screen-element-message.ts\");\n\n\nclass ScreenElementManager {\n    constructor() {\n        this.activeTextElements = new Set();\n        const wrapper = document.getElementById(\"text-wrapper\");\n        if (!wrapper) {\n            throw new Error(\"Element with id 'text-wrapper' not found.\");\n        }\n        this.screenWrapper = wrapper;\n    }\n    clear() {\n        // Remove all character elements from the DOM\n        Object.values(window.gameClient.world.activeCreatures).forEach((creature) => {\n            creature.characterElement.remove();\n        });\n    }\n    render() {\n        // Render the character elements\n        this.__renderCharacterElements();\n        // Render other text bubbles on the screen\n        this.activeTextElements.forEach((screenElement) => {\n            // Only update the position of the text when it is floating or when the player moves\n            if (window.gameClient.player.isMoving() || screenElement.constructor.name === \"FloatingElement\") {\n                screenElement.setTextPosition();\n            }\n        });\n    }\n    __renderCharacterElements() {\n        // Render floating name elements above the active creatures\n        Object.values(window.gameClient.world.activeCreatures).forEach((creature) => {\n            // Do not show the name element when on another floor\n            if (window.gameClient.player.getPosition().z !== creature.getPosition().z) {\n                return creature.characterElement.hide();\n            }\n            // Do not waste time rendering creatures that are not visible\n            if (!window.gameClient.player.canSeeSmall(creature)) {\n                return creature.characterElement.hide();\n            }\n            // Set color of nameplate for creatures other than the player\n            if (creature !== window.gameClient.player) {\n                if (window.gameClient.player.getMaxFloor() > creature.getMaxFloor()) {\n                    creature.characterElement.setGrey();\n                }\n                else {\n                    creature.characterElement.setDefault();\n                }\n            }\n            // Update the position of the name tag\n            creature.characterElement.setTextPosition();\n        });\n    }\n    add(element) {\n        this.screenWrapper.appendChild(element);\n    }\n    createFloatingTextElement(message, position, color) {\n        if (document.hidden) {\n            return null;\n        }\n        return this.__createTextElement(new _screen_element_floating__WEBPACK_IMPORTED_MODULE_0__[\"default\"](message, position, color));\n    }\n    __createTextElement(messageElement) {\n        // Keep a reference to the active text element\n        this.activeTextElements.add(messageElement);\n        // Add the element to the screen wrapper\n        this.add(messageElement.element);\n        // Must update the position after appending to the parent\n        messageElement.setTextPosition();\n        // Schedule deletion after the element's duration expires\n        const event = window.gameClient.eventQueue.addEvent(this.deleteTextElement.bind(this, messageElement), messageElement.getDuration());\n        return event;\n    }\n    createTextElement(entity, message, color) {\n        // If the entity type is not 1, add the message to the default channel instead.\n        if (entity.type !== 1) {\n            window.gameClient.interface.channelManager.getChannel(\"Default\").addMessage(message, entity.type, entity.name, color);\n        }\n        if (document.hidden) {\n            return null;\n        }\n        console.log('Creating text element:', entity, message, color);\n        return this.__createTextElement(new _screen_element_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"](entity, message, color));\n    }\n    deleteTextElement(textElement) {\n        // Remove the element from the DOM\n        textElement.remove();\n        // Delete its reference from active text elements\n        this.activeTextElements.delete(textElement);\n        // For MessageElement, if more text is buffered, create a new element with the next message.\n        if (textElement instanceof _screen_element_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n            if (textElement.__entity.textBuffer.length === 0) {\n                return;\n            }\n            this.createTextElement(textElement.__entity, textElement.__entity.textBuffer.shift() || \"\", textElement.__color);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/screen-element-manager.ts?");

/***/ }),

/***/ "./client/src/screen-element-message.ts":
/*!**********************************************!*\
  !*** ./client/src/screen-element-message.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MessageElement)\n/* harmony export */ });\n/* harmony import */ var _screen_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./screen-element */ \"./client/src/screen-element.ts\");\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n\n\nclass MessageElement extends _screen_element__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(entity, message, color) {\n        // Call the parent constructor with gameClient and the prototype identifier.\n        super(\"message-element-prototype\");\n        this.__entity = entity;\n        this.__position = entity.getPosition().copy();\n        this.__message = message;\n        this.__color = color;\n        this.setMessage(message);\n        this.setColor(color);\n    }\n    /**\n     * Returns the duration the message element should remain on the screen.\n     */\n    getDuration() {\n        return 15 * Math.sqrt(this.__message.length);\n    }\n    /**\n     * Sets the message of the element.\n     */\n    setMessage(message) {\n        const spans = this.element.querySelectorAll(\"span\");\n        if (spans.length < 2)\n            return;\n        const nameElement = spans[0];\n        const textElement = spans[1];\n        nameElement.innerHTML = `<u>${this.__entity.getName()}</u>`;\n        textElement.innerHTML = message;\n    }\n    /**\n     * Sets the text color of the element.\n     */\n    setColor(color) {\n        const spans = this.element.querySelectorAll(\"span\");\n        if (spans.length < 2)\n            return;\n        const nameElement = spans[0];\n        const textElement = spans[1];\n        textElement.style.color = _interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype.getHexColor(color);\n        nameElement.style.color = _interface__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype.getHexColor(color);\n    }\n    /**\n     * Updates the text position of the element based on its position.\n     */\n    setTextPosition() {\n        const staticPos = window.gameClient.renderer.getStaticScreenPosition(this.__position);\n        const offset = this.__getAbsoluteOffset(staticPos);\n        this.__updateTextPosition(offset);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/screen-element-message.ts?");

/***/ }),

/***/ "./client/src/screen-element.ts":
/*!**************************************!*\
  !*** ./client/src/screen-element.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ScreenElement)\n/* harmony export */ });\n// Helper clamp function.\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nclass ScreenElement {\n    constructor(id) {\n        const elem = document.getElementById(id);\n        if (!elem) {\n            throw new Error(`Element with id \"${id}\" not found.`);\n        }\n        // Clone the node deeply.\n        this.element = elem.cloneNode(true);\n        this.show();\n    }\n    remove() {\n        this.element.remove();\n    }\n    hide() {\n        this.element.style.display = \"none\";\n    }\n    show() {\n        this.element.style.display = \"block\";\n    }\n    addBar(barType) {\n        // Create the bar container.\n        const barContainer = document.createElement(\"div\");\n        barContainer.className = \"character-element-bar\";\n        // Create the inner bar.\n        const barValue = document.createElement(\"div\");\n        barValue.className = `value-${barType}`;\n        barContainer.appendChild(barValue);\n        // Append to the main element.\n        this.element.appendChild(barContainer);\n        return barValue;\n    }\n    __updateTextPosition(offset) {\n        this.element.style.left = `${offset.left}px`;\n        this.element.style.top = `${offset.top}px`;\n    }\n    __getAbsoluteOffset(position) {\n        // Determine the fraction based on the screen size.\n        const fraction = window.gameClient.interface.getSpriteScaling();\n        // Calculate centered offsets.\n        const left = fraction * position.x - 0.5 * this.element.offsetWidth;\n        const top = fraction * position.y - 0.5 * this.element.offsetHeight;\n        return { left, top };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/screen-element.ts?");

/***/ }),

/***/ "./client/src/settings.ts":
/*!********************************!*\
  !*** ./client/src/settings.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Settings)\n/* harmony export */ });\nclass Settings {\n    constructor(gameInterface) {\n        this.gameInterface = gameInterface;\n        // Set the volume slider callback function.\n        const volumeSlider = document.getElementById(\"volume-slider\");\n        if (volumeSlider) {\n            volumeSlider.oninput = this.setVolume;\n        }\n        // Set the initial volume slider value.\n        const volumeSliderValue = document.getElementById(\"volume-slider-value\");\n        if (volumeSlider && volumeSliderValue) {\n            volumeSliderValue.innerHTML = `${volumeSlider.value}%`;\n        }\n        // Attach event listeners for resolution changes.\n        const enableResolution = document.getElementById(\"enable-resolution\");\n        const resolution = document.getElementById(\"resolution\");\n        if (enableResolution) {\n            // Bind to the parent's handleResize method.\n            enableResolution.addEventListener(\"change\", this.gameInterface.handleResize.bind(this.gameInterface));\n        }\n        if (resolution) {\n            resolution.addEventListener(\"change\", this.gameInterface.handleResize.bind(this.gameInterface));\n        }\n        // Add event listener for anti-aliasing.\n        const antiAliasing = document.getElementById(\"anti-aliasing\");\n        if (antiAliasing) {\n            antiAliasing.addEventListener(\"change\", this.__setAA);\n        }\n        this.__init();\n        // Apply state to the DOM to keep it in sync.\n        Object.keys(this.__state).forEach(this.__applyState.bind(this));\n    }\n    /**\n     * __setAA event handler.\n     * Sets the canvas image rendering based on the anti-aliasing checkbox state.\n     */\n    __setAA(event) {\n        const target = event.target;\n        if (target.checked) {\n            window.gameClient.renderer.screen.canvas.style.imageRendering = \"auto\";\n        }\n        else {\n            window.gameClient.renderer.screen.canvas.style.imageRendering = \"pixelated\";\n        }\n    }\n    /**\n     * setVolume event handler.\n     * Sets the master volume of the application.\n     */\n    setVolume(event) {\n        const target = event.target;\n        const volume = Number(target.value);\n        window.gameClient.interface.soundManager.setMasterVolume(volume / 100);\n        const volumeSliderValue = document.getElementById(\"volume-slider-value\");\n        if (volumeSliderValue) {\n            volumeSliderValue.innerHTML = `${volume}%`;\n        }\n    }\n    /**\n     * Clears settings from local storage.\n     */\n    clear() {\n        localStorage.removeItem(\"settings\");\n    }\n    /**\n     * Returns true if sound is enabled.\n     */\n    isSoundEnabled() {\n        return this.__state[\"enable-sound\"];\n    }\n    /**\n     * Returns true if weather is enabled.\n     */\n    isWeatherEnabled() {\n        return this.__state[\"enable-weather\"];\n    }\n    /**\n     * Returns true if lighting is enabled.\n     */\n    isLightingEnabled() {\n        return this.__state[\"enable-lighting\"];\n    }\n    /**\n     * Saves the current settings state to local storage.\n     */\n    saveState() {\n        localStorage.setItem(\"settings\", JSON.stringify(this.__state));\n    }\n    /**\n     * Toggles a setting based on the event target and saves the new state.\n     */\n    __toggle(event) {\n        const target = event.target;\n        switch (target.id) {\n            case \"enable-lighting\":\n            case \"enable-weather\":\n            case \"enable-sound\":\n                this.__state[target.id] = target.checked;\n                window.gameClient.interface.soundManager.enableSound(target.checked);\n                break;\n            case \"toggle-scale-gamewindow\":\n                this.__state[target.id] = target.checked;\n                this.__toggleScaleGamewindow(target.checked);\n                break;\n            default:\n                return;\n        }\n        this.saveState();\n    }\n    /**\n     * Stub for toggling the game window scale.\n     */\n    __toggleScaleGamewindow(checked) {\n        // Implement toggle behavior for scaling the game window.\n    }\n    /**\n     * Initializes the settings state from local storage.\n     */\n    __init() {\n        const state = localStorage.getItem(\"settings\");\n        if (state === null) {\n            this.__state = this.__getCleanState();\n        }\n        else {\n            this.__state = JSON.parse(state);\n            this.__update();\n        }\n    }\n    /**\n     * Updates the settings state with any new or removed settings.\n     */\n    __update() {\n        const cleanState = this.__getCleanState();\n        // Add new settings.\n        Object.keys(cleanState).forEach((key) => {\n            if (!this.__state.hasOwnProperty(key)) {\n                this.__state[key] = cleanState[key];\n            }\n        });\n        // Remove settings that no longer exist.\n        Object.keys(this.__state).forEach((key) => {\n            if (!cleanState.hasOwnProperty(key)) {\n                delete this.__state[key];\n            }\n        });\n    }\n    /**\n     * Returns the default settings state by reading the current DOM values.\n     */\n    __getCleanState() {\n        var _a, _b, _c, _d, _e, _f;\n        return {\n            \"enable-sound\": (_b = (_a = document.getElementById(\"enable-sound\")) === null || _a === void 0 ? void 0 : _a.checked) !== null && _b !== void 0 ? _b : false,\n            \"enable-lighting\": (_d = (_c = document.getElementById(\"enable-lighting\")) === null || _c === void 0 ? void 0 : _c.checked) !== null && _d !== void 0 ? _d : false,\n            \"enable-weather\": (_f = (_e = document.getElementById(\"enable-weather\")) === null || _e === void 0 ? void 0 : _e.checked) !== null && _f !== void 0 ? _f : false,\n        };\n    }\n    /**\n     * Applies the stored state to a specific DOM element by its ID.\n     */\n    __applyState(id) {\n        const element = document.getElementById(id);\n        if (!element)\n            return;\n        element.addEventListener(\"change\", this.__toggle.bind(this));\n        // Update the element state based on the stored state.\n        switch (id) {\n            case \"enable-lighting\":\n            case \"enable-weather\":\n            case \"enable-sound\":\n                element.checked = this.__state[id];\n                break;\n            default:\n                return;\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/settings.ts?");

/***/ }),

/***/ "./client/src/slot.ts":
/*!****************************!*\
  !*** ./client/src/slot.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Slot)\n/* harmony export */ });\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n\n\nclass Slot {\n    constructor() {\n        /*\n         * Class Slot\n         * Container for a slot that contains an item\n         */\n        this.item = null;\n    }\n    setElement(element) {\n        /*\n         * Function Slot.setElement\n         * Sets the elements in the DOM\n         */\n        this.element = element;\n        this.canvas = new _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](element.firstElementChild, 32, 32);\n    }\n    createDOM(index) {\n        /*\n         * Function Slot.createDOM\n         * Creates the interactable DOM elements for the slot\n         */\n        // let element = document.getElementById(\"slot-prototype\")!.cloneNode(true) as HTMLElement;\n        // element.setAttribute(\"slotIndex\", index.toString());\n        // element.removeAttribute(\"id\");\n        // this.setElement(element);\n    }\n    setItem(item) {\n        /*\n         * Function Slot.setItem\n         * Sets an item in the slot\n         */\n        this.item = item;\n        // Update the class with the rarity color of the item\n        this.element.className = \"slot \" + this.getRarityColor(item);\n    }\n    getRarityColor(item) {\n        /*\n         * Function Slot.getRarityColor\n         * Returns the rarity color of the slot\n         */\n        if (!item)\n            return \"\";\n        switch ((Math.random() * 5) | 0) {\n            case 0:\n                return \"uncommon\";\n            case 1:\n                return \"rare\";\n            case 2:\n                return \"epic\";\n            case 3:\n                return \"legendary\";\n            case 4:\n            default:\n                return \"\";\n        }\n    }\n    __renderAnimated() {\n        /*\n         * Function Slot.__renderAnimated\n         * Renders the slot when it is animated\n         */\n        if (this.isEmpty()) {\n            return;\n        }\n        this.render();\n    }\n    render() {\n        /*\n         * Function Slot.render\n         * Renders the slot\n         */\n        // Clear the slot\n        this.canvas.clear();\n        this.setCountString(null);\n        if (this.isEmpty()) {\n            return;\n        }\n        // Draw the sprite to the slot canvas\n        this.canvas.drawSprite(this.item, new _position__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0, 0), 32);\n        // If the item is stackable, update the count display\n        if (this.item.isStackable()) {\n            this.setCountString(this.item.getCount());\n        }\n    }\n    setCountString(count) {\n        /*\n         * Function Slot.setCountString\n         * Sets the count DOM element to the passed value\n         */\n        this.element.lastChild.textContent = count !== null ? count.toString() : \"\";\n    }\n    isEmpty() {\n        /*\n         * Function Slot.isEmpty\n         * Returns true if the slot is empty and does not contain an item\n         */\n        return this.item === null;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/slot.ts?");

/***/ }),

/***/ "./client/src/sound-manager.ts":
/*!*************************************!*\
  !*** ./client/src/sound-manager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SoundManager)\n/* harmony export */ });\n/* harmony import */ var _soundbit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./soundbit */ \"./client/src/soundbit.ts\");\n/* harmony import */ var _soundtrace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./soundtrace */ \"./client/src/soundtrace.ts\");\n\n\nclass SoundManager {\n    constructor(enabled) {\n        this.traces = {};\n        this.soundbits = {};\n        this.ambientTraces = {};\n        // Register ambient traces (only one ambient can play at a time)\n        this.registerAmbientTrace(\"field\");\n        this.registerAmbientTrace(\"cave\");\n        this.registerAmbientTrace(\"forest\");\n        this.registerAmbientTrace(\"wind\");\n        // Extra trace\n        this.registerTrace(\"rain\");\n        // Small sound bits\n        this.registerSoundbit(\"wood\", [\"wood-2\"]);\n        this.registerSoundbit(\"thunder\", [\"thunder-1\", \"thunder-2\", \"thunder-3\", \"thunder-4\"]);\n        this.registerSoundbit(\"grass-walk\", [\n            \"grass-1\", \"grass-2\", \"grass-3\", \"grass-4\",\n            \"grass-5\", \"grass-6\", \"grass-7\", \"grass-8\"\n        ]);\n        // Master volume for all traces\n        this.__masterVolume = enabled ? 1.0 : 0.0;\n        this.__currentAmbientTrace = null;\n    }\n    playWalkBit(position) {\n        const tile = window.gameClient.world.getTileFromWorldPosition(position);\n        if ((tile === null || tile === void 0 ? void 0 : tile.id) === 405) {\n            this.play(\"wood\");\n        }\n        else {\n            this.play(\"grass-walk\");\n        }\n    }\n    enableSound(bool) {\n        this.setMasterVolume(bool ? 1.0 : 0.0);\n    }\n    setMasterVolume(amount) {\n        if (!window.gameClient.interface.settings.isSoundEnabled()) {\n            amount = 0;\n        }\n        this.__masterVolume = amount;\n        if (this.__currentAmbientTrace) {\n            this.__currentAmbientTrace.setVolume(amount);\n        }\n    }\n    registerSoundbit(id, ids) {\n        this.soundbits[id] = new _soundbit__WEBPACK_IMPORTED_MODULE_0__[\"default\"](ids);\n    }\n    registerAmbientTrace(id) {\n        this.ambientTraces[id] = new _soundtrace__WEBPACK_IMPORTED_MODULE_1__[\"default\"](id);\n    }\n    registerTrace(id) {\n        this.traces[id] = new _soundtrace__WEBPACK_IMPORTED_MODULE_1__[\"default\"](id);\n    }\n    tick() {\n        // Tick each sound trace to update its state.\n        Object.values(this.traces).forEach(trace => trace.tick());\n        Object.values(this.ambientTraces).forEach(trace => trace.tick());\n    }\n    fadeTo(trackOne, trackTwo) {\n        // Swap volumes between two ambient traces.\n        this.setVolume(trackOne, 0);\n        this.setVolume(trackTwo, 1);\n    }\n    play(id) {\n        if (!this.soundbits.hasOwnProperty(id)) {\n            return;\n        }\n        this.soundbits[id].play();\n    }\n    setAmbientTrace(id) {\n        if (this.__currentAmbientTrace !== null) {\n            this.__currentAmbientTrace.setVolume(0);\n        }\n        this.__currentAmbientTrace = this.setAmbientVolume(id, 1);\n    }\n    setAmbientVolume(id, volume) {\n        if (!this.ambientTraces.hasOwnProperty(id)) {\n            return null;\n        }\n        return this.ambientTraces[id].setVolume(volume);\n    }\n    setVolume(id, volume) {\n        if (!this.traces.hasOwnProperty(id)) {\n            return null;\n        }\n        return this.traces[id].setVolume(volume);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/sound-manager.ts?");

/***/ }),

/***/ "./client/src/soundbit.ts":
/*!********************************!*\
  !*** ./client/src/soundbit.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SoundBit)\n/* harmony export */ });\nclass SoundBit {\n    constructor(ids) {\n        this.ids = ids;\n    }\n    play() {\n        const randomIndex = Math.floor(Math.random() * this.ids.length);\n        const id = this.ids[randomIndex];\n        const element = document.getElementById(id);\n        if (!element)\n            return;\n        const clone = element.cloneNode(true);\n        clone.volume = 0.5;\n        clone.play();\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/soundbit.ts?");

/***/ }),

/***/ "./client/src/soundtrace.ts":
/*!**********************************!*\
  !*** ./client/src/soundtrace.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SoundTrace)\n/* harmony export */ });\nclass SoundTrace {\n    constructor(id) {\n        const el = document.getElementById(id);\n        if (!el) {\n            throw new Error(`Element with id ${id} not found`);\n        }\n        this.element = el;\n        this.element.loop = true;\n        this.__volume = 0;\n        this.__volumeTarget = 0;\n        this.__volumeStart = 0;\n        this.__steps = 0;\n        this.__counter = 0;\n        this.__playing = false;\n    }\n    start() {\n        this.element.play();\n        this.__playing = true;\n    }\n    stop() {\n        this.element.pause();\n        this.element.currentTime = 0;\n        this.__playing = false;\n    }\n    tick() {\n        if (this.__counter === 0) {\n            return;\n        }\n        // Linear interpolation: gradually change volume.\n        this.__volume =\n            this.__volumeTarget +\n                ((this.__counter - 1) / this.__steps) *\n                    (this.__volumeStart - this.__volumeTarget);\n        this.__counter--;\n        this.element.volume = this.__volume;\n        // Start or stop the audio based on the volume.\n        if (this.__volume === 0) {\n            this.stop();\n        }\n        else if (!this.__playing) {\n            this.start();\n        }\n    }\n    setVolume(volume) {\n        // Capture the current volume as the starting point.\n        this.__volumeStart = this.__volume;\n        // Ensure we do not exceed the master volume.\n        this.__volumeTarget = Math.min(gameClient.interface.soundManager.__masterVolume, volume);\n        // Calculate steps for volume change (rounded to an integer).\n        this.__steps = (1E3 * Math.abs(this.__volume - this.__volumeTarget)) | 0;\n        this.__counter = this.__steps;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/soundtrace.ts?");

/***/ }),

/***/ "./client/src/sprite-buffer.ts":
/*!*************************************!*\
  !*** ./client/src/sprite-buffer.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _packetreader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packetreader */ \"./client/src/packetreader.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sprite */ \"./client/src/sprite.ts\");\n\n\n\n\nclass SpriteBuffer {\n    constructor(size) {\n        this.__spriteBufferIndex = 0;\n        this.__spriteBufferLookup = {};\n        this.nEvictions = 0;\n        this.size = size;\n        this.__spriteBufferArray = new Array(size * size).fill(null);\n        this.__spriteBufferCanvas = new _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](null, 32 * size, 32 * size);\n        this.compositionCanvas = new _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](null, 32, 32);\n    }\n    /** 🔹 Get position of a sprite in the current buffer */\n    getSpritePosition(id) {\n        if (!this.has(id))\n            return null;\n        return this.__getPosition(this.__spriteBufferLookup[id]);\n    }\n    clear() {\n        this.__spriteBufferIndex = 0;\n        this.__spriteBufferArray.fill(null);\n        this.__spriteBufferLookup = {};\n        this.__spriteBufferCanvas.clear();\n    }\n    has(id) {\n        return this.__spriteBufferLookup.hasOwnProperty(id);\n    }\n    reserve(id) {\n        this.__evict(this.__spriteBufferIndex);\n        this.__spriteBufferArray[this.__spriteBufferIndex] = id;\n        this.__spriteBufferLookup[id] = this.__spriteBufferIndex;\n        let position = this.__getPosition(this.__spriteBufferIndex);\n        this.__spriteBufferIndex = (this.__spriteBufferIndex + 1) % this.__spriteBufferArray.length;\n        return position;\n    }\n    /** 🔹 Get a sprite, fetching if necessary */\n    get(id) {\n        if (id === 0)\n            return null;\n        if (!this.has(id))\n            return this.__add(id);\n        return this.__get(id);\n    }\n    /** 🔹 Global Sprite Loader */\n    static load(name, data) {\n        try {\n            if (data instanceof ArrayBuffer) {\n                // Directly use ArrayBuffer from IndexedDB\n                SpriteBuffer.__loadGlobal(name, data);\n            }\n            else {\n                const result = data.target.result;\n                if (result instanceof ArrayBuffer) {\n                    SpriteBuffer.__loadGlobal(name, result);\n                }\n                else {\n                    throw new Error(\"Failed to load sprite: result is not an ArrayBuffer.\");\n                }\n                window.gameClient.database.storeFile(name, result);\n            }\n        }\n        catch (exception) {\n            window.gameClient.interface.modalManager.open(\"floater-connecting\", exception);\n        }\n    }\n    /** 🔹 Load sprites into global storage */\n    static __loadGlobal(name, buffer) {\n        let start = performance.now();\n        // Ensure globalPacket is initialized\n        this.__globalPacket = new _packetreader__WEBPACK_IMPORTED_MODULE_1__[\"default\"](buffer);\n        let signature = this.__globalPacket.readUInt32().toString(16).toUpperCase();\n        if (!SpriteBuffer.SIGNATURES.hasOwnProperty(signature)) {\n            throw new Error(\"Unknown Tibia.spr file supplied.\");\n        }\n        this.__version = SpriteBuffer.SIGNATURES[signature];\n        let spriteCount = this.__version > 760 ? this.__globalPacket.readUInt32() : this.__globalPacket.readUInt16();\n        let storedCount = 0;\n        for (let i = 1; i <= spriteCount; i++) {\n            let address = this.__globalPacket.readUInt32();\n            if (address !== 0) {\n                this.__globalSpriteAddressPointers[i] = address;\n                storedCount++;\n            }\n        }\n        console.log(`✅ Stored ${storedCount} global sprite addresses.`);\n        window.gameClient.interface.loadAssetCallback(\"sprite\", name);\n    }\n    /** 🔹 Add sprite to the local buffer */\n    __add(id) {\n        let position = this.reserve(id);\n        let imageData = this.__getImageData(id);\n        this.__spriteBufferCanvas.context.putImageData(imageData, 32 * position.x, 32 * position.y);\n        return new _sprite__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.__spriteBufferCanvas.canvas, position, 32);\n    }\n    __get(id) {\n        let index = this.__spriteBufferLookup[id];\n        let position = this.__getPosition(index);\n        return new _sprite__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.__spriteBufferCanvas.canvas, position, 32);\n    }\n    __evict(index) {\n        if (this.__spriteBufferArray[index] === null)\n            return;\n        this.nEvictions++;\n        delete this.__spriteBufferLookup[this.__spriteBufferArray[index]];\n    }\n    __getPosition(index) {\n        let x = index % this.size;\n        let y = Math.floor(index / this.size);\n        return new _position__WEBPACK_IMPORTED_MODULE_2__[\"default\"](x, y, 0);\n    }\n    /** 🔹 Load image data from global storage */\n    __getImageData(id) {\n        const address = SpriteBuffer.__globalSpriteAddressPointers[id];\n        return this.__loadSingleSprite(address);\n    }\n    __loadSingleSprite(address) {\n        if (!SpriteBuffer.__globalPacket) {\n            throw new Error(\"❌ Global sprite data has not been loaded yet!\");\n        }\n        let spriteLength = SpriteBuffer.__globalPacket.buffer[address + 3] + (SpriteBuffer.__globalPacket.buffer[address + 4] << 8);\n        let spritePacket = SpriteBuffer.__globalPacket.slice(address, address + 5 + spriteLength);\n        let alpha = spritePacket.readRGB();\n        spritePacket.skip(2);\n        let buffer = new Uint32Array(32 * 32);\n        let index = 0;\n        while (spritePacket.readable()) {\n            let transparentPixels = spritePacket.readUInt16();\n            let coloredPixels = spritePacket.readUInt16();\n            index += transparentPixels;\n            for (let i = index; i < index + coloredPixels; i++) {\n                let r = spritePacket.readUInt8();\n                let g = spritePacket.readUInt8();\n                let b = spritePacket.readUInt8();\n                let a = spritePacket.readUInt8();\n                buffer[i] = (a << 24) | (b << 16) | (g << 8) | r;\n            }\n            index += coloredPixels;\n        }\n        return new ImageData(new Uint8ClampedArray(buffer.buffer), 32, 32);\n    }\n    addComposedOutfit(baseIdentifier, outfit, item, frame, xPattern, zPattern, x, y) {\n        if (this.has(baseIdentifier)) {\n            return;\n        }\n        let position = this.reserve(baseIdentifier);\n        this.addComposedOutfitLayer(position, outfit, item, frame, xPattern, 0, zPattern, x, y);\n    }\n    addComposedOutfitLayer(position, outfit, item, frame, xPattern, yPattern, zPattern, x, y) {\n        let groundSprite = item.getSpriteId(frame, xPattern, yPattern, zPattern, 0, x, y);\n        let maskSprite = item.getSpriteId(frame, xPattern, yPattern, zPattern, 1, x, y);\n        this.addComposed(position, outfit, groundSprite, maskSprite);\n    }\n    addComposed(position, outfit, base, mask) {\n        if (base === 0) {\n            return;\n        }\n        let baseData = this.__getImageData(base);\n        if (mask !== 0) {\n            this.__compose(outfit, baseData, this.__getImageData(mask));\n        }\n        this.compositionCanvas.context.putImageData(baseData, 0, 0);\n        this.__spriteBufferCanvas.context.drawImage(this.compositionCanvas.canvas, 32 * position.x, 32 * position.y);\n    }\n    __compose(outfit, baseData, maskData) {\n        let HEAD = outfit.getColor(outfit.details.head);\n        let BODY = outfit.getColor(outfit.details.body);\n        let LEGS = outfit.getColor(outfit.details.legs);\n        let FEET = outfit.getColor(outfit.details.feet);\n        let mask = new Uint32Array(maskData.data.buffer);\n        let base = baseData.data;\n        for (let i = 0; i < mask.length; i++) {\n            let offset = 4 * i;\n            switch (mask[i]) {\n                case 0xFF00FFFF: // Head\n                    base[offset] = (base[offset] * ((HEAD >> 0) & 0xFF)) / 0xFF;\n                    base[offset + 1] = (base[offset + 1] * ((HEAD >> 8) & 0xFF)) / 0xFF;\n                    base[offset + 2] = (base[offset + 2] * ((HEAD >> 16) & 0xFF)) / 0xFF;\n                    break;\n                case 0xFF0000FF: // Body\n                    base[offset] = (base[offset] * ((BODY >> 0) & 0xFF)) / 0xFF;\n                    base[offset + 1] = (base[offset + 1] * ((BODY >> 8) & 0xFF)) / 0xFF;\n                    base[offset + 2] = (base[offset + 2] * ((BODY >> 16) & 0xFF)) / 0xFF;\n                    break;\n                case 0xFF00FF00: // Legs\n                    base[offset] = (base[offset] * ((LEGS >> 0) & 0xFF)) / 0xFF;\n                    base[offset + 1] = (base[offset + 1] * ((LEGS >> 8) & 0xFF)) / 0xFF;\n                    base[offset + 2] = (base[offset + 2] * ((LEGS >> 16) & 0xFF)) / 0xFF;\n                    break;\n                case 0xFFFF0000: // Feet\n                    base[offset] = (base[offset] * ((FEET >> 0) & 0xFF)) / 0xFF;\n                    base[offset + 1] = (base[offset + 1] * ((FEET >> 8) & 0xFF)) / 0xFF;\n                    base[offset + 2] = (base[offset + 2] * ((FEET >> 16) & 0xFF)) / 0xFF;\n                    break;\n            }\n        }\n    }\n}\nSpriteBuffer.__globalSpriteAddressPointers = {};\nSpriteBuffer.__globalPacket = null;\nSpriteBuffer.__version = null;\nSpriteBuffer.SIGNATURES = {\n    \"41B9EA86\": 740,\n    \"439852BE\": 760,\n    \"57BBD603\": 1098\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SpriteBuffer);\n\n\n//# sourceURL=webpack:///./client/src/sprite-buffer.ts?");

/***/ }),

/***/ "./client/src/sprite.ts":
/*!******************************!*\
  !*** ./client/src/sprite.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Sprite)\n/* harmony export */ });\nclass Sprite {\n    constructor(src, position, size) {\n        /*\n         * Class Sprite\n         * Container for a single sprite that references a spritesheet, position, and size\n         */\n        this.src = src;\n        this.position = position;\n        this.size = size;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/sprite.ts?");

/***/ }),

/***/ "./client/src/state.ts":
/*!*****************************!*\
  !*** ./client/src/state.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ State)\n/* harmony export */ });\nclass State {\n    constructor() {\n        /*\n         * Class State\n         * Wrapper that contains properties for state variables with optional callbacks after getting/setting the property\n         * For example: updating the DOM after a creature's health is changed\n         */\n        this.__state = {};\n    }\n    add(key, callback) {\n        /*\n         * Function State.add\n         * Creates a new property in the state variable\n         */\n        // Initialize the state variable\n        this.__state[key] = null;\n        // Define the getter & setter dynamically\n        Object.defineProperty(this, key, this.__createPattern(key, callback));\n    }\n    __createPattern(key, callback) {\n        /*\n         * Function State.__createPattern\n         * Creates a new setter and getter pattern for a property\n         */\n        return {\n            get: () => this.__state[key],\n            set: (value) => {\n                this.__state[key] = value;\n                // If a callback was supplied, execute it with the set value\n                if (callback) {\n                    callback(value);\n                }\n            },\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/state.ts?");

/***/ }),

/***/ "./client/src/thing.ts":
/*!*****************************!*\
  !*** ./client/src/thing.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Thing)\n/* harmony export */ });\n/* harmony import */ var _bitflag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitflag */ \"./client/src/bitflag.ts\");\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n\n\nclass Thing {\n    constructor(id) {\n        this.__parent = null;\n        this.DEFAULT_FRAME_LENGTH_MS = 500;\n        this.__durations = [];\n        this.__durationsSum = 0;\n        this.id = id;\n        if (this.id !== 0 && window.gameClient.hasExtendedAnimations() && this.isAnimated()) {\n            this.__generateExtendedDurations();\n        }\n    }\n    setParent(parent) {\n        /*\n         * Function Thing.setParent\n         * Sets the parent of a thing: e.g., a tile or container\n         */\n        this.__parent = parent;\n    }\n    isAnimated() {\n        /*\n         * Function Thing.isAnimated\n         * Returns true if the thing is animated\n         */\n        return this.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NONE).animationLength > 1;\n    }\n    getFrame() {\n        /*\n         * Function Thing.getFrame\n         * Returns the current frame of the thing\n         */\n        return this.isAnimated() ? this.__getGlobalFrame() : 0;\n    }\n    isMultiUse() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagMultiUse);\n    }\n    isElevation() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagElevation);\n    }\n    isRotateable() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagRotateable);\n    }\n    isPickupable() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagPickupable);\n    }\n    isSplash() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagSplash);\n    }\n    isStackable() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagStackable);\n    }\n    isFluidContainer() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagFluidContainer);\n    }\n    isLight() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagLight);\n    }\n    __getGlobalFrame() {\n        /*\n         * Function Thing.__getGlobalFrame\n         * Returns frame from a global counter that is not specific to a single item (e.g. patterns)\n         */\n        let frameGroup = this.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NONE);\n        if (!window.gameClient.hasExtendedAnimations()) {\n            return Math.floor((window.gameClient.renderer.__nMiliseconds / this.DEFAULT_FRAME_LENGTH_MS) % frameGroup.animationLength);\n        }\n        let delta = window.gameClient.renderer.__nMiliseconds % this.__durationsSum;\n        for (let i = 0; i < this.__durations.length; i++) {\n            if (this.__durations[i] >= delta) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    getMinimapColor() {\n        /*\n         * Function Thing.getMinimapColor\n         * Returns the minimap color of a thing\n         */\n        if (this.id === 0)\n            return null;\n        if (!this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagMinimapColor))\n            return null;\n        return this.getDataObject().properties.minimapColor;\n    }\n    getSprite(group, index) {\n        /*\n         * Function Thing.getSprite\n         * Wraps a call to the data object\n         */\n        return this.getDataObject().frameGroups[group].getSprite(index);\n    }\n    getFrameGroup(group) {\n        return this.getDataObject().frameGroups[group];\n    }\n    getDataObject() {\n        /*\n         * Function Thing.getDataObject\n         * Returns the data object based on the identifier\n         */\n        return window.gameClient.dataObjects.get(this.id);\n    }\n    hasFlag(flag) {\n        /*\n         * Function Thing.hasFlag\n         * Returns whether the flag in the data object is set\n         */\n        return this.getDataObject().flags.get(flag);\n    }\n    __generateExtendedDurations() {\n        /*\n         * Function Thing.__generateExtendedDurations\n         * Generates the cumulative duration for all of the extended frames\n         */\n        let durations = this.getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NONE).animationLengths;\n        let sum = 0;\n        this.__durations = durations.map(duration => {\n            return sum += Math.floor(Math.random() * (duration.max - duration.min + 1)) + duration.min;\n        });\n        this.__durationsSum = sum;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/thing.ts?");

/***/ }),

/***/ "./client/src/tile.ts":
/*!****************************!*\
  !*** ./client/src/tile.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Tile)\n/* harmony export */ });\n/* harmony import */ var _bitflag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitflag */ \"./client/src/bitflag.ts\");\n/* harmony import */ var _condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./condition */ \"./client/src/condition.ts\");\n/* harmony import */ var _frame_group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frame-group */ \"./client/src/frame-group.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _thing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thing */ \"./client/src/thing.ts\");\n\n\n\n\n\nclass Tile extends _thing__WEBPACK_IMPORTED_MODULE_4__[\"default\"] {\n    constructor(tile, position) {\n        super(tile.id);\n        this.__renderElevation = 0;\n        this.__animations = new Set();\n        this.__deferredCreatures = new Set();\n        this.monsters = new Set();\n        // Pathfinding properties\n        this.__f = 0;\n        this.__g = 0;\n        this.__h = 0;\n        this.__visited = false;\n        this.__closed = false;\n        this.__parentNode = null;\n        this.neighbours = []; // Store neighboring tiles for pathfinding\n        this.flags = tile.flags;\n        this.zone = tile.zone;\n        this.__position = position;\n        this.items = tile.items;\n        this.cleanPathfinding();\n    }\n    getFriction() {\n        return this.getDataObject().properties.speed || 100;\n    }\n    isNoLogoutZone() {\n        return Boolean(this.flags & 8);\n    }\n    isProtectionZone() {\n        return Boolean(this.flags & 1);\n    }\n    getCost() {\n        if (!this.hasFlag(\"DatFlagGround\")) {\n            return 1;\n        }\n        return this.getDataObject().properties.speed;\n    }\n    cleanPathfinding() {\n        this.__f = 0;\n        this.__g = 0;\n        this.__h = 0;\n        this.__visited = false;\n        this.__closed = false;\n        this.__parent = null;\n    }\n    getPosition() {\n        return this.__position;\n    }\n    addElevation(elevation) {\n        this.setElevation(Math.min(24 / 32, this.__renderElevation + elevation / 32));\n    }\n    deleteAnimation(animation) {\n        this.__animations.delete(animation);\n    }\n    addAnimation(animation) {\n        this.__animations.add(animation);\n    }\n    setElevation(elevation) {\n        this.__renderElevation = elevation;\n    }\n    hasMaximumElevation() {\n        return this.__renderElevation === 0.75;\n    }\n    addCreature(creature) {\n        if (creature === window.gameClient.player &&\n            this.isProtectionZone() &&\n            !window.gameClient.player.hasCondition(_condition__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PROTECTION_ZONE)) {\n            window.gameClient.player.addCondition(_condition__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PROTECTION_ZONE);\n        }\n        this.monsters.add(creature);\n    }\n    removeCreature(creature) {\n        if (creature === window.gameClient.player &&\n            this.isProtectionZone() &&\n            window.gameClient.player.hasCondition(_condition__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PROTECTION_ZONE)) {\n            window.gameClient.player.removeCondition(5);\n        }\n        this.monsters.delete(creature);\n    }\n    isItemBlocked() {\n        for (let i = 0; i < this.items.length; i++) {\n            if (!this.items[i].isWalkable()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    isTranslucent() {\n        return this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagTranslucent);\n    }\n    isHookSouth() {\n        return this.items.some(item => item.isHookSouth());\n    }\n    isHookEast() {\n        return this.items.some(item => item.isHookEast());\n    }\n    isWalkable() {\n        return !this.hasFlag(_bitflag__WEBPACK_IMPORTED_MODULE_0__.PropBitFlag.DatFlagNotWalkable);\n    }\n    isOccupied() {\n        if (this.id === 0 || !this.isWalkable() || this.isItemBlocked()) {\n            return true;\n        }\n        return Array.from(this.monsters).some(monster => monster.type !== 0);\n    }\n    addItem(item, slot) {\n        item.__parent = this;\n        const selectedItem = this.peekItem(slot);\n        if (!selectedItem) {\n            this.items.push(item);\n            return;\n        }\n        if (slot === 0xff) {\n            this.items.push(item);\n        }\n        else {\n            this.items.splice(slot, 0, item);\n        }\n    }\n    removeItem(index, count) {\n        if (index === 0xff) {\n            index = this.items.length - 1;\n        }\n        if (count === 0 || this.items[index].isFluidContainer()) {\n            this.items.splice(index, 1);\n            return;\n        }\n        this.items[index].count -= count;\n        if (this.items[index].count === 0) {\n            this.items.splice(index, 1);\n        }\n    }\n    peekItem(slot) {\n        if (this.items.length === 0) {\n            return null;\n        }\n        return slot === 0xff ? this.items[this.items.length - 1] : this.items[slot];\n    }\n    getPattern() {\n        const proto = this.getDataObject().getFrameGroup(_frame_group__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NONE);\n        return new _position__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.__position.x % proto.pattern.x, this.__position.y % proto.pattern.y, this.__position.z % proto.pattern.z);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/tile.ts?");

/***/ }),

/***/ "./client/src/weather-canvas.ts":
/*!**************************************!*\
  !*** ./client/src/weather-canvas.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WeatherCanvas)\n/* harmony export */ });\nclass WeatherCanvas {\n    ;\n    constructor(screen) {\n        // Wrapper for the screen canvas: we do not need an extra canvas\n        this.screen = screen;\n        // Fading state\n        this.__ambientAlpha = 0;\n        this.__ambientAlphaTarget = 0;\n        this.__ambientAlphaStart = 0;\n        this.__steps = 0;\n        this.__counter = 0;\n        this.__flash = 0;\n        this.__isRaining = false;\n        this.__rainIntensity = 0.025;\n        this.__thunderIntensity = 0.0025;\n        const img = new Image();\n        img.src = \"./png/cloud.png\";\n        this.cloudPattern = img;\n    }\n    setThunder() {\n        // Schedules a thunder effect.\n        this.__flash = 5;\n    }\n    setWeather(alpha) {\n        // Sets up the weather to be shown through a fade.\n        this.__ambientAlphaStart = this.__ambientAlpha;\n        this.__ambientAlphaTarget = alpha;\n        this.__steps = (500 * Math.abs(this.__ambientAlpha - alpha)) | 0;\n        this.__counter = this.__steps;\n    }\n    isRaining() {\n        return this.__isRaining;\n    }\n    setRaining(bool) {\n        this.__isRaining = bool;\n        if (this.__isRaining && !window.gameClient.player.isUnderground()) {\n            window.gameClient.interface.soundManager.setVolume(\"rain\", 1);\n        }\n        else {\n            window.gameClient.interface.soundManager.setVolume(\"rain\", 0);\n        }\n    }\n    drawThunder() {\n        // Draws a thunder flash to the screen.\n        if (this.__flash > 0) {\n            this.screen.context.globalAlpha = this.__flash / 10;\n            this.screen.context.fillStyle = \"white\";\n            this.screen.context.fillRect(0, 0, this.screen.canvas.width, this.screen.canvas.height);\n            this.__flash--;\n            // Extend flashes\n            if (Math.random() < 0.40) {\n                this.setThunder();\n            }\n        }\n    }\n    handleThunder() {\n        if (Math.random() < this.__thunderIntensity && this.isRaining() && this.__flash === 0) {\n            window.gameClient.interface.soundManager.play(\"thunder\");\n            this.setThunder();\n        }\n        this.drawThunder();\n    }\n    drawWeather() {\n        // Draws the weather (e.g., clouds) to the gamescreen canvas.\n        // Hardcoded to clouds.\n        const pattern = this.cloudPattern;\n        // Underground has no weather.\n        if (!window.gameClient.player.isUnderground()) {\n            this.handleThunder();\n        }\n        if (this.__counter > 0) {\n            this.__ambientAlpha =\n                this.__ambientAlphaTarget +\n                    ((this.__counter - 1) / this.__steps) * (this.__ambientAlphaStart - this.__ambientAlphaTarget);\n            this.__counter--;\n        }\n        // No ambient means no weather.\n        if (this.__ambientAlpha === 0) {\n            return;\n        }\n        this.screen.context.globalAlpha = this.__ambientAlpha;\n        // Assuming \"off\" is a global variable of type Position.\n        // todo: CHECK THIS \"off\"\n        const off = window.gameClient.player.getMoveOffset();\n        const selfx = 0.15 * window.gameClient.renderer.debugger.__nFrames + 256 * Math.cos(0.002 * window.gameClient.renderer.debugger.__nFrames);\n        const selfy = 0.15 * window.gameClient.renderer.debugger.__nFrames + 256 * Math.sin(0.002 * window.gameClient.renderer.debugger.__nFrames);\n        // Add self movement of the texture to the static world position.\n        const x = ((32 * (window.gameClient.player.getPosition().x - off.x)) | 0) + selfx;\n        const y = ((32 * (window.gameClient.player.getPosition().y - off.y)) | 0) + selfy;\n        this.drawPattern(pattern, x, y);\n        const selfx2 = -0.15 * window.gameClient.renderer.debugger.__nFrames + 256;\n        const selfy2 = -0.15 * window.gameClient.renderer.debugger.__nFrames + 256;\n        const x2 = ((32 * (window.gameClient.player.getPosition().x - off.x)) | 0) + selfx2;\n        const y2 = ((32 * (window.gameClient.player.getPosition().y - off.y)) | 0) + selfy2;\n        this.drawPattern(pattern, x2, y2);\n        // Reset global alpha.\n        this.screen.context.globalAlpha = 1;\n    }\n    drawPattern(pattern, x, y) {\n        // Draws a tileable pattern to the screen. (x, y) are arbitrary.\n        // Clamp x and y.\n        x = Math.max(0, x) % this.screen.canvas.width;\n        y = Math.max(0, y) % this.screen.canvas.height;\n        x = Math.round(x);\n        y = Math.round(y);\n        // Draw the image four times to cover the canvas.\n        // Top left corner.\n        this.screen.context.drawImage(pattern, x, y, this.screen.canvas.width - x, this.screen.canvas.height - y, 0, 0, this.screen.canvas.width - x, this.screen.canvas.height - y);\n        // Bottom slice.\n        this.screen.context.drawImage(pattern, 0, y, x, this.screen.canvas.height - y, this.screen.canvas.width - x, 0, x, this.screen.canvas.height - y);\n        // Right slice.\n        this.screen.context.drawImage(pattern, x, 0, this.screen.canvas.width - x, y, 0, this.screen.canvas.height - y, this.screen.canvas.width - x, y);\n        // Bottom right corner.\n        this.screen.context.drawImage(pattern, 0, 0, x, y, this.screen.canvas.width - x, this.screen.canvas.height - y, x, y);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/weather-canvas.ts?");

/***/ }),

/***/ "./client/src/window-battle.ts":
/*!*************************************!*\
  !*** ./client/src/window-battle.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BattleWindow)\n/* harmony export */ });\n/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvas */ \"./client/src/canvas.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./window */ \"./client/src/window.ts\");\n\n\n\nclass BattleWindow extends _window__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(element) {\n        super(element);\n    }\n    removeCreature(id) {\n        // Replace \"[id=\"%s\"]\".format(id) with a template string.\n        const elem = this.getBody().querySelector(`[id=\"${id}\"]`);\n        if (elem === null) {\n            return;\n        }\n        elem.remove();\n    }\n    setTarget(creature) {\n        // Iterate over all children in the body.\n        Array.from(this.getBody().children).forEach(x => {\n            const element = x;\n            if (creature === null) {\n                element.style.border = \"1px solid black\";\n                return;\n            }\n            if (Number(element.getAttribute(\"id\")) === creature.id) {\n                element.style.border = \"1px solid red\";\n            }\n            else {\n                element.style.border = \"1px solid black\";\n            }\n        });\n    }\n    addCreature(creature) {\n        var _a, _b;\n        // Get the target node template and clone it.\n        const targetTemplate = document.getElementById(\"battle-window-target\");\n        if (!targetTemplate)\n            return;\n        const node = targetTemplate.cloneNode(true);\n        node.style.display = \"flex\";\n        node.setAttribute(\"id\", creature.id.toString());\n        // Create a new Canvas for the creature.\n        const canvasParent = (_a = node.lastElementChild) === null || _a === void 0 ? void 0 : _a.firstElementChild;\n        if (!canvasParent)\n            return;\n        const canvas = new _canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvasParent, 64, 64);\n        const frames = creature.getCharacterFrames();\n        const zPattern = (frames.characterGroup.pattern.z > 1 && creature.isMounted()) ? 1 : 0;\n        // TODO: Draw the character on the canvas.\n        // canvas.__drawCharacter(\n        //   creature.spriteBuffer,\n        //   creature.spriteBufferMount,\n        //   creature.outfit,\n        //   new Position(1, 1, 0),\n        //   frames.characterGroup,\n        //   frames.mountGroup,\n        //   frames.characterFrame,\n        //   frames.mountFrame,\n        //   CONST.DIRECTION.SOUTH,\n        //   zPattern,\n        //   32,\n        //   0\n        // );\n        // Update health and mana bars.\n        const nodeList = node.querySelectorAll(\".battle-window-bar-wrapper\");\n        if (nodeList.length >= 2) {\n            nodeList[0].firstElementChild.innerHTML = `${creature.vitals.health}|${creature.vitals.maxHealth}`;\n            nodeList[1].lastElementChild.innerHTML = `${creature.vitals.mana || 0}|${creature.vitals.maxMana || 0}`;\n        }\n        // Set the creature name.\n        const nameSpan = (_b = node.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild;\n        nameSpan.innerHTML = creature.name;\n        // Append the node to the window body.\n        this.getBody().appendChild(node);\n        // Add a click listener to select the creature.\n        node.addEventListener(\"click\", () => {\n            // Use node.id (converted to number) as the creature identifier.\n            const targetCreature = window.gameClient.world.getCreature(Number(node.id));\n            window.gameClient.player.setTarget(targetCreature);\n            window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_1__.TargetPacket(Number(node.id)));\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/window-battle.ts?");

/***/ }),

/***/ "./client/src/window-friend.ts":
/*!*************************************!*\
  !*** ./client/src/window-friend.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FriendWindow)\n/* harmony export */ });\n/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interface */ \"./client/src/interface.ts\");\n/* harmony import */ var _window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./window */ \"./client/src/window.ts\");\n\n\nclass FriendWindow extends _window__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(element) {\n        super(element);\n    }\n    generateContent(content) {\n        // Map friend entries to DOM nodes and set the window content.\n        const nodes = content.map(this.__createFriendEntry.bind(this));\n        this.setContent(nodes);\n    }\n    __createFriendEntry(entry) {\n        const div = document.createElement(\"div\");\n        // Determine color based on the online status.\n        const color = entry.online ? _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.LIGHTGREEN : _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].COLORS.WHITE;\n        div.className = \"friend-entry\";\n        div.setAttribute(\"friend\", entry.name);\n        // Use the global Interface's getHexColor method.\n        div.style.color = _interface__WEBPACK_IMPORTED_MODULE_0__[\"default\"].prototype.getHexColor(color);\n        div.innerHTML = entry.name;\n        return div;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/window-friend.ts?");

/***/ }),

/***/ "./client/src/window-manager.ts":
/*!**************************************!*\
  !*** ./client/src/window-manager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WindowManager)\n/* harmony export */ });\n/* harmony import */ var _window_battle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./window-battle */ \"./client/src/window-battle.ts\");\n/* harmony import */ var _window_friend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./window-friend */ \"./client/src/window-friend.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ \"./client/src/state.ts\");\n\n\n\nclass WindowManager {\n    ;\n    constructor() {\n        var _a, _b, _c;\n        this.windows = {\n            \"battle-window\": new _window_battle__WEBPACK_IMPORTED_MODULE_0__[\"default\"](document.getElementById(\"battle-window\")),\n            //\"skill-window\": new SkillWindow(document.getElementById(\"skill-window\") as HTMLElement),\n            \"friend-window\": new _window_friend__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.getElementById(\"friend-window\")),\n        };\n        this.stacks = document.getElementsByClassName(\"column\");\n        this.__attachStackEventListeners(this.stacks);\n        // Default add to left column\n        (_a = this.getWindow(\"battle-window\")) === null || _a === void 0 ? void 0 : _a.addTo(this.getStack(\"left\"));\n        (_b = this.getWindow(\"skill-window\")) === null || _b === void 0 ? void 0 : _b.addTo(this.getStack(\"left\"));\n        (_c = this.getWindow(\"friend-window\")) === null || _c === void 0 ? void 0 : _c.addTo(this.getStack(\"left\"));\n        // Initialize state. \n        // If state.add expects a callback function, we supply a no‑op arrow function.\n        this.state = new _state__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        this.state.add(\"currentDragElement\", () => null);\n        this.state.add(\"currentMouseElement\", () => null);\n        this.state.add(\"mouseDownTarget\", () => null);\n        this.state.add(\"currentDragElementOffset\", () => null);\n        // Mouse move/up events\n        document.addEventListener(\"mousemove\", this.__handleMove.bind(this));\n        document.addEventListener(\"mouseup\", this.__handleMouseUp.bind(this));\n        // Register event listeners on all windows.\n        Object.values(this.windows).forEach((gameWindow) => this.register(gameWindow));\n    }\n    register(gameWindow) {\n        this.__addListeners(gameWindow);\n    }\n    getWindow(name) {\n        if (!this.windows.hasOwnProperty(name)) {\n            return null;\n        }\n        return this.windows[name];\n    }\n    __addListeners(gameWindow) {\n        // Assuming that InteractiveWindow exposes its root element as __element\n        gameWindow.__element.addEventListener(\"dragstart\", this.__handleDragStart.bind(this));\n        gameWindow.__element.addEventListener(\"dragend\", this.__handleDragEnd.bind(this));\n        gameWindow.__element.addEventListener(\"mousedown\", this.__handleMouseDown.bind(this, gameWindow));\n    }\n    closeAll() {\n        Object.values(this.windows).forEach((gameWindow) => gameWindow.close());\n    }\n    getStack(stack) {\n        switch (stack) {\n            case \"left\":\n                return this.stacks[0];\n            case \"right\":\n                return this.stacks[1];\n            default:\n                console.error(\"Unknown stack requested.\");\n                return undefined;\n        }\n    }\n    __attachStackEventListeners(stacks) {\n        Array.from(stacks).forEach((element) => {\n            element.addEventListener(\"dragover\", (e) => this.__handleWindowDrop(e));\n        });\n    }\n    __handleMove(event) {\n        if (this.state.currentMouseElement === null) {\n            return;\n        }\n        const body = this.state.currentMouseElement.getBody ? this.state.currentMouseElement.getBody() : null;\n        if (body) {\n            body.style.height = (event.clientY - body.offsetTop - 12) + \"px\";\n        }\n    }\n    __handleWindowDrop(event) {\n        var _a, _b;\n        let element = event.target;\n        if (this.state.currentDragElement === null) {\n            return;\n        }\n        // Dropped in the stack element itself: append the element\n        if (element.className === \"column\") {\n            element.append(this.state.currentDragElement);\n            return;\n        }\n        // Walk up the DOM tree until we find an element whose parent has class \"column\"\n        while (element.parentElement && element.parentElement.className !== \"column\") {\n            element = element.parentElement;\n        }\n        if (element === this.state.currentDragElement) {\n            return;\n        }\n        if (element.previousSibling === this.state.currentDragElement) {\n            (_a = element.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(element, this.state.currentDragElement);\n        }\n        else {\n            (_b = element.parentNode) === null || _b === void 0 ? void 0 : _b.insertBefore(this.state.currentDragElement, element);\n        }\n    }\n    __handleDragEnd(event) {\n        if (this.state.currentDragElement && this.state.currentDragElement.children[1]) {\n            this.state.currentDragElement.children[1].scrollTop = this.state.currentDragElementOffset;\n        }\n        this.state.currentDragElement = null;\n        this.state.currentDragElementOffset = null;\n        event.target.style.opacity = \"1\";\n    }\n    __handleMouseDown(gameWindow, event) {\n        this.state.mouseDownTarget = event.target;\n        if (event.target.className === \"footer\") {\n            this.state.currentMouseElement = gameWindow;\n        }\n    }\n    __handleDragStart(event) {\n        if (!event.target)\n            return;\n        const target = event.target;\n        if (!this.state.mouseDownTarget || target.className !== \"header\") {\n            event.preventDefault();\n            return;\n        }\n        this.state.currentDragElement = target;\n        // Ensure the target has at least two children before accessing children[1]\n        if (target.children.length > 1) {\n            this.state.currentDragElementOffset = target.children[1].scrollTop;\n        }\n        target.style.opacity = \"0.25\";\n    }\n    __handleMouseUp(event) {\n        this.state.currentMouseElement = null;\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/window-manager.ts?");

/***/ }),

/***/ "./client/src/window.ts":
/*!******************************!*\
  !*** ./client/src/window.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _eventemitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eventemitter */ \"./client/src/eventemitter.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ \"./client/src/state.ts\");\n\n\nclass InteractiveWindow extends _eventemitter__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(element) {\n        super();\n        /*\n         * Class InteractiveWindow\n         * Makes an element with the window class interactive\n         */\n        this.__element = element;\n        // Make the interactive element draggable\n        element.draggable = true;\n        // Attach listeners to the header buttons\n        Array.from(this.getElement(\".header\").getElementsByTagName(\"button\")).forEach((buttonElement) => {\n            buttonElement.addEventListener(\"click\", this.handleButtonClick.bind(this));\n        });\n        // State for the window\n        this.state = new _state__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.state.add(\"title\", this.__setTitle.bind(this));\n    }\n    __setTitle(title) {\n        /*\n         * Function InteractiveWindow.__setTitle\n         * Sets the title of the window\n         */\n        const titleElement = this.getElement(\".header .title\");\n        titleElement.innerHTML = title.charAt(0).toUpperCase() + title.slice(1);\n    }\n    getBody() {\n        /*\n         * Function InteractiveWindow.getBody\n         * Returns the body element of the window\n         */\n        return this.getElement(\".body\");\n    }\n    isMinimized() {\n        /*\n         * Function InteractiveWindow.isMinimized\n         * Returns true when the configured window is hidden\n         */\n        return this.getBody().style.display === \"none\";\n    }\n    getElement(selector) {\n        /*\n         * Function InteractiveWindow.getElement\n         * Returns an element inside the interactive window\n         */\n        return this.__element.querySelector(selector);\n    }\n    handleButtonClick(event) {\n        /*\n         * Function InteractiveWindow.handleButtonClick\n         * Delegates a click on a button in the header\n         */\n        const target = event.target;\n        const action = target.getAttribute(\"action\");\n        if (!action)\n            return;\n        this.emit(action);\n        switch (action) {\n            case \"minimize\":\n                this.minimize(target);\n                break;\n            case \"close\":\n                this.close();\n                break;\n        }\n    }\n    minimize(buttonElement) {\n        /*\n         * Function InteractiveWindow.minimize\n         * Minimizes or restores the window\n         */\n        if (this.isMinimized()) {\n            this.setElementVisible(buttonElement);\n        }\n        else {\n            this.setElementHidden(buttonElement);\n        }\n    }\n    setElementVisible(buttonElement) {\n        /*\n         * Function InteractiveWindow.setElementVisible\n         * Restores the window to its original height\n         */\n        const body = this.getBody();\n        const footer = this.getElement(\".footer\");\n        body.style.display = \"flex\";\n        body.style.height = \"40px\";\n        this.__element.style.minHeight = \"82px\";\n        footer.style.display = \"block\";\n        buttonElement.innerHTML = \"&#x2212;\";\n    }\n    setElementHidden(buttonElement) {\n        /*\n         * Function InteractiveWindow.setElementHidden\n         * Minimizes the window by hiding its content\n         */\n        const body = this.getBody();\n        const footer = this.getElement(\".footer\");\n        body.style.display = \"none\";\n        footer.style.display = \"none\";\n        this.__element.style.minHeight = InteractiveWindow.HIDDEN_HEIGHT + \"px\";\n        buttonElement.innerHTML = \"+\";\n    }\n    toggle() {\n        /*\n         * Function InteractiveWindow.toggle\n         * Toggles the window open or closed\n         */\n        this.__element.style.display = this.isHidden() ? \"flex\" : \"none\";\n    }\n    close() {\n        /*\n         * Function InteractiveWindow.close\n         * Closes the window\n         */\n        this.__element.style.display = \"none\";\n    }\n    isHidden() {\n        /*\n         * Function InteractiveWindow.isHidden\n         * Returns true if the window is hidden\n         */\n        return this.__element.style.display === \"none\" || this.__element.style.display === \"\";\n    }\n    open() {\n        /*\n         * Function InteractiveWindow.open\n         * Opens the window\n         */\n        this.__element.style.display = \"flex\";\n    }\n    setContent(content) {\n        /*\n         * Function InteractiveWindow.setContent\n         * Sets the content of the window\n         */\n        const body = this.getBody();\n        // Reset content\n        body.innerHTML = \"\";\n        if (!content) {\n            return;\n        }\n        // Add all the child nodes\n        content.filter(Boolean).forEach((node) => {\n            body.appendChild(node);\n        });\n    }\n    remove() {\n        /*\n         * Function InteractiveWindow.remove\n         * Removes the element from the DOM\n         */\n        this.__element.remove();\n    }\n    addTo(stackElement) {\n        /*\n         * Function InteractiveWindow.addTo\n         * Adds an interactive window to a particular stack\n         */\n        //stackElement.appendChild(this.__element);\n    }\n}\nInteractiveWindow.MINIMUM_HEIGHT = 76;\nInteractiveWindow.HIDDEN_HEIGHT = 20;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InteractiveWindow);\n\n\n//# sourceURL=webpack:///./client/src/window.ts?");

/***/ }),

/***/ "./client/src/world.ts":
/*!*****************************!*\
  !*** ./client/src/world.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ World)\n/* harmony export */ });\n/* harmony import */ var _chunk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk */ \"./client/src/chunk.ts\");\n/* harmony import */ var _clock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clock */ \"./client/src/clock.ts\");\n/* harmony import */ var _pathfinder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pathfinder */ \"./client/src/pathfinder.ts\");\n/* harmony import */ var _position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./position */ \"./client/src/position.ts\");\n/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./protocol */ \"./client/src/protocol.ts\");\n\n\n\n\n\nclass World {\n    constructor(width, height, depth) {\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        // Determine the number of sectors on the map\n        this.nSectorsWidth = this.width / _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].WIDTH;\n        this.nSectorsHeight = this.height / _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].HEIGHT;\n        this.nSectorsDepth = this.depth / _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEPTH;\n        this.activeCreatures = {};\n        this.chunks = [];\n        this.pathfinder = new _pathfinder__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        this.clock = new _clock__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n    handleSelfTeleport() {\n        window.gameClient.player.__teleported = true;\n        window.gameClient.player.__serverWalkConfirmation = true;\n        this.checkEntityReferences();\n        this.checkChunks();\n        window.gameClient.renderer.updateTileCache();\n        //window.gameClient.renderer.minimap.setCenter();\n        if (window.gameClient.player.__movementEvent === null) {\n            window.gameClient.player.__movementEvent = window.gameClient.eventQueue.addEvent(window.gameClient.player.unlockMovement.bind(window.gameClient.player), 10);\n        }\n    }\n    handleTransformTile(packet) {\n        const tile = this.getTileFromWorldPosition(packet.position);\n        if (tile === null)\n            return;\n        tile.id = packet.id;\n    }\n    addCreature(creature) {\n        const tile = this.getTileFromWorldPosition(creature.getPosition());\n        if (tile === null)\n            return;\n        tile.addCreature(creature);\n    }\n    checkEntityReferences() {\n        Object.values(this.activeCreatures).forEach((activeCreature) => {\n            if (window.gameClient.isSelf(activeCreature))\n                return;\n            if (!window.gameClient.player.getChunk().besides(activeCreature.getChunk())) {\n                window.gameClient.networkManager.packetHandler.handleEntityRemove(activeCreature.id);\n            }\n        });\n    }\n    handleCreatureMove(id, position, speed) {\n        window.gameClient.player.__serverWalkConfirmation = false;\n        return this.__handleCreatureMove(id, position, speed);\n    }\n    __handleCreatureMove(id, position, speed) {\n        const creature = this.getCreature(id);\n        if (creature === null)\n            return false;\n        if (position.equals(creature.getPosition()))\n            return false;\n        const fromTile = this.getTileFromWorldPosition(creature.getPosition());\n        if (fromTile !== null) {\n            fromTile.removeCreature(creature);\n        }\n        const tile = this.getTileFromWorldPosition(position);\n        if (tile === null)\n            return false;\n        tile.addCreature(creature);\n        creature.moveTo(position, speed);\n        if (creature === window.gameClient.player) {\n            window.gameClient.player.setAmbientSound();\n        }\n        return true;\n    }\n    createCreature(id, creature) {\n        this.activeCreatures[id] = creature;\n        this.addCreature(creature);\n        return window.gameClient.interface.windowManager.getWindow(\"battle-window\").addCreature(creature);\n    }\n    getCreature(id) {\n        if (!this.activeCreatures.hasOwnProperty(id))\n            return null;\n        return this.activeCreatures[id];\n    }\n    checkChunks() {\n        this.chunks = this.chunks.filter((chunk) => {\n            return window.gameClient.player.getChunk().besides(chunk);\n        });\n    }\n    referenceTileNeighbours() {\n        this.chunks.forEach((chunk) => {\n            chunk.tiles.forEach((tile) => {\n                tile.neighbours = [];\n                const tiles = [\n                    tile.getPosition().west(),\n                    tile.getPosition().north(),\n                    tile.getPosition().east(),\n                    tile.getPosition().south(),\n                    tile.getPosition().northwest(),\n                    tile.getPosition().southwest(),\n                    tile.getPosition().northeast(),\n                    tile.getPosition().southeast()\n                ];\n                tiles\n                    .map(this.getTileFromWorldPosition, this)\n                    .forEach((x) => {\n                    if (x === null || x.id === 0)\n                        return;\n                    tile.neighbours.push(x);\n                });\n            });\n        });\n    }\n    isValidWorldPosition(worldPosition) {\n        return worldPosition.x >= 0 &&\n            worldPosition.y >= 0 &&\n            worldPosition.z >= 0 &&\n            worldPosition.x < this.width &&\n            worldPosition.y < this.height &&\n            worldPosition.z < this.depth;\n    }\n    findChunk(position) {\n        const index = this.getChunkIndex(this.getChunkPositionFromWorldPosition(position));\n        for (let i = 0; i < this.chunks.length; i++) {\n            if (index === this.chunks[i].id) {\n                return this.chunks[i];\n            }\n        }\n        return null;\n    }\n    getChunkFromWorldPosition(position) {\n        if (position === null)\n            return null;\n        if (!this.isValidWorldPosition(position))\n            return null;\n        return this.findChunk(position);\n    }\n    getChunkPositionFromWorldPosition(worldPosition) {\n        const x = worldPosition.x - (worldPosition.z % _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEPTH);\n        const y = worldPosition.y - (worldPosition.z % _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEPTH);\n        const sx = (x / _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].WIDTH) | 0;\n        const sy = (y / _chunk__WEBPACK_IMPORTED_MODULE_0__[\"default\"].HEIGHT) | 0;\n        const sz = worldPosition.z < 8 ? 0 : 1;\n        return new _position__WEBPACK_IMPORTED_MODULE_3__[\"default\"](sx, sy, sz);\n    }\n    getChunkIndex(sectorPosition) {\n        return sectorPosition.x +\n            (sectorPosition.y * this.nSectorsWidth) +\n            (sectorPosition.z * this.nSectorsWidth * this.nSectorsHeight);\n    }\n    isTopTile(position) {\n        for (let z = position.z + 1; z < position.z + 8; z++) {\n            const tile = this.getTileFromWorldPosition(new _position__WEBPACK_IMPORTED_MODULE_3__[\"default\"](position.x, position.y, z));\n            if (tile === null || tile.id !== 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getTopTileFromWorldPosition(position) {\n        const chunk = this.getChunkFromWorldPosition(position);\n        if (chunk === null)\n            return null;\n        return chunk.getFirstTileFromTop(position);\n    }\n    targetMonster(monsters) {\n        // Get the next monster\n        const monster = monsters.values().next().value;\n        // You cannot target yourself\n        if (monster === window.gameClient.player) {\n            return;\n        }\n        // Only monsters can be attacked\n        if (monster.constructor.name !== \"Creature\") {\n            return window.gameClient.interface.notificationManager.setCancelMessage(\"You cannot attack this creature.\");\n        }\n        window.gameClient.player.setTarget(monster);\n        window.gameClient.send(new _protocol__WEBPACK_IMPORTED_MODULE_4__.TargetPacket(monster.id));\n    }\n    getTileFromWorldPosition(worldPosition) {\n        const chunk = this.getChunkFromWorldPosition(worldPosition);\n        if (chunk === null)\n            return null;\n        return chunk.getTileFromWorldPosition(worldPosition);\n    }\n    getItemFromPosition(position) {\n        const tile = this.getTileFromWorldPosition(position);\n        if (tile === null)\n            return null;\n        return tile.peekItem(0xFF);\n    }\n    addItem(position, item, slot) {\n        const tile = this.getTileFromWorldPosition(position);\n        if (tile === null)\n            return;\n        tile.addItem(item, slot);\n    }\n}\n\n\n//# sourceURL=webpack:///./client/src/world.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./client/src/index.ts");
/******/ 	
/******/ })()
;